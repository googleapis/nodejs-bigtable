// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as bigtabletableadminModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v2.BigtableTableAdminClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'bigtableadmin.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          bigtabletableadminModule.v2.BigtableTableAdminClient.servicePath;
        assert.strictEqual(servicePath, 'bigtableadmin.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          bigtabletableadminModule.v2.BigtableTableAdminClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'bigtableadmin.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'bigtableadmin.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'bigtableadmin.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new bigtabletableadminModule.v2.BigtableTableAdminClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'bigtableadmin.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new bigtabletableadminModule.v2.BigtableTableAdminClient({
              universeDomain: 'configured.example.com',
            });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'bigtableadmin.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new bigtabletableadminModule.v2.BigtableTableAdminClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = bigtabletableadminModule.v2.BigtableTableAdminClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.bigtableTableAdminStub, undefined);
      await client.initialize();
      assert(client.bigtableTableAdminStub);
    });

    it('has close method for the initialized client', done => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.bigtableTableAdminStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.bigtableTableAdminStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('createTable', () => {
    it('invokes createTable without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateTableRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Table()
      );
      client.innerApiCalls.createTable = stubSimpleCall(expectedResponse);
      const [response] = await client.createTable(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTable without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateTableRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Table()
      );
      client.innerApiCalls.createTable =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createTable(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.ITable | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTable with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateTableRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTable = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createTable(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTable with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateTableRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createTable(request), expectedError);
    });
  });

  describe('getTable', () => {
    it('invokes getTable without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Table()
      );
      client.innerApiCalls.getTable = stubSimpleCall(expectedResponse);
      const [response] = await client.getTable(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTable without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Table()
      );
      client.innerApiCalls.getTable =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getTable(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.ITable | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTable with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getTable = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getTable(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTable with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getTable(request), expectedError);
    });
  });

  describe('deleteTable', () => {
    it('invokes deleteTable without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTable = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteTable(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTable without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTable =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteTable(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTable with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTable = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteTable(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTable with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteTable(request), expectedError);
    });
  });

  describe('getAuthorizedView', () => {
    it('invokes getAuthorizedView without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetAuthorizedViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.AuthorizedView()
      );
      client.innerApiCalls.getAuthorizedView = stubSimpleCall(expectedResponse);
      const [response] = await client.getAuthorizedView(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAuthorizedView without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetAuthorizedViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.AuthorizedView()
      );
      client.innerApiCalls.getAuthorizedView =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAuthorizedView(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.IAuthorizedView | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAuthorizedView with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetAuthorizedViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAuthorizedView = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAuthorizedView(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAuthorizedView with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetAuthorizedViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAuthorizedView(request), expectedError);
    });
  });

  describe('deleteAuthorizedView', () => {
    it('invokes deleteAuthorizedView without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteAuthorizedViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAuthorizedView =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAuthorizedView(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAuthorizedView without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteAuthorizedViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAuthorizedView =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAuthorizedView(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAuthorizedView with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteAuthorizedViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAuthorizedView = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAuthorizedView(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAuthorizedView with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteAuthorizedViewRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteAuthorizedView(request), expectedError);
    });
  });

  describe('modifyColumnFamilies', () => {
    it('invokes modifyColumnFamilies without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ModifyColumnFamiliesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ModifyColumnFamiliesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Table()
      );
      client.innerApiCalls.modifyColumnFamilies =
        stubSimpleCall(expectedResponse);
      const [response] = await client.modifyColumnFamilies(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.modifyColumnFamilies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.modifyColumnFamilies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes modifyColumnFamilies without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ModifyColumnFamiliesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ModifyColumnFamiliesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Table()
      );
      client.innerApiCalls.modifyColumnFamilies =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.modifyColumnFamilies(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.ITable | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.modifyColumnFamilies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.modifyColumnFamilies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes modifyColumnFamilies with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ModifyColumnFamiliesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ModifyColumnFamiliesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.modifyColumnFamilies = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.modifyColumnFamilies(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.modifyColumnFamilies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.modifyColumnFamilies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes modifyColumnFamilies with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ModifyColumnFamiliesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ModifyColumnFamiliesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.modifyColumnFamilies(request), expectedError);
    });
  });

  describe('dropRowRange', () => {
    it('invokes dropRowRange without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DropRowRangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DropRowRangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.dropRowRange = stubSimpleCall(expectedResponse);
      const [response] = await client.dropRowRange(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.dropRowRange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.dropRowRange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes dropRowRange without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DropRowRangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DropRowRangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.dropRowRange =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.dropRowRange(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.dropRowRange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.dropRowRange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes dropRowRange with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DropRowRangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DropRowRangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.dropRowRange = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.dropRowRange(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.dropRowRange as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.dropRowRange as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes dropRowRange with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DropRowRangeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DropRowRangeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.dropRowRange(request), expectedError);
    });
  });

  describe('generateConsistencyToken', () => {
    it('invokes generateConsistencyToken without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GenerateConsistencyTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GenerateConsistencyTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GenerateConsistencyTokenResponse()
      );
      client.innerApiCalls.generateConsistencyToken =
        stubSimpleCall(expectedResponse);
      const [response] = await client.generateConsistencyToken(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateConsistencyToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateConsistencyToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateConsistencyToken without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GenerateConsistencyTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GenerateConsistencyTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GenerateConsistencyTokenResponse()
      );
      client.innerApiCalls.generateConsistencyToken =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateConsistencyToken(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateConsistencyToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateConsistencyToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateConsistencyToken with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GenerateConsistencyTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GenerateConsistencyTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.generateConsistencyToken = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.generateConsistencyToken(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.generateConsistencyToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateConsistencyToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateConsistencyToken with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GenerateConsistencyTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GenerateConsistencyTokenRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.generateConsistencyToken(request),
        expectedError
      );
    });
  });

  describe('checkConsistency', () => {
    it('invokes checkConsistency without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CheckConsistencyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CheckConsistencyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CheckConsistencyResponse()
      );
      client.innerApiCalls.checkConsistency = stubSimpleCall(expectedResponse);
      const [response] = await client.checkConsistency(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.checkConsistency as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.checkConsistency as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkConsistency without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CheckConsistencyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CheckConsistencyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CheckConsistencyResponse()
      );
      client.innerApiCalls.checkConsistency =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.checkConsistency(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.ICheckConsistencyResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.checkConsistency as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.checkConsistency as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkConsistency with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CheckConsistencyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CheckConsistencyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.checkConsistency = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkConsistency(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.checkConsistency as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.checkConsistency as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkConsistency with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CheckConsistencyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CheckConsistencyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.checkConsistency(request), expectedError);
    });
  });

  describe('getSnapshot', () => {
    it('invokes getSnapshot without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Snapshot()
      );
      client.innerApiCalls.getSnapshot = stubSimpleCall(expectedResponse);
      const [response] = await client.getSnapshot(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSnapshot without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Snapshot()
      );
      client.innerApiCalls.getSnapshot =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSnapshot(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.ISnapshot | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSnapshot with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getSnapshot = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getSnapshot(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSnapshot with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getSnapshot(request), expectedError);
    });
  });

  describe('deleteSnapshot', () => {
    it('invokes deleteSnapshot without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSnapshot = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteSnapshot(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSnapshot without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSnapshot =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteSnapshot(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSnapshot with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSnapshot = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteSnapshot(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSnapshot with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteSnapshot(request), expectedError);
    });
  });

  describe('getBackup', () => {
    it('invokes getBackup without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Backup()
      );
      client.innerApiCalls.getBackup = stubSimpleCall(expectedResponse);
      const [response] = await client.getBackup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Backup()
      );
      client.innerApiCalls.getBackup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getBackup(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.IBackup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getBackup = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getBackup(request), expectedError);
    });
  });

  describe('updateBackup', () => {
    it('invokes updateBackup without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Backup()
      );
      client.innerApiCalls.updateBackup = stubSimpleCall(expectedResponse);
      const [response] = await client.updateBackup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.bigtable.admin.v2.Backup()
      );
      client.innerApiCalls.updateBackup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateBackup(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.IBackup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateBackup(request), expectedError);
    });
  });

  describe('deleteBackup', () => {
    it('invokes deleteBackup without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteBackup = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteBackup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteBackup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteBackup(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteBackup(request), expectedError);
    });
  });

  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getIamPolicy(request), expectedError);
    });
  });

  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.setIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.setIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.setIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.setIamPolicy(request), expectedError);
    });
  });

  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.testIamPermissions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.ITestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.testIamPermissions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with closed client', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.testIamPermissions(request), expectedError);
    });
  });

  describe('createTableFromSnapshot', () => {
    it('invokes createTableFromSnapshot without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateTableFromSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateTableFromSnapshotRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createTableFromSnapshot =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createTableFromSnapshot(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTableFromSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTableFromSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTableFromSnapshot without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateTableFromSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateTableFromSnapshotRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createTableFromSnapshot =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createTableFromSnapshot(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.ITable,
              protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTableFromSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTableFromSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTableFromSnapshot with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateTableFromSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateTableFromSnapshotRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTableFromSnapshot = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createTableFromSnapshot(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createTableFromSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTableFromSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTableFromSnapshot with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateTableFromSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateTableFromSnapshotRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTableFromSnapshot = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createTableFromSnapshot(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createTableFromSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTableFromSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateTableFromSnapshotProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateTableFromSnapshotProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateTableFromSnapshotProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateTableFromSnapshotProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateTable', () => {
    it('invokes updateTable without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateTableRequest()
      );
      request.table ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateTableRequest',
        ['table', 'name']
      );
      request.table.name = defaultValue1;
      const expectedHeaderRequestParams = `table.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateTable = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateTable(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTable without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateTableRequest()
      );
      request.table ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateTableRequest',
        ['table', 'name']
      );
      request.table.name = defaultValue1;
      const expectedHeaderRequestParams = `table.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateTable =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateTable(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.ITable,
              protos.google.bigtable.admin.v2.IUpdateTableMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.IUpdateTableMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTable with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateTableRequest()
      );
      request.table ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateTableRequest',
        ['table', 'name']
      );
      request.table.name = defaultValue1;
      const expectedHeaderRequestParams = `table.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTable = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateTable(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTable with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateTableRequest()
      );
      request.table ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateTableRequest',
        ['table', 'name']
      );
      request.table.name = defaultValue1;
      const expectedHeaderRequestParams = `table.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTable = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateTable(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateTableProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateTableProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateTableProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateTableProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('undeleteTable', () => {
    it('invokes undeleteTable without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UndeleteTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UndeleteTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.undeleteTable =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.undeleteTable(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.undeleteTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeleteTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeleteTable without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UndeleteTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UndeleteTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.undeleteTable =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.undeleteTable(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.ITable,
              protos.google.bigtable.admin.v2.IUndeleteTableMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.IUndeleteTableMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.undeleteTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeleteTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeleteTable with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UndeleteTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UndeleteTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.undeleteTable = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.undeleteTable(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.undeleteTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeleteTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes undeleteTable with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UndeleteTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UndeleteTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.undeleteTable = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.undeleteTable(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.undeleteTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.undeleteTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUndeleteTableProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUndeleteTableProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUndeleteTableProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUndeleteTableProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createAuthorizedView', () => {
    it('invokes createAuthorizedView without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateAuthorizedViewRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAuthorizedView =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAuthorizedView(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAuthorizedView without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateAuthorizedViewRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAuthorizedView =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAuthorizedView(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.IAuthorizedView,
              protos.google.bigtable.admin.v2.ICreateAuthorizedViewMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.IAuthorizedView,
        protos.google.bigtable.admin.v2.ICreateAuthorizedViewMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAuthorizedView with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateAuthorizedViewRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAuthorizedView = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAuthorizedView(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAuthorizedView with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateAuthorizedViewRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateAuthorizedViewRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAuthorizedView = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAuthorizedView(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAuthorizedViewProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAuthorizedViewProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAuthorizedViewProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAuthorizedViewProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateAuthorizedView', () => {
    it('invokes updateAuthorizedView without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateAuthorizedViewRequest()
      );
      request.authorizedView ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateAuthorizedViewRequest',
        ['authorizedView', 'name']
      );
      request.authorizedView.name = defaultValue1;
      const expectedHeaderRequestParams = `authorized_view.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAuthorizedView =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateAuthorizedView(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAuthorizedView without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateAuthorizedViewRequest()
      );
      request.authorizedView ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateAuthorizedViewRequest',
        ['authorizedView', 'name']
      );
      request.authorizedView.name = defaultValue1;
      const expectedHeaderRequestParams = `authorized_view.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAuthorizedView =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAuthorizedView(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.IAuthorizedView,
              protos.google.bigtable.admin.v2.IUpdateAuthorizedViewMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.IAuthorizedView,
        protos.google.bigtable.admin.v2.IUpdateAuthorizedViewMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAuthorizedView with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateAuthorizedViewRequest()
      );
      request.authorizedView ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateAuthorizedViewRequest',
        ['authorizedView', 'name']
      );
      request.authorizedView.name = defaultValue1;
      const expectedHeaderRequestParams = `authorized_view.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAuthorizedView = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAuthorizedView(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAuthorizedView with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.UpdateAuthorizedViewRequest()
      );
      request.authorizedView ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.UpdateAuthorizedViewRequest',
        ['authorizedView', 'name']
      );
      request.authorizedView.name = defaultValue1;
      const expectedHeaderRequestParams = `authorized_view.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAuthorizedView = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateAuthorizedView(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAuthorizedView as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAuthorizedView as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateAuthorizedViewProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateAuthorizedViewProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateAuthorizedViewProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateAuthorizedViewProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('snapshotTable', () => {
    it('invokes snapshotTable without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.SnapshotTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.SnapshotTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.snapshotTable =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.snapshotTable(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.snapshotTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.snapshotTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes snapshotTable without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.SnapshotTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.SnapshotTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.snapshotTable =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.snapshotTable(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.ISnapshot,
              protos.google.bigtable.admin.v2.ISnapshotTableMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.ISnapshot,
        protos.google.bigtable.admin.v2.ISnapshotTableMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.snapshotTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.snapshotTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes snapshotTable with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.SnapshotTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.SnapshotTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.snapshotTable = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.snapshotTable(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.snapshotTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.snapshotTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes snapshotTable with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.SnapshotTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.SnapshotTableRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.snapshotTable = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.snapshotTable(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.snapshotTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.snapshotTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkSnapshotTableProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkSnapshotTableProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkSnapshotTableProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkSnapshotTableProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createBackup', () => {
    it('invokes createBackup without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.IBackup,
              protos.google.bigtable.admin.v2.ICreateBackupMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.IBackup,
        protos.google.bigtable.admin.v2.ICreateBackupMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateBackupProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateBackupProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('restoreTable', () => {
    it('invokes restoreTable without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.RestoreTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.RestoreTableRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.restoreTable = stubLongRunningCall(expectedResponse);
      const [operation] = await client.restoreTable(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restoreTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreTable without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.RestoreTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.RestoreTableRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.restoreTable =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.restoreTable(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.ITable,
              protos.google.bigtable.admin.v2.IRestoreTableMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.IRestoreTableMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restoreTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreTable with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.RestoreTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.RestoreTableRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restoreTable = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.restoreTable(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.restoreTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreTable with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.RestoreTableRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.RestoreTableRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restoreTable = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.restoreTable(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.restoreTable as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreTable as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRestoreTableProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRestoreTableProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRestoreTableProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkRestoreTableProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('copyBackup', () => {
    it('invokes copyBackup without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CopyBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CopyBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.copyBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.copyBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.copyBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.copyBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes copyBackup without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CopyBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CopyBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.copyBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.copyBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.bigtable.admin.v2.IBackup,
              protos.google.bigtable.admin.v2.ICopyBackupMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.bigtable.admin.v2.IBackup,
        protos.google.bigtable.admin.v2.ICopyBackupMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.copyBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.copyBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes copyBackup with call error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CopyBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CopyBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.copyBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.copyBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.copyBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.copyBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes copyBackup with LRO error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.CopyBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.CopyBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.copyBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.copyBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.copyBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.copyBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCopyBackupProgress without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCopyBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCopyBackupProgress with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCopyBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listTables', () => {
    it('invokes listTables without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListTablesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListTablesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
      ];
      client.innerApiCalls.listTables = stubSimpleCall(expectedResponse);
      const [response] = await client.listTables(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTables as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTables as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTables without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListTablesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListTablesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
      ];
      client.innerApiCalls.listTables =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTables(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.ITable[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTables as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTables as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTables with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListTablesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListTablesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTables = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listTables(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listTables as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTables as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTablesStream without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListTablesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListTablesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
      ];
      client.descriptors.page.listTables.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTablesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.bigtable.admin.v2.Table[] = [];
        stream.on('data', (response: protos.google.bigtable.admin.v2.Table) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTables.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTables, request)
      );
      assert(
        (client.descriptors.page.listTables.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listTablesStream with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListTablesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListTablesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTables.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listTablesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.bigtable.admin.v2.Table[] = [];
        stream.on('data', (response: protos.google.bigtable.admin.v2.Table) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listTables.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTables, request)
      );
      assert(
        (client.descriptors.page.listTables.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTables without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListTablesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListTablesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
      ];
      client.descriptors.page.listTables.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.bigtable.admin.v2.ITable[] = [];
      const iterable = client.listTablesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listTables.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTables.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTables with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListTablesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListTablesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTables.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listTablesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.bigtable.admin.v2.ITable[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listTables.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTables.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAuthorizedViews', () => {
    it('invokes listAuthorizedViews without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListAuthorizedViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListAuthorizedViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
      ];
      client.innerApiCalls.listAuthorizedViews =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAuthorizedViews(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAuthorizedViews as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAuthorizedViews as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAuthorizedViews without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListAuthorizedViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListAuthorizedViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
      ];
      client.innerApiCalls.listAuthorizedViews =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAuthorizedViews(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.IAuthorizedView[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAuthorizedViews as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAuthorizedViews as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAuthorizedViews with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListAuthorizedViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListAuthorizedViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAuthorizedViews = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAuthorizedViews(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAuthorizedViews as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAuthorizedViews as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAuthorizedViewsStream without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListAuthorizedViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListAuthorizedViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
      ];
      client.descriptors.page.listAuthorizedViews.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAuthorizedViewsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.bigtable.admin.v2.AuthorizedView[] = [];
        stream.on(
          'data',
          (response: protos.google.bigtable.admin.v2.AuthorizedView) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAuthorizedViews.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAuthorizedViews, request)
      );
      assert(
        (client.descriptors.page.listAuthorizedViews.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAuthorizedViewsStream with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListAuthorizedViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListAuthorizedViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAuthorizedViews.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAuthorizedViewsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.bigtable.admin.v2.AuthorizedView[] = [];
        stream.on(
          'data',
          (response: protos.google.bigtable.admin.v2.AuthorizedView) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAuthorizedViews.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAuthorizedViews, request)
      );
      assert(
        (client.descriptors.page.listAuthorizedViews.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAuthorizedViews without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListAuthorizedViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListAuthorizedViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
        generateSampleMessage(
          new protos.google.bigtable.admin.v2.AuthorizedView()
        ),
      ];
      client.descriptors.page.listAuthorizedViews.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.bigtable.admin.v2.IAuthorizedView[] = [];
      const iterable = client.listAuthorizedViewsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAuthorizedViews.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAuthorizedViews.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAuthorizedViews with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListAuthorizedViewsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListAuthorizedViewsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAuthorizedViews.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAuthorizedViewsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.bigtable.admin.v2.IAuthorizedView[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAuthorizedViews.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAuthorizedViews.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listSnapshots', () => {
    it('invokes listSnapshots without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
      ];
      client.innerApiCalls.listSnapshots = stubSimpleCall(expectedResponse);
      const [response] = await client.listSnapshots(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSnapshots without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
      ];
      client.innerApiCalls.listSnapshots =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSnapshots(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.ISnapshot[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSnapshots with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listSnapshots = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSnapshots(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSnapshotsStream without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
      ];
      client.descriptors.page.listSnapshots.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSnapshotsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.bigtable.admin.v2.Snapshot[] = [];
        stream.on(
          'data',
          (response: protos.google.bigtable.admin.v2.Snapshot) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSnapshots, request)
      );
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listSnapshotsStream with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSnapshots.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listSnapshotsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.bigtable.admin.v2.Snapshot[] = [];
        stream.on(
          'data',
          (response: protos.google.bigtable.admin.v2.Snapshot) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSnapshots, request)
      );
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSnapshots without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
      ];
      client.descriptors.page.listSnapshots.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.bigtable.admin.v2.ISnapshot[] = [];
      const iterable = client.listSnapshotsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSnapshots.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSnapshots.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSnapshots with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSnapshots.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listSnapshotsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.bigtable.admin.v2.ISnapshot[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSnapshots.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSnapshots.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listBackups', () => {
    it('invokes listBackups without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
      ];
      client.innerApiCalls.listBackups = stubSimpleCall(expectedResponse);
      const [response] = await client.listBackups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackups without error using callback', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
      ];
      client.innerApiCalls.listBackups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listBackups(
          request,
          (
            err?: Error | null,
            result?: protos.google.bigtable.admin.v2.IBackup[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackups with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listBackups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listBackups(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupsStream without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
      ];
      client.descriptors.page.listBackups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.bigtable.admin.v2.Backup[] = [];
        stream.on(
          'data',
          (response: protos.google.bigtable.admin.v2.Backup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackups, request)
      );
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listBackupsStream with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackups.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.bigtable.admin.v2.Backup[] = [];
        stream.on(
          'data',
          (response: protos.google.bigtable.admin.v2.Backup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackups, request)
      );
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackups without error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
        generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
      ];
      client.descriptors.page.listBackups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.bigtable.admin.v2.IBackup[] = [];
      const iterable = client.listBackupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackups with error', async () => {
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.bigtable.admin.v2.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.bigtable.admin.v2.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackups.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listBackupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.bigtable.admin.v2.IBackup[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('appProfile', () => {
      const fakePath = '/rendered/path/appProfile';
      const expectedParameters = {
        project: 'projectValue',
        instance: 'instanceValue',
        app_profile: 'appProfileValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.appProfilePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.appProfilePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('appProfilePath', () => {
        const result = client.appProfilePath(
          'projectValue',
          'instanceValue',
          'appProfileValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.appProfilePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAppProfileName', () => {
        const result = client.matchProjectFromAppProfileName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.appProfilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromAppProfileName', () => {
        const result = client.matchInstanceFromAppProfileName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.appProfilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAppProfileFromAppProfileName', () => {
        const result = client.matchAppProfileFromAppProfileName(fakePath);
        assert.strictEqual(result, 'appProfileValue');
        assert(
          (client.pathTemplates.appProfilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('authorizedView', () => {
      const fakePath = '/rendered/path/authorizedView';
      const expectedParameters = {
        project: 'projectValue',
        instance: 'instanceValue',
        table: 'tableValue',
        authorized_view: 'authorizedViewValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.authorizedViewPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.authorizedViewPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('authorizedViewPath', () => {
        const result = client.authorizedViewPath(
          'projectValue',
          'instanceValue',
          'tableValue',
          'authorizedViewValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.authorizedViewPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAuthorizedViewName', () => {
        const result = client.matchProjectFromAuthorizedViewName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.authorizedViewPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromAuthorizedViewName', () => {
        const result = client.matchInstanceFromAuthorizedViewName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.authorizedViewPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTableFromAuthorizedViewName', () => {
        const result = client.matchTableFromAuthorizedViewName(fakePath);
        assert.strictEqual(result, 'tableValue');
        assert(
          (client.pathTemplates.authorizedViewPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAuthorizedViewFromAuthorizedViewName', () => {
        const result =
          client.matchAuthorizedViewFromAuthorizedViewName(fakePath);
        assert.strictEqual(result, 'authorizedViewValue');
        assert(
          (client.pathTemplates.authorizedViewPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('backup', () => {
      const fakePath = '/rendered/path/backup';
      const expectedParameters = {
        project: 'projectValue',
        instance: 'instanceValue',
        cluster: 'clusterValue',
        backup: 'backupValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.backupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.backupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('backupPath', () => {
        const result = client.backupPath(
          'projectValue',
          'instanceValue',
          'clusterValue',
          'backupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.backupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBackupName', () => {
        const result = client.matchProjectFromBackupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromBackupName', () => {
        const result = client.matchInstanceFromBackupName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromBackupName', () => {
        const result = client.matchClusterFromBackupName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupFromBackupName', () => {
        const result = client.matchBackupFromBackupName(fakePath);
        assert.strictEqual(result, 'backupValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('cluster', () => {
      const fakePath = '/rendered/path/cluster';
      const expectedParameters = {
        project: 'projectValue',
        instance: 'instanceValue',
        cluster: 'clusterValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.clusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.clusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('clusterPath', () => {
        const result = client.clusterPath(
          'projectValue',
          'instanceValue',
          'clusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.clusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromClusterName', () => {
        const result = client.matchProjectFromClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromClusterName', () => {
        const result = client.matchInstanceFromClusterName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromClusterName', () => {
        const result = client.matchClusterFromClusterName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.clusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('hotTablet', () => {
      const fakePath = '/rendered/path/hotTablet';
      const expectedParameters = {
        project: 'projectValue',
        instance: 'instanceValue',
        cluster: 'clusterValue',
        hot_tablet: 'hotTabletValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.hotTabletPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.hotTabletPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('hotTabletPath', () => {
        const result = client.hotTabletPath(
          'projectValue',
          'instanceValue',
          'clusterValue',
          'hotTabletValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.hotTabletPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromHotTabletName', () => {
        const result = client.matchProjectFromHotTabletName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.hotTabletPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromHotTabletName', () => {
        const result = client.matchInstanceFromHotTabletName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.hotTabletPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromHotTabletName', () => {
        const result = client.matchClusterFromHotTabletName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.hotTabletPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchHotTabletFromHotTabletName', () => {
        const result = client.matchHotTabletFromHotTabletName(fakePath);
        assert.strictEqual(result, 'hotTabletValue');
        assert(
          (client.pathTemplates.hotTabletPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('instance', () => {
      const fakePath = '/rendered/path/instance';
      const expectedParameters = {
        project: 'projectValue',
        instance: 'instanceValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.instancePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.instancePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('instancePath', () => {
        const result = client.instancePath('projectValue', 'instanceValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.instancePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromInstanceName', () => {
        const result = client.matchProjectFromInstanceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.instancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromInstanceName', () => {
        const result = client.matchInstanceFromInstanceName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.instancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('snapshot', () => {
      const fakePath = '/rendered/path/snapshot';
      const expectedParameters = {
        project: 'projectValue',
        instance: 'instanceValue',
        cluster: 'clusterValue',
        snapshot: 'snapshotValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.snapshotPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.snapshotPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('snapshotPath', () => {
        const result = client.snapshotPath(
          'projectValue',
          'instanceValue',
          'clusterValue',
          'snapshotValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.snapshotPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSnapshotName', () => {
        const result = client.matchProjectFromSnapshotName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromSnapshotName', () => {
        const result = client.matchInstanceFromSnapshotName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromSnapshotName', () => {
        const result = client.matchClusterFromSnapshotName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSnapshotFromSnapshotName', () => {
        const result = client.matchSnapshotFromSnapshotName(fakePath);
        assert.strictEqual(result, 'snapshotValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('table', () => {
      const fakePath = '/rendered/path/table';
      const expectedParameters = {
        project: 'projectValue',
        instance: 'instanceValue',
        table: 'tableValue',
      };
      const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tablePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tablePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tablePath', () => {
        const result = client.tablePath(
          'projectValue',
          'instanceValue',
          'tableValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tablePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTableName', () => {
        const result = client.matchProjectFromTableName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.tablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromTableName', () => {
        const result = client.matchInstanceFromTableName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.tablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTableFromTableName', () => {
        const result = client.matchTableFromTableName(fakePath);
        assert.strictEqual(result, 'tableValue');
        assert(
          (client.pathTemplates.tablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
