// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **


 /**
 * NOTE: This sample is autogenerated, but this library contains handwritten
 * samples that are the recommended way to use this library. Please refer to
 * samples outside of the generated/ folder for these recommendations.
 */ 
'use strict';

function main(instanceName, query, params) {
  // [START bigtable_v2_generated_Bigtable_ExecuteQuery_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The unique name of the instance against which the query should be
   *  executed.
   *  Values are of the form `projects/<project>/instances/<instance>`
   */
  // const instanceName = 'abc123'
  /**
   *  Optional. This value specifies routing for replication. If not specified,
   *  the `default` application profile will be used.
   */
  // const appProfileId = 'abc123'
  /**
   *  Required. The query string.
   */
  // const query = 'abc123'
  /**
   *  Protocol buffer format as described by ProtoSchema and ProtoRows
   *  messages.
   */
  // const protoFormat = {}
  /**
   *  Optional. If this request is resuming a previously interrupted query
   *  execution, `resume_token` should be copied from the last
   *  PartialResultSet yielded before the interruption. Doing this
   *  enables the query execution to resume where the last one left
   *  off.
   *  The rest of the request parameters must exactly match the
   *  request that yielded this token. Otherwise the request will fail.
   */
  // const resumeToken = Buffer.from('string')
  /**
   *  Required. params contains string type keys and Bigtable type values that
   *  bind to placeholders in the query string. In query string, a parameter
   *  placeholder consists of the
   *  `@` character followed by the parameter name (for example, `@firstName`) in
   *  the query string.
   *  For example, if
   *  `params"firstName"  = bytes_value: "foo" type {bytes_type {}}`
   *   then `@firstName` will be replaced with googlesql bytes value "foo" in the
   *   query string during query evaluation.
   *  In case of Value.kind is not set, it will be set to corresponding null
   *  value in googlesql.
   *   `params"firstName"  =  type {string_type {}}`
   *   then `@firstName` will be replaced with googlesql null string.
   *  Value.type should always be set and no inference of type will be made from
   *  Value.kind. If Value.type is not set, we will return INVALID_ARGUMENT
   *  error.
   */
  // const params = [1,2,3,4]

  // Imports the Bigtable library
  const {BigtableClient} = require('@google-cloud/bigtable').v2;

  // Instantiates a client
  const bigtableClient = new BigtableClient();

  async function callExecuteQuery() {
    // Construct request
    const request = {
      instanceName,
      query,
      params,
    };

    // Run request
    const stream = await bigtableClient.executeQuery(request);
    stream.on('data', (response) => { console.log(response) });
    stream.on('error', (err) => { throw(err) });
    stream.on('end', () => { /* API call completed */ });
  }

  callExecuteQuery();
  // [END bigtable_v2_generated_Bigtable_ExecuteQuery_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
