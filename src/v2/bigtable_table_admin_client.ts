// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './bigtable_table_admin_client_config.json';
import {operationsProtos} from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  Service for creating, configuring, and deleting Cloud Bigtable tables.
 *
 *
 *  Provides access to the table schemas only, not the data stored within
 *  the tables.
 * @class
 * @memberof v2
 */
export class BigtableTableAdminClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  bigtableTableAdminStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BigtableTableAdminClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof BigtableTableAdminClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the BigtableTableAdminClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof BigtableTableAdminClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      appProfilePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}/appProfiles/{app_profile}'
      ),
      backupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}'
      ),
      clusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}/clusters/{cluster}'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}'
      ),
      snapshotPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}'
      ),
      tablePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}/tables/{table}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTables: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tables'
      ),
      listSnapshots: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'snapshots'
      ),
      listBackups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'backups'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? this._gaxModule.protobuf.Root.fromJSON(
          // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        )
      : this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule
      .lro({
        auth: this.auth,
        grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
      })
      .operationsClient(opts);
    const createTableFromSnapshotResponse = protoFilesRoot.lookup(
      '.google.bigtable.admin.v2.Table'
    ) as gax.protobuf.Type;
    const createTableFromSnapshotMetadata = protoFilesRoot.lookup(
      '.google.bigtable.admin.v2.CreateTableFromSnapshotMetadata'
    ) as gax.protobuf.Type;
    const snapshotTableResponse = protoFilesRoot.lookup(
      '.google.bigtable.admin.v2.Snapshot'
    ) as gax.protobuf.Type;
    const snapshotTableMetadata = protoFilesRoot.lookup(
      '.google.bigtable.admin.v2.SnapshotTableMetadata'
    ) as gax.protobuf.Type;
    const createBackupResponse = protoFilesRoot.lookup(
      '.google.bigtable.admin.v2.Backup'
    ) as gax.protobuf.Type;
    const createBackupMetadata = protoFilesRoot.lookup(
      '.google.bigtable.admin.v2.CreateBackupMetadata'
    ) as gax.protobuf.Type;
    const restoreTableResponse = protoFilesRoot.lookup(
      '.google.bigtable.admin.v2.Table'
    ) as gax.protobuf.Type;
    const restoreTableMetadata = protoFilesRoot.lookup(
      '.google.bigtable.admin.v2.RestoreTableMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createTableFromSnapshot: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createTableFromSnapshotResponse.decode.bind(
          createTableFromSnapshotResponse
        ),
        createTableFromSnapshotMetadata.decode.bind(
          createTableFromSnapshotMetadata
        )
      ),
      snapshotTable: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        snapshotTableResponse.decode.bind(snapshotTableResponse),
        snapshotTableMetadata.decode.bind(snapshotTableMetadata)
      ),
      createBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupResponse.decode.bind(createBackupResponse),
        createBackupMetadata.decode.bind(createBackupMetadata)
      ),
      restoreTable: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restoreTableResponse.decode.bind(restoreTableResponse),
        restoreTableMetadata.decode.bind(restoreTableMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.bigtable.admin.v2.BigtableTableAdmin',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.bigtableTableAdminStub) {
      return this.bigtableTableAdminStub;
    }

    // Put together the "service stub" for
    // google.bigtable.admin.v2.BigtableTableAdmin.
    this.bigtableTableAdminStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.bigtable.admin.v2.BigtableTableAdmin'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.bigtable.admin.v2.BigtableTableAdmin,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const bigtableTableAdminStubMethods = [
      'createTable',
      'createTableFromSnapshot',
      'listTables',
      'getTable',
      'deleteTable',
      'modifyColumnFamilies',
      'dropRowRange',
      'generateConsistencyToken',
      'checkConsistency',
      'snapshotTable',
      'getSnapshot',
      'listSnapshots',
      'deleteSnapshot',
      'createBackup',
      'getBackup',
      'updateBackup',
      'deleteBackup',
      'listBackups',
      'restoreTable',
      'getIamPolicy',
      'setIamPolicy',
      'testIamPermissions',
    ];
    for (const methodName of bigtableTableAdminStubMethods) {
      const callPromise = this.bigtableTableAdminStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        this.descriptors.page[methodName] ||
          this.descriptors.stream[methodName] ||
          this.descriptors.longrunning[methodName]
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.bigtableTableAdminStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'bigtableadmin.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'bigtableadmin.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/bigtable.admin',
      'https://www.googleapis.com/auth/bigtable.admin.table',
      'https://www.googleapis.com/auth/cloud-bigtable.admin',
      'https://www.googleapis.com/auth/cloud-bigtable.admin.table',
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createTable(
    request: protos.google.bigtable.admin.v2.ICreateTableRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.ICreateTableRequest | undefined,
      {} | undefined
    ]
  >;
  createTable(
    request: protos.google.bigtable.admin.v2.ICreateTableRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.ICreateTableRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTable(
    request: protos.google.bigtable.admin.v2.ICreateTableRequest,
    callback: Callback<
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.ICreateTableRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a new table in the specified instance.
   * The table can be created with a full set of initial column families,
   * specified in the request.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The unique name of the instance in which to create the table.
   *   Values are of the form `projects/{project}/instances/{instance}`.
   * @param {string} request.tableId
   *   Required. The name by which the new table should be referred to within the
   *   parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
   *   Maximum 50 characters.
   * @param {google.bigtable.admin.v2.Table} request.table
   *   Required. The Table to create.
   * @param {number[]} request.initialSplits
   *   The optional list of row keys that will be used to initially split the
   *   table into several tablets (tablets are similar to HBase regions).
   *   Given two split keys, `s1` and `s2`, three tablets will be created,
   *   spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
   *
   *   Example:
   *
   *   * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
   *                  `"other", "zz"]`
   *   * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
   *   * Key assignment:
   *       - Tablet 1 `[, apple)                => {"a"}.`
   *       - Tablet 2 `[apple, customer_1)      => {"apple", "custom"}.`
   *       - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.`
   *       - Tablet 4 `[customer_2, other)      => {"customer_2"}.`
   *       - Tablet 5 `[other, )                => {"other", "zz"}.`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Table]{@link google.bigtable.admin.v2.Table}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createTable(
    request: protos.google.bigtable.admin.v2.ICreateTableRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.bigtable.admin.v2.ITable,
          | protos.google.bigtable.admin.v2.ICreateTableRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.ICreateTableRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.ICreateTableRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createTable(request, options, callback);
  }
  getTable(
    request: protos.google.bigtable.admin.v2.IGetTableRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.IGetTableRequest | undefined,
      {} | undefined
    ]
  >;
  getTable(
    request: protos.google.bigtable.admin.v2.IGetTableRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.IGetTableRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTable(
    request: protos.google.bigtable.admin.v2.IGetTableRequest,
    callback: Callback<
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.IGetTableRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets metadata information about the specified table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the requested table.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/tables/{table}`.
   * @param {google.bigtable.admin.v2.Table.View} request.view
   *   The view to be applied to the returned table's fields.
   *   Defaults to `SCHEMA_VIEW` if unspecified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Table]{@link google.bigtable.admin.v2.Table}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getTable(
    request: protos.google.bigtable.admin.v2.IGetTableRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.bigtable.admin.v2.ITable,
          protos.google.bigtable.admin.v2.IGetTableRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.IGetTableRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.IGetTableRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getTable(request, options, callback);
  }
  deleteTable(
    request: protos.google.bigtable.admin.v2.IDeleteTableRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteTableRequest | undefined,
      {} | undefined
    ]
  >;
  deleteTable(
    request: protos.google.bigtable.admin.v2.IDeleteTableRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteTableRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTable(
    request: protos.google.bigtable.admin.v2.IDeleteTableRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteTableRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Permanently deletes a specified table and all of its data.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the table to be deleted.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/tables/{table}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteTable(
    request: protos.google.bigtable.admin.v2.IDeleteTableRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.bigtable.admin.v2.IDeleteTableRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteTableRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteTableRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteTable(request, options, callback);
  }
  modifyColumnFamilies(
    request: protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest | undefined,
      {} | undefined
    ]
  >;
  modifyColumnFamilies(
    request: protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.bigtable.admin.v2.ITable,
      | protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  modifyColumnFamilies(
    request: protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest,
    callback: Callback<
      protos.google.bigtable.admin.v2.ITable,
      | protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Performs a series of column family modifications on the specified table.
   * Either all or none of the modifications will occur before this method
   * returns, but data requests received prior to that point may see a table
   * where only some modifications have taken effect.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the table whose families should be modified.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/tables/{table}`.
   * @param {number[]} request.modifications
   *   Required. Modifications to be atomically applied to the specified table's
   *   families. Entries are applied in order, meaning that earlier modifications
   *   can be masked by later ones (in the case of repeated updates to the same
   *   family, for example).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Table]{@link google.bigtable.admin.v2.Table}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  modifyColumnFamilies(
    request: protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.bigtable.admin.v2.ITable,
          | protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.bigtable.admin.v2.ITable,
      | protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ITable,
      protos.google.bigtable.admin.v2.IModifyColumnFamiliesRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.modifyColumnFamilies(request, options, callback);
  }
  dropRowRange(
    request: protos.google.bigtable.admin.v2.IDropRowRangeRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDropRowRangeRequest | undefined,
      {} | undefined
    ]
  >;
  dropRowRange(
    request: protos.google.bigtable.admin.v2.IDropRowRangeRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDropRowRangeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  dropRowRange(
    request: protos.google.bigtable.admin.v2.IDropRowRangeRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDropRowRangeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Permanently drop/delete a row range from a specified table. The request can
   * specify whether to delete all rows in a table, or only those that match a
   * particular prefix.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the table on which to drop a range of rows.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/tables/{table}`.
   * @param {Buffer} request.rowKeyPrefix
   *   Delete all rows that start with this row key prefix. Prefix cannot be
   *   zero length.
   * @param {boolean} request.deleteAllDataFromTable
   *   Delete all rows in the table. Setting this to false is a no-op.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  dropRowRange(
    request: protos.google.bigtable.admin.v2.IDropRowRangeRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.bigtable.admin.v2.IDropRowRangeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDropRowRangeRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDropRowRangeRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.dropRowRange(request, options, callback);
  }
  generateConsistencyToken(
    request: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse,
      (
        | protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  generateConsistencyToken(
    request: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse,
      | protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateConsistencyToken(
    request: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest,
    callback: Callback<
      protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse,
      | protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Generates a consistency token for a Table, which can be used in
   * CheckConsistency to check whether mutations to the table that finished
   * before this call started have been replicated. The tokens will be available
   * for 90 days.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the Table for which to create a consistency
   *   token. Values are of the form
   *   `projects/{project}/instances/{instance}/tables/{table}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GenerateConsistencyTokenResponse]{@link google.bigtable.admin.v2.GenerateConsistencyTokenResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  generateConsistencyToken(
    request: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse,
          | protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse,
      | protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse,
      (
        | protos.google.bigtable.admin.v2.IGenerateConsistencyTokenRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.generateConsistencyToken(
      request,
      options,
      callback
    );
  }
  checkConsistency(
    request: protos.google.bigtable.admin.v2.ICheckConsistencyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ICheckConsistencyResponse,
      protos.google.bigtable.admin.v2.ICheckConsistencyRequest | undefined,
      {} | undefined
    ]
  >;
  checkConsistency(
    request: protos.google.bigtable.admin.v2.ICheckConsistencyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.bigtable.admin.v2.ICheckConsistencyResponse,
      | protos.google.bigtable.admin.v2.ICheckConsistencyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  checkConsistency(
    request: protos.google.bigtable.admin.v2.ICheckConsistencyRequest,
    callback: Callback<
      protos.google.bigtable.admin.v2.ICheckConsistencyResponse,
      | protos.google.bigtable.admin.v2.ICheckConsistencyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Checks replication consistency based on a consistency token, that is, if
   * replication has caught up based on the conditions specified in the token
   * and the check request.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the Table for which to check replication
   *   consistency. Values are of the form
   *   `projects/{project}/instances/{instance}/tables/{table}`.
   * @param {string} request.consistencyToken
   *   Required. The token created using GenerateConsistencyToken for the Table.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CheckConsistencyResponse]{@link google.bigtable.admin.v2.CheckConsistencyResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  checkConsistency(
    request: protos.google.bigtable.admin.v2.ICheckConsistencyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.bigtable.admin.v2.ICheckConsistencyResponse,
          | protos.google.bigtable.admin.v2.ICheckConsistencyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.bigtable.admin.v2.ICheckConsistencyResponse,
      | protos.google.bigtable.admin.v2.ICheckConsistencyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ICheckConsistencyResponse,
      protos.google.bigtable.admin.v2.ICheckConsistencyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.checkConsistency(request, options, callback);
  }
  getSnapshot(
    request: protos.google.bigtable.admin.v2.IGetSnapshotRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ISnapshot,
      protos.google.bigtable.admin.v2.IGetSnapshotRequest | undefined,
      {} | undefined
    ]
  >;
  getSnapshot(
    request: protos.google.bigtable.admin.v2.IGetSnapshotRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.bigtable.admin.v2.ISnapshot,
      protos.google.bigtable.admin.v2.IGetSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSnapshot(
    request: protos.google.bigtable.admin.v2.IGetSnapshotRequest,
    callback: Callback<
      protos.google.bigtable.admin.v2.ISnapshot,
      protos.google.bigtable.admin.v2.IGetSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets metadata information about the specified snapshot.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the requested snapshot.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Snapshot]{@link google.bigtable.admin.v2.Snapshot}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getSnapshot(
    request: protos.google.bigtable.admin.v2.IGetSnapshotRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.bigtable.admin.v2.ISnapshot,
          | protos.google.bigtable.admin.v2.IGetSnapshotRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.bigtable.admin.v2.ISnapshot,
      protos.google.bigtable.admin.v2.IGetSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ISnapshot,
      protos.google.bigtable.admin.v2.IGetSnapshotRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getSnapshot(request, options, callback);
  }
  deleteSnapshot(
    request: protos.google.bigtable.admin.v2.IDeleteSnapshotRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteSnapshotRequest | undefined,
      {} | undefined
    ]
  >;
  deleteSnapshot(
    request: protos.google.bigtable.admin.v2.IDeleteSnapshotRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSnapshot(
    request: protos.google.bigtable.admin.v2.IDeleteSnapshotRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Permanently deletes the specified snapshot.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the snapshot to be deleted.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteSnapshot(
    request: protos.google.bigtable.admin.v2.IDeleteSnapshotRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.bigtable.admin.v2.IDeleteSnapshotRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteSnapshotRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteSnapshot(request, options, callback);
  }
  getBackup(
    request: protos.google.bigtable.admin.v2.IGetBackupRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IGetBackupRequest | undefined,
      {} | undefined
    ]
  >;
  getBackup(
    request: protos.google.bigtable.admin.v2.IGetBackupRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request: protos.google.bigtable.admin.v2.IGetBackupRequest,
    callback: Callback<
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets metadata on a pending or completed Cloud Bigtable Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the backup.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Backup]{@link google.bigtable.admin.v2.Backup}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getBackup(
    request: protos.google.bigtable.admin.v2.IGetBackupRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.bigtable.admin.v2.IBackup,
          protos.google.bigtable.admin.v2.IGetBackupRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IGetBackupRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getBackup(request, options, callback);
  }
  updateBackup(
    request: protos.google.bigtable.admin.v2.IUpdateBackupRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IUpdateBackupRequest | undefined,
      {} | undefined
    ]
  >;
  updateBackup(
    request: protos.google.bigtable.admin.v2.IUpdateBackupRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IUpdateBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackup(
    request: protos.google.bigtable.admin.v2.IUpdateBackupRequest,
    callback: Callback<
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IUpdateBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates a pending or completed Cloud Bigtable Backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.bigtable.admin.v2.Backup} request.backup
   *   Required. The backup to update. `backup.name`, and the fields to be updated
   *   as specified by `update_mask` are required. Other fields are ignored.
   *   Update is only supported for the following fields:
   *    * `backup.expire_time`.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A mask specifying which fields (e.g. `expire_time`) in the
   *   Backup resource should be updated. This mask is relative to the Backup
   *   resource, not to the request message. The field mask must always be
   *   specified; this prevents any future fields from being erased accidentally
   *   by clients that do not know about them.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Backup]{@link google.bigtable.admin.v2.Backup}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateBackup(
    request: protos.google.bigtable.admin.v2.IUpdateBackupRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.bigtable.admin.v2.IBackup,
          | protos.google.bigtable.admin.v2.IUpdateBackupRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IUpdateBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.IBackup,
      protos.google.bigtable.admin.v2.IUpdateBackupRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'backup.name': request.backup!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateBackup(request, options, callback);
  }
  deleteBackup(
    request: protos.google.bigtable.admin.v2.IDeleteBackupRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteBackupRequest | undefined,
      {} | undefined
    ]
  >;
  deleteBackup(
    request: protos.google.bigtable.admin.v2.IDeleteBackupRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request: protos.google.bigtable.admin.v2.IDeleteBackupRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes a pending or completed Cloud Bigtable backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the backup to delete.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteBackup(
    request: protos.google.bigtable.admin.v2.IDeleteBackupRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.bigtable.admin.v2.IDeleteBackupRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.bigtable.admin.v2.IDeleteBackupRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteBackup(request, options, callback);
  }
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets the access control policy for a resource.
   * Returns an empty policy if the resource exists but does not have a policy
   * set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Sets the access control policy on a Table or Backup resource.
   * Replaces any existing policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns permissions that the caller has on the specified table resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }

  createTableFromSnapshot(
    request: protos.google.bigtable.admin.v2.ICreateTableFromSnapshotRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createTableFromSnapshot(
    request: protos.google.bigtable.admin.v2.ICreateTableFromSnapshotRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTableFromSnapshot(
    request: protos.google.bigtable.admin.v2.ICreateTableFromSnapshotRequest,
    callback: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a new table from the specified snapshot. The target table must
   * not exist. The snapshot and the table must be in the same instance.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The unique name of the instance in which to create the table.
   *   Values are of the form `projects/{project}/instances/{instance}`.
   * @param {string} request.tableId
   *   Required. The name by which the new table should be referred to within the
   *   parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
   * @param {string} request.sourceSnapshot
   *   Required. The unique name of the snapshot from which to restore the table.
   *   The snapshot and the table must be in the same instance. Values are of the
   *   form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createTableFromSnapshot(
    request: protos.google.bigtable.admin.v2.ICreateTableFromSnapshotRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.bigtable.admin.v2.ITable,
            protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createTableFromSnapshot(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the createTableFromSnapshot() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkCreateTableFromSnapshotProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkCreateTableFromSnapshotProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.bigtable.admin.v2.Table,
      protos.google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createTableFromSnapshot,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.bigtable.admin.v2.Table,
      protos.google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
    >;
  }
  snapshotTable(
    request: protos.google.bigtable.admin.v2.ISnapshotTableRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.bigtable.admin.v2.ISnapshot,
        protos.google.bigtable.admin.v2.ISnapshotTableMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  snapshotTable(
    request: protos.google.bigtable.admin.v2.ISnapshotTableRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ISnapshot,
        protos.google.bigtable.admin.v2.ISnapshotTableMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  snapshotTable(
    request: protos.google.bigtable.admin.v2.ISnapshotTableRequest,
    callback: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ISnapshot,
        protos.google.bigtable.admin.v2.ISnapshotTableMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a new snapshot in the specified cluster from the specified
   * source table. The cluster and the table must be in the same instance.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique name of the table to have the snapshot taken.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/tables/{table}`.
   * @param {string} request.cluster
   *   Required. The name of the cluster where the snapshot will be created in.
   *   Values are of the form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
   * @param {string} request.snapshotId
   *   Required. The ID by which the new snapshot should be referred to within the
   *   parent cluster, e.g., `mysnapshot` of the form:
   *   `{@link -_.a-zA-Z0-9|_a-zA-Z0-9}*` rather than
   *   `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/mysnapshot`.
   * @param {google.protobuf.Duration} request.ttl
   *   The amount of time that the new snapshot can stay active after it is
   *   created. Once 'ttl' expires, the snapshot will get deleted. The maximum
   *   amount of time a snapshot can stay active is 7 days. If 'ttl' is not
   *   specified, the default value of 24 hours will be used.
   * @param {string} request.description
   *   Description of the snapshot.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  snapshotTable(
    request: protos.google.bigtable.admin.v2.ISnapshotTableRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.bigtable.admin.v2.ISnapshot,
            protos.google.bigtable.admin.v2.ISnapshotTableMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ISnapshot,
        protos.google.bigtable.admin.v2.ISnapshotTableMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.bigtable.admin.v2.ISnapshot,
        protos.google.bigtable.admin.v2.ISnapshotTableMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.snapshotTable(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the snapshotTable() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkSnapshotTableProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkSnapshotTableProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.bigtable.admin.v2.Snapshot,
      protos.google.bigtable.admin.v2.SnapshotTableMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.snapshotTable,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.bigtable.admin.v2.Snapshot,
      protos.google.bigtable.admin.v2.SnapshotTableMetadata
    >;
  }
  createBackup(
    request: protos.google.bigtable.admin.v2.ICreateBackupRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.bigtable.admin.v2.IBackup,
        protos.google.bigtable.admin.v2.ICreateBackupMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createBackup(
    request: protos.google.bigtable.admin.v2.ICreateBackupRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.IBackup,
        protos.google.bigtable.admin.v2.ICreateBackupMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request: protos.google.bigtable.admin.v2.ICreateBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.IBackup,
        protos.google.bigtable.admin.v2.ICreateBackupMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Starts creating a new Cloud Bigtable Backup. The returned backup
   * {@link google.longrunning.Operation|long-running operation} can be used to
   * track creation of the backup. The
   * {@link google.longrunning.Operation.metadata|metadata} field type is
   * {@link google.bigtable.admin.v2.CreateBackupMetadata|CreateBackupMetadata}. The
   * {@link google.longrunning.Operation.response|response} field type is
   * {@link google.bigtable.admin.v2.Backup|Backup}, if successful. Cancelling the
   * returned operation will stop the creation and delete the backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. This must be one of the clusters in the instance in which this
   *   table is located. The backup will be stored in this cluster. Values are
   *   of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
   * @param {string} request.backupId
   *   Required. The id of the backup to be created. The `backup_id` along with
   *   the parent `parent` are combined as {parent}/backups/{backup_id} to create
   *   the full backup name, of the form:
   *   `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup_id}`.
   *   This string must be between 1 and 50 characters in length and match the
   *   regex {@link -_.a-zA-Z0-9|_a-zA-Z0-9}*.
   * @param {google.bigtable.admin.v2.Backup} request.backup
   *   Required. The backup to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createBackup(
    request: protos.google.bigtable.admin.v2.ICreateBackupRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.bigtable.admin.v2.IBackup,
            protos.google.bigtable.admin.v2.ICreateBackupMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.IBackup,
        protos.google.bigtable.admin.v2.ICreateBackupMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.bigtable.admin.v2.IBackup,
        protos.google.bigtable.admin.v2.ICreateBackupMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the createBackup() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkCreateBackupProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkCreateBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.bigtable.admin.v2.Backup,
      protos.google.bigtable.admin.v2.CreateBackupMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createBackup,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.bigtable.admin.v2.Backup,
      protos.google.bigtable.admin.v2.CreateBackupMetadata
    >;
  }
  restoreTable(
    request: protos.google.bigtable.admin.v2.IRestoreTableRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.IRestoreTableMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  restoreTable(
    request: protos.google.bigtable.admin.v2.IRestoreTableRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.IRestoreTableMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreTable(
    request: protos.google.bigtable.admin.v2.IRestoreTableRequest,
    callback: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.IRestoreTableMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Create a new table by restoring from a completed backup. The new table
   * must be in the same instance as the instance containing the backup. The
   * returned table {@link google.longrunning.Operation|long-running operation} can
   * be used to track the progress of the operation, and to cancel it. The
   * {@link google.longrunning.Operation.metadata|metadata} field type is
   * {@link google.bigtable.admin.RestoreTableMetadata|RestoreTableMetadata}. The
   * {@link google.longrunning.Operation.response|response} type is
   * {@link google.bigtable.admin.v2.Table|Table}, if successful.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the instance in which to create the restored
   *   table. This instance must be the parent of the source backup. Values are
   *   of the form `projects/<project>/instances/<instance>`.
   * @param {string} request.tableId
   *   Required. The id of the table to create and restore to. This
   *   table must not already exist. The `table_id` appended to
   *   `parent` forms the full table name of the form
   *   `projects/<project>/instances/<instance>/tables/<table_id>`.
   * @param {string} request.backup
   *   Name of the backup from which to restore. Values are of the form
   *   `projects/<project>/instances/<instance>/clusters/<cluster>/backups/<backup>`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  restoreTable(
    request: protos.google.bigtable.admin.v2.IRestoreTableRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.bigtable.admin.v2.ITable,
            protos.google.bigtable.admin.v2.IRestoreTableMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.IRestoreTableMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.bigtable.admin.v2.ITable,
        protos.google.bigtable.admin.v2.IRestoreTableMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.restoreTable(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the restoreTable() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkRestoreTableProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkRestoreTableProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.bigtable.admin.v2.Table,
      protos.google.bigtable.admin.v2.RestoreTableMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.restoreTable,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.bigtable.admin.v2.Table,
      protos.google.bigtable.admin.v2.RestoreTableMetadata
    >;
  }
  listTables(
    request: protos.google.bigtable.admin.v2.IListTablesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ITable[],
      protos.google.bigtable.admin.v2.IListTablesRequest | null,
      protos.google.bigtable.admin.v2.IListTablesResponse
    ]
  >;
  listTables(
    request: protos.google.bigtable.admin.v2.IListTablesRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.bigtable.admin.v2.IListTablesRequest,
      protos.google.bigtable.admin.v2.IListTablesResponse | null | undefined,
      protos.google.bigtable.admin.v2.ITable
    >
  ): void;
  listTables(
    request: protos.google.bigtable.admin.v2.IListTablesRequest,
    callback: PaginationCallback<
      protos.google.bigtable.admin.v2.IListTablesRequest,
      protos.google.bigtable.admin.v2.IListTablesResponse | null | undefined,
      protos.google.bigtable.admin.v2.ITable
    >
  ): void;
  /**
   * Lists all tables served from a specified instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The unique name of the instance for which tables should be
   *   listed. Values are of the form `projects/{project}/instances/{instance}`.
   * @param {google.bigtable.admin.v2.Table.View} request.view
   *   The view to be applied to the returned tables' fields.
   *   Only NAME_ONLY view (default) and REPLICATION_VIEW are supported.
   * @param {number} request.pageSize
   *   Maximum number of results per page.
   *
   *   A page_size of zero lets the server choose the number of items to return.
   *   A page_size which is strictly positive will return at most that many items.
   *   A negative page_size will cause an error.
   *
   *   Following the first request, subsequent paginated calls are not required
   *   to pass a page_size. If a page_size is set in subsequent calls, it must
   *   match the page_size given in the first request.
   * @param {string} request.pageToken
   *   The value of `next_page_token` returned by a previous call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Table]{@link google.bigtable.admin.v2.Table}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Table]{@link google.bigtable.admin.v2.Table} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTablesRequest]{@link google.bigtable.admin.v2.ListTablesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTablesResponse]{@link google.bigtable.admin.v2.ListTablesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTables(
    request: protos.google.bigtable.admin.v2.IListTablesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.bigtable.admin.v2.IListTablesRequest,
          | protos.google.bigtable.admin.v2.IListTablesResponse
          | null
          | undefined,
          protos.google.bigtable.admin.v2.ITable
        >,
    callback?: PaginationCallback<
      protos.google.bigtable.admin.v2.IListTablesRequest,
      protos.google.bigtable.admin.v2.IListTablesResponse | null | undefined,
      protos.google.bigtable.admin.v2.ITable
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ITable[],
      protos.google.bigtable.admin.v2.IListTablesRequest | null,
      protos.google.bigtable.admin.v2.IListTablesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listTables(request, options, callback);
  }

  /**
   * Equivalent to {@link listTables}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTables} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The unique name of the instance for which tables should be
   *   listed. Values are of the form `projects/{project}/instances/{instance}`.
   * @param {google.bigtable.admin.v2.Table.View} request.view
   *   The view to be applied to the returned tables' fields.
   *   Only NAME_ONLY view (default) and REPLICATION_VIEW are supported.
   * @param {number} request.pageSize
   *   Maximum number of results per page.
   *
   *   A page_size of zero lets the server choose the number of items to return.
   *   A page_size which is strictly positive will return at most that many items.
   *   A negative page_size will cause an error.
   *
   *   Following the first request, subsequent paginated calls are not required
   *   to pass a page_size. If a page_size is set in subsequent calls, it must
   *   match the page_size given in the first request.
   * @param {string} request.pageToken
   *   The value of `next_page_token` returned by a previous call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Table]{@link google.bigtable.admin.v2.Table} on 'data' event.
   */
  listTablesStream(
    request?: protos.google.bigtable.admin.v2.IListTablesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTables.createStream(
      this.innerApiCalls.listTables as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listTables}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The unique name of the instance for which tables should be
   *   listed. Values are of the form `projects/{project}/instances/{instance}`.
   * @param {google.bigtable.admin.v2.Table.View} request.view
   *   The view to be applied to the returned tables' fields.
   *   Only NAME_ONLY view (default) and REPLICATION_VIEW are supported.
   * @param {number} request.pageSize
   *   Maximum number of results per page.
   *
   *   A page_size of zero lets the server choose the number of items to return.
   *   A page_size which is strictly positive will return at most that many items.
   *   A negative page_size will cause an error.
   *
   *   Following the first request, subsequent paginated calls are not required
   *   to pass a page_size. If a page_size is set in subsequent calls, it must
   *   match the page_size given in the first request.
   * @param {string} request.pageToken
   *   The value of `next_page_token` returned by a previous call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listTablesAsync(
    request?: protos.google.bigtable.admin.v2.IListTablesRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.bigtable.admin.v2.ITable> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTables.asyncIterate(
      this.innerApiCalls['listTables'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.bigtable.admin.v2.ITable>;
  }
  listSnapshots(
    request: protos.google.bigtable.admin.v2.IListSnapshotsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ISnapshot[],
      protos.google.bigtable.admin.v2.IListSnapshotsRequest | null,
      protos.google.bigtable.admin.v2.IListSnapshotsResponse
    ]
  >;
  listSnapshots(
    request: protos.google.bigtable.admin.v2.IListSnapshotsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.bigtable.admin.v2.IListSnapshotsRequest,
      protos.google.bigtable.admin.v2.IListSnapshotsResponse | null | undefined,
      protos.google.bigtable.admin.v2.ISnapshot
    >
  ): void;
  listSnapshots(
    request: protos.google.bigtable.admin.v2.IListSnapshotsRequest,
    callback: PaginationCallback<
      protos.google.bigtable.admin.v2.IListSnapshotsRequest,
      protos.google.bigtable.admin.v2.IListSnapshotsResponse | null | undefined,
      protos.google.bigtable.admin.v2.ISnapshot
    >
  ): void;
  /**
   * Lists all snapshots associated with the specified cluster.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The unique name of the cluster for which snapshots should be
   *   listed. Values are of the form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *   Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
   *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
   * @param {number} request.pageSize
   *   The maximum number of snapshots to return per page.
   *   CURRENTLY UNIMPLEMENTED AND IGNORED.
   * @param {string} request.pageToken
   *   The value of `next_page_token` returned by a previous call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Snapshot]{@link google.bigtable.admin.v2.Snapshot}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Snapshot]{@link google.bigtable.admin.v2.Snapshot} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListSnapshotsRequest]{@link google.bigtable.admin.v2.ListSnapshotsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListSnapshotsResponse]{@link google.bigtable.admin.v2.ListSnapshotsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listSnapshots(
    request: protos.google.bigtable.admin.v2.IListSnapshotsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.bigtable.admin.v2.IListSnapshotsRequest,
          | protos.google.bigtable.admin.v2.IListSnapshotsResponse
          | null
          | undefined,
          protos.google.bigtable.admin.v2.ISnapshot
        >,
    callback?: PaginationCallback<
      protos.google.bigtable.admin.v2.IListSnapshotsRequest,
      protos.google.bigtable.admin.v2.IListSnapshotsResponse | null | undefined,
      protos.google.bigtable.admin.v2.ISnapshot
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.ISnapshot[],
      protos.google.bigtable.admin.v2.IListSnapshotsRequest | null,
      protos.google.bigtable.admin.v2.IListSnapshotsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listSnapshots(request, options, callback);
  }

  /**
   * Equivalent to {@link listSnapshots}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listSnapshots} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The unique name of the cluster for which snapshots should be
   *   listed. Values are of the form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *   Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
   *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
   * @param {number} request.pageSize
   *   The maximum number of snapshots to return per page.
   *   CURRENTLY UNIMPLEMENTED AND IGNORED.
   * @param {string} request.pageToken
   *   The value of `next_page_token` returned by a previous call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Snapshot]{@link google.bigtable.admin.v2.Snapshot} on 'data' event.
   */
  listSnapshotsStream(
    request?: protos.google.bigtable.admin.v2.IListSnapshotsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listSnapshots.createStream(
      this.innerApiCalls.listSnapshots as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listSnapshots}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The unique name of the cluster for which snapshots should be
   *   listed. Values are of the form
   *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *   Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
   *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
   * @param {number} request.pageSize
   *   The maximum number of snapshots to return per page.
   *   CURRENTLY UNIMPLEMENTED AND IGNORED.
   * @param {string} request.pageToken
   *   The value of `next_page_token` returned by a previous call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listSnapshotsAsync(
    request?: protos.google.bigtable.admin.v2.IListSnapshotsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.bigtable.admin.v2.ISnapshot> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listSnapshots.asyncIterate(
      this.innerApiCalls['listSnapshots'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.bigtable.admin.v2.ISnapshot>;
  }
  listBackups(
    request: protos.google.bigtable.admin.v2.IListBackupsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.bigtable.admin.v2.IBackup[],
      protos.google.bigtable.admin.v2.IListBackupsRequest | null,
      protos.google.bigtable.admin.v2.IListBackupsResponse
    ]
  >;
  listBackups(
    request: protos.google.bigtable.admin.v2.IListBackupsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.bigtable.admin.v2.IListBackupsRequest,
      protos.google.bigtable.admin.v2.IListBackupsResponse | null | undefined,
      protos.google.bigtable.admin.v2.IBackup
    >
  ): void;
  listBackups(
    request: protos.google.bigtable.admin.v2.IListBackupsRequest,
    callback: PaginationCallback<
      protos.google.bigtable.admin.v2.IListBackupsRequest,
      protos.google.bigtable.admin.v2.IListBackupsResponse | null | undefined,
      protos.google.bigtable.admin.v2.IBackup
    >
  ): void;
  /**
   * Lists Cloud Bigtable backups. Returns both completed and pending
   * backups.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The cluster to list backups from. Values are of the
   *   form `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *   Use `{cluster} = '-'` to list backups for all clusters in an instance,
   *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
   * @param {string} request.filter
   *   A filter expression that filters backups listed in the response.
   *   The expression must specify the field name, a comparison operator,
   *   and the value that you want to use for filtering. The value must be a
   *   string, a number, or a boolean. The comparison operator must be
   *   <, >, <=, >=, !=, =, or :. Colon ‘:’ represents a HAS operator which is
   *   roughly synonymous with equality. Filter rules are case insensitive.
   *
   *   The fields eligible for filtering are:
   *     * `name`
   *     * `source_table`
   *     * `state`
   *     * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `size_bytes`
   *
   *   To filter on multiple expressions, provide each separate expression within
   *   parentheses. By default, each expression is an AND expression. However,
   *   you can include AND, OR, and NOT expressions explicitly.
   *
   *   Some examples of using filters are:
   *
   *     * `name:"exact"` --> The backup's name is the string "exact".
   *     * `name:howl` --> The backup's name contains the string "howl".
   *     * `source_table:prod`
   *            --> The source_table's name contains the string "prod".
   *     * `state:CREATING` --> The backup is pending creation.
   *     * `state:READY` --> The backup is fully created and ready for use.
   *     * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
   *            --> The backup name contains the string "howl" and start_time
   *                of the backup is before 2018-03-28T14:50:00Z.
   *     * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
   * @param {string} request.orderBy
   *   An expression for specifying the sort order of the results of the request.
   *   The string value should specify one or more fields in
   *   {@link google.bigtable.admin.v2.Backup|Backup}. The full syntax is described at
   *   https://aip.dev/132#ordering.
   *
   *   Fields supported are:
   *      * name
   *      * source_table
   *      * expire_time
   *      * start_time
   *      * end_time
   *      * size_bytes
   *      * state
   *
   *   For example, "start_time". The default sorting order is ascending.
   *   To specify descending order for the field, a suffix " desc" should
   *   be appended to the field name. For example, "start_time desc".
   *   Redundant space characters in the syntax are insigificant.
   *
   *   If order_by is empty, results will be sorted by `start_time` in descending
   *   order starting from the most recently created backup.
   * @param {number} request.pageSize
   *   Number of backups to be returned in the response. If 0 or
   *   less, defaults to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.bigtable.admin.v2.ListBackupsResponse.next_page_token|next_page_token}
   *   from a previous
   *   {@link google.bigtable.admin.v2.ListBackupsResponse|ListBackupsResponse} to the
   *   same `parent` and with the same `filter`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Backup]{@link google.bigtable.admin.v2.Backup}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Backup]{@link google.bigtable.admin.v2.Backup} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListBackupsRequest]{@link google.bigtable.admin.v2.ListBackupsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListBackupsResponse]{@link google.bigtable.admin.v2.ListBackupsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listBackups(
    request: protos.google.bigtable.admin.v2.IListBackupsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.bigtable.admin.v2.IListBackupsRequest,
          | protos.google.bigtable.admin.v2.IListBackupsResponse
          | null
          | undefined,
          protos.google.bigtable.admin.v2.IBackup
        >,
    callback?: PaginationCallback<
      protos.google.bigtable.admin.v2.IListBackupsRequest,
      protos.google.bigtable.admin.v2.IListBackupsResponse | null | undefined,
      protos.google.bigtable.admin.v2.IBackup
    >
  ): Promise<
    [
      protos.google.bigtable.admin.v2.IBackup[],
      protos.google.bigtable.admin.v2.IListBackupsRequest | null,
      protos.google.bigtable.admin.v2.IListBackupsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listBackups(request, options, callback);
  }

  /**
   * Equivalent to {@link listBackups}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listBackups} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The cluster to list backups from. Values are of the
   *   form `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *   Use `{cluster} = '-'` to list backups for all clusters in an instance,
   *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
   * @param {string} request.filter
   *   A filter expression that filters backups listed in the response.
   *   The expression must specify the field name, a comparison operator,
   *   and the value that you want to use for filtering. The value must be a
   *   string, a number, or a boolean. The comparison operator must be
   *   <, >, <=, >=, !=, =, or :. Colon ‘:’ represents a HAS operator which is
   *   roughly synonymous with equality. Filter rules are case insensitive.
   *
   *   The fields eligible for filtering are:
   *     * `name`
   *     * `source_table`
   *     * `state`
   *     * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `size_bytes`
   *
   *   To filter on multiple expressions, provide each separate expression within
   *   parentheses. By default, each expression is an AND expression. However,
   *   you can include AND, OR, and NOT expressions explicitly.
   *
   *   Some examples of using filters are:
   *
   *     * `name:"exact"` --> The backup's name is the string "exact".
   *     * `name:howl` --> The backup's name contains the string "howl".
   *     * `source_table:prod`
   *            --> The source_table's name contains the string "prod".
   *     * `state:CREATING` --> The backup is pending creation.
   *     * `state:READY` --> The backup is fully created and ready for use.
   *     * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
   *            --> The backup name contains the string "howl" and start_time
   *                of the backup is before 2018-03-28T14:50:00Z.
   *     * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
   * @param {string} request.orderBy
   *   An expression for specifying the sort order of the results of the request.
   *   The string value should specify one or more fields in
   *   {@link google.bigtable.admin.v2.Backup|Backup}. The full syntax is described at
   *   https://aip.dev/132#ordering.
   *
   *   Fields supported are:
   *      * name
   *      * source_table
   *      * expire_time
   *      * start_time
   *      * end_time
   *      * size_bytes
   *      * state
   *
   *   For example, "start_time". The default sorting order is ascending.
   *   To specify descending order for the field, a suffix " desc" should
   *   be appended to the field name. For example, "start_time desc".
   *   Redundant space characters in the syntax are insigificant.
   *
   *   If order_by is empty, results will be sorted by `start_time` in descending
   *   order starting from the most recently created backup.
   * @param {number} request.pageSize
   *   Number of backups to be returned in the response. If 0 or
   *   less, defaults to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.bigtable.admin.v2.ListBackupsResponse.next_page_token|next_page_token}
   *   from a previous
   *   {@link google.bigtable.admin.v2.ListBackupsResponse|ListBackupsResponse} to the
   *   same `parent` and with the same `filter`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Backup]{@link google.bigtable.admin.v2.Backup} on 'data' event.
   */
  listBackupsStream(
    request?: protos.google.bigtable.admin.v2.IListBackupsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBackups.createStream(
      this.innerApiCalls.listBackups as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listBackups}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The cluster to list backups from. Values are of the
   *   form `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *   Use `{cluster} = '-'` to list backups for all clusters in an instance,
   *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
   * @param {string} request.filter
   *   A filter expression that filters backups listed in the response.
   *   The expression must specify the field name, a comparison operator,
   *   and the value that you want to use for filtering. The value must be a
   *   string, a number, or a boolean. The comparison operator must be
   *   <, >, <=, >=, !=, =, or :. Colon ‘:’ represents a HAS operator which is
   *   roughly synonymous with equality. Filter rules are case insensitive.
   *
   *   The fields eligible for filtering are:
   *     * `name`
   *     * `source_table`
   *     * `state`
   *     * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   *     * `size_bytes`
   *
   *   To filter on multiple expressions, provide each separate expression within
   *   parentheses. By default, each expression is an AND expression. However,
   *   you can include AND, OR, and NOT expressions explicitly.
   *
   *   Some examples of using filters are:
   *
   *     * `name:"exact"` --> The backup's name is the string "exact".
   *     * `name:howl` --> The backup's name contains the string "howl".
   *     * `source_table:prod`
   *            --> The source_table's name contains the string "prod".
   *     * `state:CREATING` --> The backup is pending creation.
   *     * `state:READY` --> The backup is fully created and ready for use.
   *     * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
   *            --> The backup name contains the string "howl" and start_time
   *                of the backup is before 2018-03-28T14:50:00Z.
   *     * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
   * @param {string} request.orderBy
   *   An expression for specifying the sort order of the results of the request.
   *   The string value should specify one or more fields in
   *   {@link google.bigtable.admin.v2.Backup|Backup}. The full syntax is described at
   *   https://aip.dev/132#ordering.
   *
   *   Fields supported are:
   *      * name
   *      * source_table
   *      * expire_time
   *      * start_time
   *      * end_time
   *      * size_bytes
   *      * state
   *
   *   For example, "start_time". The default sorting order is ascending.
   *   To specify descending order for the field, a suffix " desc" should
   *   be appended to the field name. For example, "start_time desc".
   *   Redundant space characters in the syntax are insigificant.
   *
   *   If order_by is empty, results will be sorted by `start_time` in descending
   *   order starting from the most recently created backup.
   * @param {number} request.pageSize
   *   Number of backups to be returned in the response. If 0 or
   *   less, defaults to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.bigtable.admin.v2.ListBackupsResponse.next_page_token|next_page_token}
   *   from a previous
   *   {@link google.bigtable.admin.v2.ListBackupsResponse|ListBackupsResponse} to the
   *   same `parent` and with the same `filter`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listBackupsAsync(
    request?: protos.google.bigtable.admin.v2.IListBackupsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.bigtable.admin.v2.IBackup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBackups.asyncIterate(
      this.innerApiCalls['listBackups'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.bigtable.admin.v2.IBackup>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified appProfile resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @param {string} app_profile
   * @returns {string} Resource name string.
   */
  appProfilePath(project: string, instance: string, appProfile: string) {
    return this.pathTemplates.appProfilePathTemplate.render({
      project: project,
      instance: instance,
      app_profile: appProfile,
    });
  }

  /**
   * Parse the project from AppProfile resource.
   *
   * @param {string} appProfileName
   *   A fully-qualified path representing AppProfile resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAppProfileName(appProfileName: string) {
    return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
      .project;
  }

  /**
   * Parse the instance from AppProfile resource.
   *
   * @param {string} appProfileName
   *   A fully-qualified path representing AppProfile resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromAppProfileName(appProfileName: string) {
    return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
      .instance;
  }

  /**
   * Parse the app_profile from AppProfile resource.
   *
   * @param {string} appProfileName
   *   A fully-qualified path representing AppProfile resource.
   * @returns {string} A string representing the app_profile.
   */
  matchAppProfileFromAppProfileName(appProfileName: string) {
    return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
      .app_profile;
  }

  /**
   * Return a fully-qualified backup resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @param {string} cluster
   * @param {string} backup
   * @returns {string} Resource name string.
   */
  backupPath(
    project: string,
    instance: string,
    cluster: string,
    backup: string
  ) {
    return this.pathTemplates.backupPathTemplate.render({
      project: project,
      instance: instance,
      cluster: cluster,
      backup: backup,
    });
  }

  /**
   * Parse the project from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).project;
  }

  /**
   * Parse the instance from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).instance;
  }

  /**
   * Parse the cluster from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).cluster;
  }

  /**
   * Parse the backup from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backup.
   */
  matchBackupFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backup;
  }

  /**
   * Return a fully-qualified cluster resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @param {string} cluster
   * @returns {string} Resource name string.
   */
  clusterPath(project: string, instance: string, cluster: string) {
    return this.pathTemplates.clusterPathTemplate.render({
      project: project,
      instance: instance,
      cluster: cluster,
    });
  }

  /**
   * Parse the project from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
  }

  /**
   * Parse the instance from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).instance;
  }

  /**
   * Parse the cluster from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project: string, instance: string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified snapshot resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @param {string} cluster
   * @param {string} snapshot
   * @returns {string} Resource name string.
   */
  snapshotPath(
    project: string,
    instance: string,
    cluster: string,
    snapshot: string
  ) {
    return this.pathTemplates.snapshotPathTemplate.render({
      project: project,
      instance: instance,
      cluster: cluster,
      snapshot: snapshot,
    });
  }

  /**
   * Parse the project from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;
  }

  /**
   * Parse the instance from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).instance;
  }

  /**
   * Parse the cluster from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).cluster;
  }

  /**
   * Parse the snapshot from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the snapshot.
   */
  matchSnapshotFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;
  }

  /**
   * Return a fully-qualified table resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @param {string} table
   * @returns {string} Resource name string.
   */
  tablePath(project: string, instance: string, table: string) {
    return this.pathTemplates.tablePathTemplate.render({
      project: project,
      instance: instance,
      table: table,
    });
  }

  /**
   * Parse the project from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).project;
  }

  /**
   * Parse the instance from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).instance;
  }

  /**
   * Parse the table from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the table.
   */
  matchTableFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).table;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.bigtableTableAdminStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
