// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as bigtabletableadminModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2.BigtableTableAdminClient', () => {
    it('has servicePath', () => {
        const servicePath = bigtabletableadminModule.v2.BigtableTableAdminClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = bigtabletableadminModule.v2.BigtableTableAdminClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = bigtabletableadminModule.v2.BigtableTableAdminClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new bigtabletableadminModule.v2.BigtableTableAdminClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.bigtableTableAdminStub, undefined);
        await client.initialize();
        assert(client.bigtableTableAdminStub);
    });

    it('has close method', () => {
        const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createTable', () => {
        it('invokes createTable without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateTableRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Table());
            client.innerApiCalls.createTable = stubSimpleCall(expectedResponse);
            const [response] = await client.createTable(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTable without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateTableRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Table());
            client.innerApiCalls.createTable = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTable(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.ITable|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createTable with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateTableRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createTable = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createTable(request), expectedError);
            assert((client.innerApiCalls.createTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getTable', () => {
        it('invokes getTable without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Table());
            client.innerApiCalls.getTable = stubSimpleCall(expectedResponse);
            const [response] = await client.getTable(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTable without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Table());
            client.innerApiCalls.getTable = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTable(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.ITable|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTable with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTable = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTable(request), expectedError);
            assert((client.innerApiCalls.getTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteTable', () => {
        it('invokes deleteTable without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTable = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteTable(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteTable without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTable = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteTable(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteTable with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteTable = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteTable(request), expectedError);
            assert((client.innerApiCalls.deleteTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('modifyColumnFamilies', () => {
        it('invokes modifyColumnFamilies without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ModifyColumnFamiliesRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Table());
            client.innerApiCalls.modifyColumnFamilies = stubSimpleCall(expectedResponse);
            const [response] = await client.modifyColumnFamilies(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.modifyColumnFamilies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes modifyColumnFamilies without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ModifyColumnFamiliesRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Table());
            client.innerApiCalls.modifyColumnFamilies = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.modifyColumnFamilies(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.ITable|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.modifyColumnFamilies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes modifyColumnFamilies with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ModifyColumnFamiliesRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.modifyColumnFamilies = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.modifyColumnFamilies(request), expectedError);
            assert((client.innerApiCalls.modifyColumnFamilies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('dropRowRange', () => {
        it('invokes dropRowRange without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DropRowRangeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.dropRowRange = stubSimpleCall(expectedResponse);
            const [response] = await client.dropRowRange(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.dropRowRange as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes dropRowRange without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DropRowRangeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.dropRowRange = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.dropRowRange(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.dropRowRange as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes dropRowRange with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DropRowRangeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.dropRowRange = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.dropRowRange(request), expectedError);
            assert((client.innerApiCalls.dropRowRange as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('generateConsistencyToken', () => {
        it('invokes generateConsistencyToken without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GenerateConsistencyTokenRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.GenerateConsistencyTokenResponse());
            client.innerApiCalls.generateConsistencyToken = stubSimpleCall(expectedResponse);
            const [response] = await client.generateConsistencyToken(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.generateConsistencyToken as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes generateConsistencyToken without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GenerateConsistencyTokenRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.GenerateConsistencyTokenResponse());
            client.innerApiCalls.generateConsistencyToken = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.generateConsistencyToken(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.IGenerateConsistencyTokenResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.generateConsistencyToken as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes generateConsistencyToken with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GenerateConsistencyTokenRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.generateConsistencyToken = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.generateConsistencyToken(request), expectedError);
            assert((client.innerApiCalls.generateConsistencyToken as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('checkConsistency', () => {
        it('invokes checkConsistency without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CheckConsistencyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.CheckConsistencyResponse());
            client.innerApiCalls.checkConsistency = stubSimpleCall(expectedResponse);
            const [response] = await client.checkConsistency(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.checkConsistency as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkConsistency without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CheckConsistencyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.CheckConsistencyResponse());
            client.innerApiCalls.checkConsistency = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.checkConsistency(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.ICheckConsistencyResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.checkConsistency as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes checkConsistency with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CheckConsistencyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.checkConsistency = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkConsistency(request), expectedError);
            assert((client.innerApiCalls.checkConsistency as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getSnapshot', () => {
        it('invokes getSnapshot without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot());
            client.innerApiCalls.getSnapshot = stubSimpleCall(expectedResponse);
            const [response] = await client.getSnapshot(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getSnapshot without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot());
            client.innerApiCalls.getSnapshot = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSnapshot(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.ISnapshot|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getSnapshot with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getSnapshot = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSnapshot(request), expectedError);
            assert((client.innerApiCalls.getSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteSnapshot', () => {
        it('invokes deleteSnapshot without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSnapshot = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSnapshot(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteSnapshot without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSnapshot = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSnapshot(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteSnapshot with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteSnapshotRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSnapshot = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSnapshot(request), expectedError);
            assert((client.innerApiCalls.deleteSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getBackup', () => {
        it('invokes getBackup without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetBackupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Backup());
            client.innerApiCalls.getBackup = stubSimpleCall(expectedResponse);
            const [response] = await client.getBackup(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getBackup without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetBackupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Backup());
            client.innerApiCalls.getBackup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getBackup(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.IBackup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getBackup with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.GetBackupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getBackup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getBackup(request), expectedError);
            assert((client.innerApiCalls.getBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateBackup', () => {
        it('invokes updateBackup without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.UpdateBackupRequest());
            request.backup = {};
            request.backup.name = '';
            const expectedHeaderRequestParams = "backup.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Backup());
            client.innerApiCalls.updateBackup = stubSimpleCall(expectedResponse);
            const [response] = await client.updateBackup(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateBackup without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.UpdateBackupRequest());
            request.backup = {};
            request.backup.name = '';
            const expectedHeaderRequestParams = "backup.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.bigtable.admin.v2.Backup());
            client.innerApiCalls.updateBackup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateBackup(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.IBackup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateBackup with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.UpdateBackupRequest());
            request.backup = {};
            request.backup.name = '';
            const expectedHeaderRequestParams = "backup.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateBackup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateBackup(request), expectedError);
            assert((client.innerApiCalls.updateBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteBackup', () => {
        it('invokes deleteBackup without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteBackupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBackup = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteBackup(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteBackup without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteBackupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBackup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteBackup(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteBackup with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.DeleteBackupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteBackup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteBackup(request), expectedError);
            assert((client.innerApiCalls.deleteBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getIamPolicy without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getIamPolicy with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request), expectedError);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setIamPolicy without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setIamPolicy with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request), expectedError);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCall(expectedResponse);
            const [response] = await client.testIamPermissions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes testIamPermissions without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.ITestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes testIamPermissions with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = "resource=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request), expectedError);
            assert((client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createTableFromSnapshot', () => {
        it('invokes createTableFromSnapshot without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateTableFromSnapshotRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createTableFromSnapshot = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createTableFromSnapshot(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTableFromSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTableFromSnapshot without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateTableFromSnapshotRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createTableFromSnapshot = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTableFromSnapshot(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTableFromSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createTableFromSnapshot with call error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateTableFromSnapshotRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createTableFromSnapshot = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createTableFromSnapshot(request), expectedError);
            assert((client.innerApiCalls.createTableFromSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTableFromSnapshot with LRO error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateTableFromSnapshotRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createTableFromSnapshot = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createTableFromSnapshot(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createTableFromSnapshot as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateTableFromSnapshotProgress without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateTableFromSnapshotProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateTableFromSnapshotProgress with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateTableFromSnapshotProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('snapshotTable', () => {
        it('invokes snapshotTable without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.SnapshotTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.snapshotTable = stubLongRunningCall(expectedResponse);
            const [operation] = await client.snapshotTable(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.snapshotTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes snapshotTable without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.SnapshotTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.snapshotTable = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.snapshotTable(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.bigtable.admin.v2.ISnapshot, protos.google.bigtable.admin.v2.ISnapshotTableMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.bigtable.admin.v2.ISnapshot, protos.google.bigtable.admin.v2.ISnapshotTableMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.snapshotTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes snapshotTable with call error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.SnapshotTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.snapshotTable = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.snapshotTable(request), expectedError);
            assert((client.innerApiCalls.snapshotTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes snapshotTable with LRO error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.SnapshotTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.snapshotTable = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.snapshotTable(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.snapshotTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSnapshotTableProgress without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSnapshotTableProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSnapshotTableProgress with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSnapshotTableProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createBackup', () => {
        it('invokes createBackup without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateBackupRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createBackup = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createBackup(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createBackup without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateBackupRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createBackup = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createBackup(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.ICreateBackupMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.bigtable.admin.v2.IBackup, protos.google.bigtable.admin.v2.ICreateBackupMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createBackup with call error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateBackupRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createBackup = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createBackup(request), expectedError);
            assert((client.innerApiCalls.createBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createBackup with LRO error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.CreateBackupRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createBackup = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createBackup(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateBackupProgress without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateBackupProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateBackupProgress with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateBackupProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('restoreTable', () => {
        it('invokes restoreTable without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.RestoreTableRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.restoreTable = stubLongRunningCall(expectedResponse);
            const [operation] = await client.restoreTable(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreTable without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.RestoreTableRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.restoreTable = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restoreTable(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IRestoreTableMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.bigtable.admin.v2.ITable, protos.google.bigtable.admin.v2.IRestoreTableMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes restoreTable with call error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.RestoreTableRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreTable = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.restoreTable(request), expectedError);
            assert((client.innerApiCalls.restoreTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreTable with LRO error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.RestoreTableRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreTable = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.restoreTable(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.restoreTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkRestoreTableProgress without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRestoreTableProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRestoreTableProgress with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRestoreTableProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listTables', () => {
        it('invokes listTables without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListTablesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
            ];
            client.innerApiCalls.listTables = stubSimpleCall(expectedResponse);
            const [response] = await client.listTables(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTables as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTables without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListTablesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
            ];
            client.innerApiCalls.listTables = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTables(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.ITable[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTables as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTables with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListTablesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTables = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTables(request), expectedError);
            assert((client.innerApiCalls.listTables as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTablesStream without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListTablesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
            ];
            client.descriptors.page.listTables.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTablesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.bigtable.admin.v2.Table[] = [];
                stream.on('data', (response: protos.google.bigtable.admin.v2.Table) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTables.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTables, request));
            assert.strictEqual(
                (client.descriptors.page.listTables.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTablesStream with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListTablesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTables.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTablesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.bigtable.admin.v2.Table[] = [];
                stream.on('data', (response: protos.google.bigtable.admin.v2.Table) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTables.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTables, request));
            assert.strictEqual(
                (client.descriptors.page.listTables.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTables without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListTablesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Table()),
            ];
            client.descriptors.page.listTables.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.bigtable.admin.v2.ITable[] = [];
            const iterable = client.listTablesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTables.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTables.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTables with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListTablesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTables.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTablesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.bigtable.admin.v2.ITable[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTables.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTables.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listSnapshots', () => {
        it('invokes listSnapshots without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
            ];
            client.innerApiCalls.listSnapshots = stubSimpleCall(expectedResponse);
            const [response] = await client.listSnapshots(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSnapshots as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSnapshots without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
            ];
            client.innerApiCalls.listSnapshots = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSnapshots(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.ISnapshot[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSnapshots as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listSnapshots with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listSnapshots = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSnapshots(request), expectedError);
            assert((client.innerApiCalls.listSnapshots as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSnapshotsStream without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
            ];
            client.descriptors.page.listSnapshots.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSnapshotsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.bigtable.admin.v2.Snapshot[] = [];
                stream.on('data', (response: protos.google.bigtable.admin.v2.Snapshot) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSnapshots.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSnapshots, request));
            assert.strictEqual(
                (client.descriptors.page.listSnapshots.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listSnapshotsStream with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listSnapshots.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSnapshotsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.bigtable.admin.v2.Snapshot[] = [];
                stream.on('data', (response: protos.google.bigtable.admin.v2.Snapshot) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSnapshots.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSnapshots, request));
            assert.strictEqual(
                (client.descriptors.page.listSnapshots.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSnapshots without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Snapshot()),
            ];
            client.descriptors.page.listSnapshots.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.bigtable.admin.v2.ISnapshot[] = [];
            const iterable = client.listSnapshotsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSnapshots.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSnapshots.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSnapshots with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListSnapshotsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listSnapshots.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSnapshotsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.bigtable.admin.v2.ISnapshot[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSnapshots.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSnapshots.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listBackups', () => {
        it('invokes listBackups without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListBackupsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
            ];
            client.innerApiCalls.listBackups = stubSimpleCall(expectedResponse);
            const [response] = await client.listBackups(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBackups as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listBackups without error using callback', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListBackupsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
            ];
            client.innerApiCalls.listBackups = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listBackups(
                    request,
                    (err?: Error|null, result?: protos.google.bigtable.admin.v2.IBackup[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBackups as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listBackups with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListBackupsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listBackups = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listBackups(request), expectedError);
            assert((client.innerApiCalls.listBackups as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listBackupsStream without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListBackupsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
            ];
            client.descriptors.page.listBackups.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listBackupsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.bigtable.admin.v2.Backup[] = [];
                stream.on('data', (response: protos.google.bigtable.admin.v2.Backup) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listBackups.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listBackups, request));
            assert.strictEqual(
                (client.descriptors.page.listBackups.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listBackupsStream with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListBackupsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listBackups.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listBackupsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.bigtable.admin.v2.Backup[] = [];
                stream.on('data', (response: protos.google.bigtable.admin.v2.Backup) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listBackups.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listBackups, request));
            assert.strictEqual(
                (client.descriptors.page.listBackups.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listBackups without error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListBackupsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
              generateSampleMessage(new protos.google.bigtable.admin.v2.Backup()),
            ];
            client.descriptors.page.listBackups.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.bigtable.admin.v2.IBackup[] = [];
            const iterable = client.listBackupsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listBackups.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listBackups.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listBackups with error', async () => {
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.bigtable.admin.v2.ListBackupsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listBackups.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listBackupsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.bigtable.admin.v2.IBackup[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listBackups.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listBackups.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('appProfile', () => {
            const fakePath = "/rendered/path/appProfile";
            const expectedParameters = {
                project: "projectValue",
                instance: "instanceValue",
                app_profile: "appProfileValue",
            };
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.appProfilePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.appProfilePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('appProfilePath', () => {
                const result = client.appProfilePath("projectValue", "instanceValue", "appProfileValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.appProfilePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAppProfileName', () => {
                const result = client.matchProjectFromAppProfileName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.appProfilePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromAppProfileName', () => {
                const result = client.matchInstanceFromAppProfileName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.appProfilePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAppProfileFromAppProfileName', () => {
                const result = client.matchAppProfileFromAppProfileName(fakePath);
                assert.strictEqual(result, "appProfileValue");
                assert((client.pathTemplates.appProfilePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('backup', () => {
            const fakePath = "/rendered/path/backup";
            const expectedParameters = {
                project: "projectValue",
                instance: "instanceValue",
                cluster: "clusterValue",
                backup: "backupValue",
            };
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.backupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.backupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('backupPath', () => {
                const result = client.backupPath("projectValue", "instanceValue", "clusterValue", "backupValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.backupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromBackupName', () => {
                const result = client.matchProjectFromBackupName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.backupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromBackupName', () => {
                const result = client.matchInstanceFromBackupName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.backupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromBackupName', () => {
                const result = client.matchClusterFromBackupName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.backupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBackupFromBackupName', () => {
                const result = client.matchBackupFromBackupName(fakePath);
                assert.strictEqual(result, "backupValue");
                assert((client.pathTemplates.backupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cluster', () => {
            const fakePath = "/rendered/path/cluster";
            const expectedParameters = {
                project: "projectValue",
                instance: "instanceValue",
                cluster: "clusterValue",
            };
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clusterPath', () => {
                const result = client.clusterPath("projectValue", "instanceValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromClusterName', () => {
                const result = client.matchProjectFromClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromClusterName', () => {
                const result = client.matchInstanceFromClusterName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromClusterName', () => {
                const result = client.matchClusterFromClusterName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('instance', () => {
            const fakePath = "/rendered/path/instance";
            const expectedParameters = {
                project: "projectValue",
                instance: "instanceValue",
            };
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.instancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instancePath', () => {
                const result = client.instancePath("projectValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceName', () => {
                const result = client.matchProjectFromInstanceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceName', () => {
                const result = client.matchInstanceFromInstanceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('snapshot', () => {
            const fakePath = "/rendered/path/snapshot";
            const expectedParameters = {
                project: "projectValue",
                instance: "instanceValue",
                cluster: "clusterValue",
                snapshot: "snapshotValue",
            };
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.snapshotPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.snapshotPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('snapshotPath', () => {
                const result = client.snapshotPath("projectValue", "instanceValue", "clusterValue", "snapshotValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.snapshotPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSnapshotName', () => {
                const result = client.matchProjectFromSnapshotName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.snapshotPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromSnapshotName', () => {
                const result = client.matchInstanceFromSnapshotName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.snapshotPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromSnapshotName', () => {
                const result = client.matchClusterFromSnapshotName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.snapshotPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSnapshotFromSnapshotName', () => {
                const result = client.matchSnapshotFromSnapshotName(fakePath);
                assert.strictEqual(result, "snapshotValue");
                assert((client.pathTemplates.snapshotPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('table', () => {
            const fakePath = "/rendered/path/table";
            const expectedParameters = {
                project: "projectValue",
                instance: "instanceValue",
                table: "tableValue",
            };
            const client = new bigtabletableadminModule.v2.BigtableTableAdminClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.tablePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.tablePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('tablePath', () => {
                const result = client.tablePath("projectValue", "instanceValue", "tableValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.tablePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromTableName', () => {
                const result = client.matchProjectFromTableName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.tablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromTableName', () => {
                const result = client.matchInstanceFromTableName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.tablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTableFromTableName', () => {
                const result = client.matchTableFromTableName(fakePath);
                assert.strictEqual(result, "tableValue");
                assert((client.pathTemplates.tablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
