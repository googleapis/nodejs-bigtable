// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_bigtable_2_3_2_protos || ($protobuf.roots._google_cloud_bigtable_2_3_2_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.bigtable = (function() {
    
            /**
             * Namespace bigtable.
             * @memberof google
             * @namespace
             */
            var bigtable = {};
    
            bigtable.admin = (function() {
    
                /**
                 * Namespace admin.
                 * @memberof google.bigtable
                 * @namespace
                 */
                var admin = {};
    
                admin.v2 = (function() {
    
                    /**
                     * Namespace v2.
                     * @memberof google.bigtable.admin
                     * @namespace
                     */
                    var v2 = {};
    
                    v2.BigtableInstanceAdmin = (function() {
    
                        /**
                         * Constructs a new BigtableInstanceAdmin service.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a BigtableInstanceAdmin
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function BigtableInstanceAdmin(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (BigtableInstanceAdmin.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = BigtableInstanceAdmin;
    
                        /**
                         * Creates new BigtableInstanceAdmin service using the specified rpc implementation.
                         * @function create
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {BigtableInstanceAdmin} RPC service. Useful where requests and/or responses are streamed.
                         */
                        BigtableInstanceAdmin.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#createInstance}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef CreateInstanceCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls CreateInstance.
                         * @function createInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateInstanceRequest} request CreateInstanceRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.CreateInstanceCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.createInstance = function createInstance(request, callback) {
                            return this.rpcCall(createInstance, $root.google.bigtable.admin.v2.CreateInstanceRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "CreateInstance" });
    
                        /**
                         * Calls CreateInstance.
                         * @function createInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateInstanceRequest} request CreateInstanceRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#getInstance}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef GetInstanceCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Instance} [response] Instance
                         */
    
                        /**
                         * Calls GetInstance.
                         * @function getInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetInstanceRequest} request GetInstanceRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.GetInstanceCallback} callback Node-style callback called with the error, if any, and Instance
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.getInstance = function getInstance(request, callback) {
                            return this.rpcCall(getInstance, $root.google.bigtable.admin.v2.GetInstanceRequest, $root.google.bigtable.admin.v2.Instance, request, callback);
                        }, "name", { value: "GetInstance" });
    
                        /**
                         * Calls GetInstance.
                         * @function getInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetInstanceRequest} request GetInstanceRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Instance>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#listInstances}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef ListInstancesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.ListInstancesResponse} [response] ListInstancesResponse
                         */
    
                        /**
                         * Calls ListInstances.
                         * @function listInstances
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListInstancesRequest} request ListInstancesRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.ListInstancesCallback} callback Node-style callback called with the error, if any, and ListInstancesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.listInstances = function listInstances(request, callback) {
                            return this.rpcCall(listInstances, $root.google.bigtable.admin.v2.ListInstancesRequest, $root.google.bigtable.admin.v2.ListInstancesResponse, request, callback);
                        }, "name", { value: "ListInstances" });
    
                        /**
                         * Calls ListInstances.
                         * @function listInstances
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListInstancesRequest} request ListInstancesRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.ListInstancesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#updateInstance}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef UpdateInstanceCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Instance} [response] Instance
                         */
    
                        /**
                         * Calls UpdateInstance.
                         * @function updateInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IInstance} request Instance message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.UpdateInstanceCallback} callback Node-style callback called with the error, if any, and Instance
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.updateInstance = function updateInstance(request, callback) {
                            return this.rpcCall(updateInstance, $root.google.bigtable.admin.v2.Instance, $root.google.bigtable.admin.v2.Instance, request, callback);
                        }, "name", { value: "UpdateInstance" });
    
                        /**
                         * Calls UpdateInstance.
                         * @function updateInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IInstance} request Instance message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Instance>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#partialUpdateInstance}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef PartialUpdateInstanceCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls PartialUpdateInstance.
                         * @function partialUpdateInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IPartialUpdateInstanceRequest} request PartialUpdateInstanceRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.PartialUpdateInstanceCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.partialUpdateInstance = function partialUpdateInstance(request, callback) {
                            return this.rpcCall(partialUpdateInstance, $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "PartialUpdateInstance" });
    
                        /**
                         * Calls PartialUpdateInstance.
                         * @function partialUpdateInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IPartialUpdateInstanceRequest} request PartialUpdateInstanceRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#deleteInstance}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef DeleteInstanceCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteInstance.
                         * @function deleteInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteInstanceRequest} request DeleteInstanceRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.DeleteInstanceCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.deleteInstance = function deleteInstance(request, callback) {
                            return this.rpcCall(deleteInstance, $root.google.bigtable.admin.v2.DeleteInstanceRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteInstance" });
    
                        /**
                         * Calls DeleteInstance.
                         * @function deleteInstance
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteInstanceRequest} request DeleteInstanceRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#createCluster}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef CreateClusterCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls CreateCluster.
                         * @function createCluster
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateClusterRequest} request CreateClusterRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.CreateClusterCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.createCluster = function createCluster(request, callback) {
                            return this.rpcCall(createCluster, $root.google.bigtable.admin.v2.CreateClusterRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "CreateCluster" });
    
                        /**
                         * Calls CreateCluster.
                         * @function createCluster
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateClusterRequest} request CreateClusterRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#getCluster}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef GetClusterCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Cluster} [response] Cluster
                         */
    
                        /**
                         * Calls GetCluster.
                         * @function getCluster
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetClusterRequest} request GetClusterRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.GetClusterCallback} callback Node-style callback called with the error, if any, and Cluster
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.getCluster = function getCluster(request, callback) {
                            return this.rpcCall(getCluster, $root.google.bigtable.admin.v2.GetClusterRequest, $root.google.bigtable.admin.v2.Cluster, request, callback);
                        }, "name", { value: "GetCluster" });
    
                        /**
                         * Calls GetCluster.
                         * @function getCluster
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetClusterRequest} request GetClusterRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Cluster>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#listClusters}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef ListClustersCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.ListClustersResponse} [response] ListClustersResponse
                         */
    
                        /**
                         * Calls ListClusters.
                         * @function listClusters
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListClustersRequest} request ListClustersRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.ListClustersCallback} callback Node-style callback called with the error, if any, and ListClustersResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.listClusters = function listClusters(request, callback) {
                            return this.rpcCall(listClusters, $root.google.bigtable.admin.v2.ListClustersRequest, $root.google.bigtable.admin.v2.ListClustersResponse, request, callback);
                        }, "name", { value: "ListClusters" });
    
                        /**
                         * Calls ListClusters.
                         * @function listClusters
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListClustersRequest} request ListClustersRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.ListClustersResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#updateCluster}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef UpdateClusterCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls UpdateCluster.
                         * @function updateCluster
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICluster} request Cluster message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.UpdateClusterCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.updateCluster = function updateCluster(request, callback) {
                            return this.rpcCall(updateCluster, $root.google.bigtable.admin.v2.Cluster, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "UpdateCluster" });
    
                        /**
                         * Calls UpdateCluster.
                         * @function updateCluster
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICluster} request Cluster message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#deleteCluster}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef DeleteClusterCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteCluster.
                         * @function deleteCluster
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteClusterRequest} request DeleteClusterRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.DeleteClusterCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.deleteCluster = function deleteCluster(request, callback) {
                            return this.rpcCall(deleteCluster, $root.google.bigtable.admin.v2.DeleteClusterRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteCluster" });
    
                        /**
                         * Calls DeleteCluster.
                         * @function deleteCluster
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteClusterRequest} request DeleteClusterRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#createAppProfile}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef CreateAppProfileCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.AppProfile} [response] AppProfile
                         */
    
                        /**
                         * Calls CreateAppProfile.
                         * @function createAppProfile
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateAppProfileRequest} request CreateAppProfileRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.CreateAppProfileCallback} callback Node-style callback called with the error, if any, and AppProfile
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.createAppProfile = function createAppProfile(request, callback) {
                            return this.rpcCall(createAppProfile, $root.google.bigtable.admin.v2.CreateAppProfileRequest, $root.google.bigtable.admin.v2.AppProfile, request, callback);
                        }, "name", { value: "CreateAppProfile" });
    
                        /**
                         * Calls CreateAppProfile.
                         * @function createAppProfile
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateAppProfileRequest} request CreateAppProfileRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.AppProfile>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#getAppProfile}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef GetAppProfileCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.AppProfile} [response] AppProfile
                         */
    
                        /**
                         * Calls GetAppProfile.
                         * @function getAppProfile
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetAppProfileRequest} request GetAppProfileRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.GetAppProfileCallback} callback Node-style callback called with the error, if any, and AppProfile
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.getAppProfile = function getAppProfile(request, callback) {
                            return this.rpcCall(getAppProfile, $root.google.bigtable.admin.v2.GetAppProfileRequest, $root.google.bigtable.admin.v2.AppProfile, request, callback);
                        }, "name", { value: "GetAppProfile" });
    
                        /**
                         * Calls GetAppProfile.
                         * @function getAppProfile
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetAppProfileRequest} request GetAppProfileRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.AppProfile>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#listAppProfiles}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef ListAppProfilesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.ListAppProfilesResponse} [response] ListAppProfilesResponse
                         */
    
                        /**
                         * Calls ListAppProfiles.
                         * @function listAppProfiles
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListAppProfilesRequest} request ListAppProfilesRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.ListAppProfilesCallback} callback Node-style callback called with the error, if any, and ListAppProfilesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.listAppProfiles = function listAppProfiles(request, callback) {
                            return this.rpcCall(listAppProfiles, $root.google.bigtable.admin.v2.ListAppProfilesRequest, $root.google.bigtable.admin.v2.ListAppProfilesResponse, request, callback);
                        }, "name", { value: "ListAppProfiles" });
    
                        /**
                         * Calls ListAppProfiles.
                         * @function listAppProfiles
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListAppProfilesRequest} request ListAppProfilesRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.ListAppProfilesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#updateAppProfile}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef UpdateAppProfileCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls UpdateAppProfile.
                         * @function updateAppProfile
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileRequest} request UpdateAppProfileRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.UpdateAppProfileCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.updateAppProfile = function updateAppProfile(request, callback) {
                            return this.rpcCall(updateAppProfile, $root.google.bigtable.admin.v2.UpdateAppProfileRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "UpdateAppProfile" });
    
                        /**
                         * Calls UpdateAppProfile.
                         * @function updateAppProfile
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileRequest} request UpdateAppProfileRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#deleteAppProfile}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef DeleteAppProfileCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteAppProfile.
                         * @function deleteAppProfile
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteAppProfileRequest} request DeleteAppProfileRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.DeleteAppProfileCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.deleteAppProfile = function deleteAppProfile(request, callback) {
                            return this.rpcCall(deleteAppProfile, $root.google.bigtable.admin.v2.DeleteAppProfileRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteAppProfile" });
    
                        /**
                         * Calls DeleteAppProfile.
                         * @function deleteAppProfile
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteAppProfileRequest} request DeleteAppProfileRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#getIamPolicy}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef GetIamPolicyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.Policy} [response] Policy
                         */
    
                        /**
                         * Calls GetIamPolicy.
                         * @function getIamPolicy
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.GetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                            return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                        }, "name", { value: "GetIamPolicy" });
    
                        /**
                         * Calls GetIamPolicy.
                         * @function getIamPolicy
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                         * @returns {Promise<google.iam.v1.Policy>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#setIamPolicy}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef SetIamPolicyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.Policy} [response] Policy
                         */
    
                        /**
                         * Calls SetIamPolicy.
                         * @function setIamPolicy
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.SetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                            return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                        }, "name", { value: "SetIamPolicy" });
    
                        /**
                         * Calls SetIamPolicy.
                         * @function setIamPolicy
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                         * @returns {Promise<google.iam.v1.Policy>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableInstanceAdmin#testIamPermissions}.
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @typedef TestIamPermissionsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.TestIamPermissionsResponse} [response] TestIamPermissionsResponse
                         */
    
                        /**
                         * Calls TestIamPermissions.
                         * @function testIamPermissions
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableInstanceAdmin.TestIamPermissionsCallback} callback Node-style callback called with the error, if any, and TestIamPermissionsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableInstanceAdmin.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                            return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
                        }, "name", { value: "TestIamPermissions" });
    
                        /**
                         * Calls TestIamPermissions.
                         * @function testIamPermissions
                         * @memberof google.bigtable.admin.v2.BigtableInstanceAdmin
                         * @instance
                         * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                         * @returns {Promise<google.iam.v1.TestIamPermissionsResponse>} Promise
                         * @variation 2
                         */
    
                        return BigtableInstanceAdmin;
                    })();
    
                    v2.CreateInstanceRequest = (function() {
    
                        /**
                         * Properties of a CreateInstanceRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateInstanceRequest
                         * @property {string|null} [parent] CreateInstanceRequest parent
                         * @property {string|null} [instanceId] CreateInstanceRequest instanceId
                         * @property {google.bigtable.admin.v2.IInstance|null} [instance] CreateInstanceRequest instance
                         * @property {Object.<string,google.bigtable.admin.v2.ICluster>|null} [clusters] CreateInstanceRequest clusters
                         */
    
                        /**
                         * Constructs a new CreateInstanceRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateInstanceRequest.
                         * @implements ICreateInstanceRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateInstanceRequest=} [properties] Properties to set
                         */
                        function CreateInstanceRequest(properties) {
                            this.clusters = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateInstanceRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @instance
                         */
                        CreateInstanceRequest.prototype.parent = "";
    
                        /**
                         * CreateInstanceRequest instanceId.
                         * @member {string} instanceId
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @instance
                         */
                        CreateInstanceRequest.prototype.instanceId = "";
    
                        /**
                         * CreateInstanceRequest instance.
                         * @member {google.bigtable.admin.v2.IInstance|null|undefined} instance
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @instance
                         */
                        CreateInstanceRequest.prototype.instance = null;
    
                        /**
                         * CreateInstanceRequest clusters.
                         * @member {Object.<string,google.bigtable.admin.v2.ICluster>} clusters
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @instance
                         */
                        CreateInstanceRequest.prototype.clusters = $util.emptyObject;
    
                        /**
                         * Creates a new CreateInstanceRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateInstanceRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateInstanceRequest} CreateInstanceRequest instance
                         */
                        CreateInstanceRequest.create = function create(properties) {
                            return new CreateInstanceRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateInstanceRequest message. Does not implicitly {@link google.bigtable.admin.v2.CreateInstanceRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateInstanceRequest} message CreateInstanceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateInstanceRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.instanceId != null && message.hasOwnProperty("instanceId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.instanceId);
                            if (message.instance != null && message.hasOwnProperty("instance"))
                                $root.google.bigtable.admin.v2.Instance.encode(message.instance, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.clusters != null && message.hasOwnProperty("clusters"))
                                for (var keys = Object.keys(message.clusters), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.google.bigtable.admin.v2.Cluster.encode(message.clusters[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateInstanceRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateInstanceRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateInstanceRequest} message CreateInstanceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateInstanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateInstanceRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateInstanceRequest} CreateInstanceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateInstanceRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateInstanceRequest(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.instanceId = reader.string();
                                    break;
                                case 3:
                                    message.instance = $root.google.bigtable.admin.v2.Instance.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    reader.skip().pos++;
                                    if (message.clusters === $util.emptyObject)
                                        message.clusters = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.clusters[key] = $root.google.bigtable.admin.v2.Cluster.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateInstanceRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateInstanceRequest} CreateInstanceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateInstanceRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateInstanceRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateInstanceRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.instanceId != null && message.hasOwnProperty("instanceId"))
                                if (!$util.isString(message.instanceId))
                                    return "instanceId: string expected";
                            if (message.instance != null && message.hasOwnProperty("instance")) {
                                var error = $root.google.bigtable.admin.v2.Instance.verify(message.instance);
                                if (error)
                                    return "instance." + error;
                            }
                            if (message.clusters != null && message.hasOwnProperty("clusters")) {
                                if (!$util.isObject(message.clusters))
                                    return "clusters: object expected";
                                var key = Object.keys(message.clusters);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.Cluster.verify(message.clusters[key[i]]);
                                    if (error)
                                        return "clusters." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateInstanceRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateInstanceRequest} CreateInstanceRequest
                         */
                        CreateInstanceRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateInstanceRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateInstanceRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.instanceId != null)
                                message.instanceId = String(object.instanceId);
                            if (object.instance != null) {
                                if (typeof object.instance !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateInstanceRequest.instance: object expected");
                                message.instance = $root.google.bigtable.admin.v2.Instance.fromObject(object.instance);
                            }
                            if (object.clusters) {
                                if (typeof object.clusters !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateInstanceRequest.clusters: object expected");
                                message.clusters = {};
                                for (var keys = Object.keys(object.clusters), i = 0; i < keys.length; ++i) {
                                    if (typeof object.clusters[keys[i]] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.CreateInstanceRequest.clusters: object expected");
                                    message.clusters[keys[i]] = $root.google.bigtable.admin.v2.Cluster.fromObject(object.clusters[keys[i]]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateInstanceRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.CreateInstanceRequest} message CreateInstanceRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateInstanceRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.clusters = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.instanceId = "";
                                object.instance = null;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.instanceId != null && message.hasOwnProperty("instanceId"))
                                object.instanceId = message.instanceId;
                            if (message.instance != null && message.hasOwnProperty("instance"))
                                object.instance = $root.google.bigtable.admin.v2.Instance.toObject(message.instance, options);
                            var keys2;
                            if (message.clusters && (keys2 = Object.keys(message.clusters)).length) {
                                object.clusters = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.clusters[keys2[j]] = $root.google.bigtable.admin.v2.Cluster.toObject(message.clusters[keys2[j]], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CreateInstanceRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateInstanceRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateInstanceRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateInstanceRequest;
                    })();
    
                    v2.GetInstanceRequest = (function() {
    
                        /**
                         * Properties of a GetInstanceRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGetInstanceRequest
                         * @property {string|null} [name] GetInstanceRequest name
                         */
    
                        /**
                         * Constructs a new GetInstanceRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GetInstanceRequest.
                         * @implements IGetInstanceRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGetInstanceRequest=} [properties] Properties to set
                         */
                        function GetInstanceRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetInstanceRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @instance
                         */
                        GetInstanceRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetInstanceRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetInstanceRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GetInstanceRequest} GetInstanceRequest instance
                         */
                        GetInstanceRequest.create = function create(properties) {
                            return new GetInstanceRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetInstanceRequest message. Does not implicitly {@link google.bigtable.admin.v2.GetInstanceRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetInstanceRequest} message GetInstanceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetInstanceRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetInstanceRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GetInstanceRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetInstanceRequest} message GetInstanceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetInstanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetInstanceRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GetInstanceRequest} GetInstanceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetInstanceRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GetInstanceRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetInstanceRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GetInstanceRequest} GetInstanceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetInstanceRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetInstanceRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetInstanceRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetInstanceRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GetInstanceRequest} GetInstanceRequest
                         */
                        GetInstanceRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GetInstanceRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GetInstanceRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetInstanceRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.GetInstanceRequest} message GetInstanceRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetInstanceRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetInstanceRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GetInstanceRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetInstanceRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetInstanceRequest;
                    })();
    
                    v2.ListInstancesRequest = (function() {
    
                        /**
                         * Properties of a ListInstancesRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListInstancesRequest
                         * @property {string|null} [parent] ListInstancesRequest parent
                         * @property {string|null} [pageToken] ListInstancesRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListInstancesRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListInstancesRequest.
                         * @implements IListInstancesRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListInstancesRequest=} [properties] Properties to set
                         */
                        function ListInstancesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListInstancesRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @instance
                         */
                        ListInstancesRequest.prototype.parent = "";
    
                        /**
                         * ListInstancesRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @instance
                         */
                        ListInstancesRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListInstancesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListInstancesRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListInstancesRequest} ListInstancesRequest instance
                         */
                        ListInstancesRequest.create = function create(properties) {
                            return new ListInstancesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListInstancesRequest message. Does not implicitly {@link google.bigtable.admin.v2.ListInstancesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListInstancesRequest} message ListInstancesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInstancesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListInstancesRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListInstancesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListInstancesRequest} message ListInstancesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInstancesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListInstancesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListInstancesRequest} ListInstancesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInstancesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListInstancesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.pageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListInstancesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListInstancesRequest} ListInstancesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInstancesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListInstancesRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListInstancesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListInstancesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListInstancesRequest} ListInstancesRequest
                         */
                        ListInstancesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListInstancesRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListInstancesRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListInstancesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ListInstancesRequest} message ListInstancesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListInstancesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageToken = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListInstancesRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListInstancesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListInstancesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListInstancesRequest;
                    })();
    
                    v2.ListInstancesResponse = (function() {
    
                        /**
                         * Properties of a ListInstancesResponse.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListInstancesResponse
                         * @property {Array.<google.bigtable.admin.v2.IInstance>|null} [instances] ListInstancesResponse instances
                         * @property {Array.<string>|null} [failedLocations] ListInstancesResponse failedLocations
                         * @property {string|null} [nextPageToken] ListInstancesResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListInstancesResponse.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListInstancesResponse.
                         * @implements IListInstancesResponse
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListInstancesResponse=} [properties] Properties to set
                         */
                        function ListInstancesResponse(properties) {
                            this.instances = [];
                            this.failedLocations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListInstancesResponse instances.
                         * @member {Array.<google.bigtable.admin.v2.IInstance>} instances
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @instance
                         */
                        ListInstancesResponse.prototype.instances = $util.emptyArray;
    
                        /**
                         * ListInstancesResponse failedLocations.
                         * @member {Array.<string>} failedLocations
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @instance
                         */
                        ListInstancesResponse.prototype.failedLocations = $util.emptyArray;
    
                        /**
                         * ListInstancesResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @instance
                         */
                        ListInstancesResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListInstancesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListInstancesResponse=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListInstancesResponse} ListInstancesResponse instance
                         */
                        ListInstancesResponse.create = function create(properties) {
                            return new ListInstancesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListInstancesResponse message. Does not implicitly {@link google.bigtable.admin.v2.ListInstancesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListInstancesResponse} message ListInstancesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInstancesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.instances != null && message.instances.length)
                                for (var i = 0; i < message.instances.length; ++i)
                                    $root.google.bigtable.admin.v2.Instance.encode(message.instances[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.failedLocations != null && message.failedLocations.length)
                                for (var i = 0; i < message.failedLocations.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.failedLocations[i]);
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListInstancesResponse message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListInstancesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListInstancesResponse} message ListInstancesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListInstancesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListInstancesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListInstancesResponse} ListInstancesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInstancesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListInstancesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.instances && message.instances.length))
                                        message.instances = [];
                                    message.instances.push($root.google.bigtable.admin.v2.Instance.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    if (!(message.failedLocations && message.failedLocations.length))
                                        message.failedLocations = [];
                                    message.failedLocations.push(reader.string());
                                    break;
                                case 3:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListInstancesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListInstancesResponse} ListInstancesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListInstancesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListInstancesResponse message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListInstancesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.instances != null && message.hasOwnProperty("instances")) {
                                if (!Array.isArray(message.instances))
                                    return "instances: array expected";
                                for (var i = 0; i < message.instances.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.Instance.verify(message.instances[i]);
                                    if (error)
                                        return "instances." + error;
                                }
                            }
                            if (message.failedLocations != null && message.hasOwnProperty("failedLocations")) {
                                if (!Array.isArray(message.failedLocations))
                                    return "failedLocations: array expected";
                                for (var i = 0; i < message.failedLocations.length; ++i)
                                    if (!$util.isString(message.failedLocations[i]))
                                        return "failedLocations: string[] expected";
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListInstancesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListInstancesResponse} ListInstancesResponse
                         */
                        ListInstancesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListInstancesResponse)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListInstancesResponse();
                            if (object.instances) {
                                if (!Array.isArray(object.instances))
                                    throw TypeError(".google.bigtable.admin.v2.ListInstancesResponse.instances: array expected");
                                message.instances = [];
                                for (var i = 0; i < object.instances.length; ++i) {
                                    if (typeof object.instances[i] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ListInstancesResponse.instances: object expected");
                                    message.instances[i] = $root.google.bigtable.admin.v2.Instance.fromObject(object.instances[i]);
                                }
                            }
                            if (object.failedLocations) {
                                if (!Array.isArray(object.failedLocations))
                                    throw TypeError(".google.bigtable.admin.v2.ListInstancesResponse.failedLocations: array expected");
                                message.failedLocations = [];
                                for (var i = 0; i < object.failedLocations.length; ++i)
                                    message.failedLocations[i] = String(object.failedLocations[i]);
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListInstancesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ListInstancesResponse} message ListInstancesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListInstancesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.instances = [];
                                object.failedLocations = [];
                            }
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.instances && message.instances.length) {
                                object.instances = [];
                                for (var j = 0; j < message.instances.length; ++j)
                                    object.instances[j] = $root.google.bigtable.admin.v2.Instance.toObject(message.instances[j], options);
                            }
                            if (message.failedLocations && message.failedLocations.length) {
                                object.failedLocations = [];
                                for (var j = 0; j < message.failedLocations.length; ++j)
                                    object.failedLocations[j] = message.failedLocations[j];
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListInstancesResponse to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListInstancesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListInstancesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListInstancesResponse;
                    })();
    
                    v2.PartialUpdateInstanceRequest = (function() {
    
                        /**
                         * Properties of a PartialUpdateInstanceRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IPartialUpdateInstanceRequest
                         * @property {google.bigtable.admin.v2.IInstance|null} [instance] PartialUpdateInstanceRequest instance
                         * @property {google.protobuf.IFieldMask|null} [updateMask] PartialUpdateInstanceRequest updateMask
                         */
    
                        /**
                         * Constructs a new PartialUpdateInstanceRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a PartialUpdateInstanceRequest.
                         * @implements IPartialUpdateInstanceRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IPartialUpdateInstanceRequest=} [properties] Properties to set
                         */
                        function PartialUpdateInstanceRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PartialUpdateInstanceRequest instance.
                         * @member {google.bigtable.admin.v2.IInstance|null|undefined} instance
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @instance
                         */
                        PartialUpdateInstanceRequest.prototype.instance = null;
    
                        /**
                         * PartialUpdateInstanceRequest updateMask.
                         * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @instance
                         */
                        PartialUpdateInstanceRequest.prototype.updateMask = null;
    
                        /**
                         * Creates a new PartialUpdateInstanceRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IPartialUpdateInstanceRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.PartialUpdateInstanceRequest} PartialUpdateInstanceRequest instance
                         */
                        PartialUpdateInstanceRequest.create = function create(properties) {
                            return new PartialUpdateInstanceRequest(properties);
                        };
    
                        /**
                         * Encodes the specified PartialUpdateInstanceRequest message. Does not implicitly {@link google.bigtable.admin.v2.PartialUpdateInstanceRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IPartialUpdateInstanceRequest} message PartialUpdateInstanceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartialUpdateInstanceRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.instance != null && message.hasOwnProperty("instance"))
                                $root.google.bigtable.admin.v2.Instance.encode(message.instance, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PartialUpdateInstanceRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.PartialUpdateInstanceRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IPartialUpdateInstanceRequest} message PartialUpdateInstanceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartialUpdateInstanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PartialUpdateInstanceRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.PartialUpdateInstanceRequest} PartialUpdateInstanceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartialUpdateInstanceRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.instance = $root.google.bigtable.admin.v2.Instance.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PartialUpdateInstanceRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.PartialUpdateInstanceRequest} PartialUpdateInstanceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartialUpdateInstanceRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PartialUpdateInstanceRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PartialUpdateInstanceRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.instance != null && message.hasOwnProperty("instance")) {
                                var error = $root.google.bigtable.admin.v2.Instance.verify(message.instance);
                                if (error)
                                    return "instance." + error;
                            }
                            if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                if (error)
                                    return "updateMask." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a PartialUpdateInstanceRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.PartialUpdateInstanceRequest} PartialUpdateInstanceRequest
                         */
                        PartialUpdateInstanceRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest();
                            if (object.instance != null) {
                                if (typeof object.instance !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.PartialUpdateInstanceRequest.instance: object expected");
                                message.instance = $root.google.bigtable.admin.v2.Instance.fromObject(object.instance);
                            }
                            if (object.updateMask != null) {
                                if (typeof object.updateMask !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.PartialUpdateInstanceRequest.updateMask: object expected");
                                message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PartialUpdateInstanceRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.PartialUpdateInstanceRequest} message PartialUpdateInstanceRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PartialUpdateInstanceRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.instance = null;
                                object.updateMask = null;
                            }
                            if (message.instance != null && message.hasOwnProperty("instance"))
                                object.instance = $root.google.bigtable.admin.v2.Instance.toObject(message.instance, options);
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                            return object;
                        };
    
                        /**
                         * Converts this PartialUpdateInstanceRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.PartialUpdateInstanceRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PartialUpdateInstanceRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return PartialUpdateInstanceRequest;
                    })();
    
                    v2.DeleteInstanceRequest = (function() {
    
                        /**
                         * Properties of a DeleteInstanceRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IDeleteInstanceRequest
                         * @property {string|null} [name] DeleteInstanceRequest name
                         */
    
                        /**
                         * Constructs a new DeleteInstanceRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a DeleteInstanceRequest.
                         * @implements IDeleteInstanceRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IDeleteInstanceRequest=} [properties] Properties to set
                         */
                        function DeleteInstanceRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteInstanceRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @instance
                         */
                        DeleteInstanceRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteInstanceRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteInstanceRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.DeleteInstanceRequest} DeleteInstanceRequest instance
                         */
                        DeleteInstanceRequest.create = function create(properties) {
                            return new DeleteInstanceRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteInstanceRequest message. Does not implicitly {@link google.bigtable.admin.v2.DeleteInstanceRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteInstanceRequest} message DeleteInstanceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteInstanceRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteInstanceRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.DeleteInstanceRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteInstanceRequest} message DeleteInstanceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteInstanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteInstanceRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.DeleteInstanceRequest} DeleteInstanceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteInstanceRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.DeleteInstanceRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteInstanceRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.DeleteInstanceRequest} DeleteInstanceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteInstanceRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteInstanceRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteInstanceRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteInstanceRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.DeleteInstanceRequest} DeleteInstanceRequest
                         */
                        DeleteInstanceRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.DeleteInstanceRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.DeleteInstanceRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteInstanceRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @static
                         * @param {google.bigtable.admin.v2.DeleteInstanceRequest} message DeleteInstanceRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteInstanceRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteInstanceRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.DeleteInstanceRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteInstanceRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteInstanceRequest;
                    })();
    
                    v2.CreateClusterRequest = (function() {
    
                        /**
                         * Properties of a CreateClusterRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateClusterRequest
                         * @property {string|null} [parent] CreateClusterRequest parent
                         * @property {string|null} [clusterId] CreateClusterRequest clusterId
                         * @property {google.bigtable.admin.v2.ICluster|null} [cluster] CreateClusterRequest cluster
                         */
    
                        /**
                         * Constructs a new CreateClusterRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateClusterRequest.
                         * @implements ICreateClusterRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateClusterRequest=} [properties] Properties to set
                         */
                        function CreateClusterRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateClusterRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @instance
                         */
                        CreateClusterRequest.prototype.parent = "";
    
                        /**
                         * CreateClusterRequest clusterId.
                         * @member {string} clusterId
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @instance
                         */
                        CreateClusterRequest.prototype.clusterId = "";
    
                        /**
                         * CreateClusterRequest cluster.
                         * @member {google.bigtable.admin.v2.ICluster|null|undefined} cluster
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @instance
                         */
                        CreateClusterRequest.prototype.cluster = null;
    
                        /**
                         * Creates a new CreateClusterRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateClusterRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateClusterRequest} CreateClusterRequest instance
                         */
                        CreateClusterRequest.create = function create(properties) {
                            return new CreateClusterRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateClusterRequest message. Does not implicitly {@link google.bigtable.admin.v2.CreateClusterRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateClusterRequest} message CreateClusterRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateClusterRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.clusterId);
                            if (message.cluster != null && message.hasOwnProperty("cluster"))
                                $root.google.bigtable.admin.v2.Cluster.encode(message.cluster, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateClusterRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateClusterRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateClusterRequest} message CreateClusterRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateClusterRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateClusterRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateClusterRequest} CreateClusterRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateClusterRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateClusterRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.clusterId = reader.string();
                                    break;
                                case 3:
                                    message.cluster = $root.google.bigtable.admin.v2.Cluster.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateClusterRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateClusterRequest} CreateClusterRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateClusterRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateClusterRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateClusterRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                if (!$util.isString(message.clusterId))
                                    return "clusterId: string expected";
                            if (message.cluster != null && message.hasOwnProperty("cluster")) {
                                var error = $root.google.bigtable.admin.v2.Cluster.verify(message.cluster);
                                if (error)
                                    return "cluster." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateClusterRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateClusterRequest} CreateClusterRequest
                         */
                        CreateClusterRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateClusterRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateClusterRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.clusterId != null)
                                message.clusterId = String(object.clusterId);
                            if (object.cluster != null) {
                                if (typeof object.cluster !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateClusterRequest.cluster: object expected");
                                message.cluster = $root.google.bigtable.admin.v2.Cluster.fromObject(object.cluster);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateClusterRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.CreateClusterRequest} message CreateClusterRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateClusterRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.clusterId = "";
                                object.cluster = null;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                object.clusterId = message.clusterId;
                            if (message.cluster != null && message.hasOwnProperty("cluster"))
                                object.cluster = $root.google.bigtable.admin.v2.Cluster.toObject(message.cluster, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateClusterRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateClusterRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateClusterRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateClusterRequest;
                    })();
    
                    v2.GetClusterRequest = (function() {
    
                        /**
                         * Properties of a GetClusterRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGetClusterRequest
                         * @property {string|null} [name] GetClusterRequest name
                         */
    
                        /**
                         * Constructs a new GetClusterRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GetClusterRequest.
                         * @implements IGetClusterRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGetClusterRequest=} [properties] Properties to set
                         */
                        function GetClusterRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetClusterRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @instance
                         */
                        GetClusterRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetClusterRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetClusterRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GetClusterRequest} GetClusterRequest instance
                         */
                        GetClusterRequest.create = function create(properties) {
                            return new GetClusterRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetClusterRequest message. Does not implicitly {@link google.bigtable.admin.v2.GetClusterRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetClusterRequest} message GetClusterRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetClusterRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetClusterRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GetClusterRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetClusterRequest} message GetClusterRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetClusterRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetClusterRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GetClusterRequest} GetClusterRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetClusterRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GetClusterRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetClusterRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GetClusterRequest} GetClusterRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetClusterRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetClusterRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetClusterRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetClusterRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GetClusterRequest} GetClusterRequest
                         */
                        GetClusterRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GetClusterRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GetClusterRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetClusterRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.GetClusterRequest} message GetClusterRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetClusterRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetClusterRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GetClusterRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetClusterRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetClusterRequest;
                    })();
    
                    v2.ListClustersRequest = (function() {
    
                        /**
                         * Properties of a ListClustersRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListClustersRequest
                         * @property {string|null} [parent] ListClustersRequest parent
                         * @property {string|null} [pageToken] ListClustersRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListClustersRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListClustersRequest.
                         * @implements IListClustersRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListClustersRequest=} [properties] Properties to set
                         */
                        function ListClustersRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListClustersRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @instance
                         */
                        ListClustersRequest.prototype.parent = "";
    
                        /**
                         * ListClustersRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @instance
                         */
                        ListClustersRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListClustersRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListClustersRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListClustersRequest} ListClustersRequest instance
                         */
                        ListClustersRequest.create = function create(properties) {
                            return new ListClustersRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListClustersRequest message. Does not implicitly {@link google.bigtable.admin.v2.ListClustersRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListClustersRequest} message ListClustersRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListClustersRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListClustersRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListClustersRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListClustersRequest} message ListClustersRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListClustersRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListClustersRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListClustersRequest} ListClustersRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListClustersRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListClustersRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.pageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListClustersRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListClustersRequest} ListClustersRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListClustersRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListClustersRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListClustersRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListClustersRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListClustersRequest} ListClustersRequest
                         */
                        ListClustersRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListClustersRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListClustersRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListClustersRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ListClustersRequest} message ListClustersRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListClustersRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageToken = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListClustersRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListClustersRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListClustersRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListClustersRequest;
                    })();
    
                    v2.ListClustersResponse = (function() {
    
                        /**
                         * Properties of a ListClustersResponse.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListClustersResponse
                         * @property {Array.<google.bigtable.admin.v2.ICluster>|null} [clusters] ListClustersResponse clusters
                         * @property {Array.<string>|null} [failedLocations] ListClustersResponse failedLocations
                         * @property {string|null} [nextPageToken] ListClustersResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListClustersResponse.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListClustersResponse.
                         * @implements IListClustersResponse
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListClustersResponse=} [properties] Properties to set
                         */
                        function ListClustersResponse(properties) {
                            this.clusters = [];
                            this.failedLocations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListClustersResponse clusters.
                         * @member {Array.<google.bigtable.admin.v2.ICluster>} clusters
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @instance
                         */
                        ListClustersResponse.prototype.clusters = $util.emptyArray;
    
                        /**
                         * ListClustersResponse failedLocations.
                         * @member {Array.<string>} failedLocations
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @instance
                         */
                        ListClustersResponse.prototype.failedLocations = $util.emptyArray;
    
                        /**
                         * ListClustersResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @instance
                         */
                        ListClustersResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListClustersResponse instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListClustersResponse=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListClustersResponse} ListClustersResponse instance
                         */
                        ListClustersResponse.create = function create(properties) {
                            return new ListClustersResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListClustersResponse message. Does not implicitly {@link google.bigtable.admin.v2.ListClustersResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListClustersResponse} message ListClustersResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListClustersResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.clusters != null && message.clusters.length)
                                for (var i = 0; i < message.clusters.length; ++i)
                                    $root.google.bigtable.admin.v2.Cluster.encode(message.clusters[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.failedLocations != null && message.failedLocations.length)
                                for (var i = 0; i < message.failedLocations.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.failedLocations[i]);
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListClustersResponse message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListClustersResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListClustersResponse} message ListClustersResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListClustersResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListClustersResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListClustersResponse} ListClustersResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListClustersResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListClustersResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.clusters && message.clusters.length))
                                        message.clusters = [];
                                    message.clusters.push($root.google.bigtable.admin.v2.Cluster.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    if (!(message.failedLocations && message.failedLocations.length))
                                        message.failedLocations = [];
                                    message.failedLocations.push(reader.string());
                                    break;
                                case 3:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListClustersResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListClustersResponse} ListClustersResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListClustersResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListClustersResponse message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListClustersResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.clusters != null && message.hasOwnProperty("clusters")) {
                                if (!Array.isArray(message.clusters))
                                    return "clusters: array expected";
                                for (var i = 0; i < message.clusters.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.Cluster.verify(message.clusters[i]);
                                    if (error)
                                        return "clusters." + error;
                                }
                            }
                            if (message.failedLocations != null && message.hasOwnProperty("failedLocations")) {
                                if (!Array.isArray(message.failedLocations))
                                    return "failedLocations: array expected";
                                for (var i = 0; i < message.failedLocations.length; ++i)
                                    if (!$util.isString(message.failedLocations[i]))
                                        return "failedLocations: string[] expected";
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListClustersResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListClustersResponse} ListClustersResponse
                         */
                        ListClustersResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListClustersResponse)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListClustersResponse();
                            if (object.clusters) {
                                if (!Array.isArray(object.clusters))
                                    throw TypeError(".google.bigtable.admin.v2.ListClustersResponse.clusters: array expected");
                                message.clusters = [];
                                for (var i = 0; i < object.clusters.length; ++i) {
                                    if (typeof object.clusters[i] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ListClustersResponse.clusters: object expected");
                                    message.clusters[i] = $root.google.bigtable.admin.v2.Cluster.fromObject(object.clusters[i]);
                                }
                            }
                            if (object.failedLocations) {
                                if (!Array.isArray(object.failedLocations))
                                    throw TypeError(".google.bigtable.admin.v2.ListClustersResponse.failedLocations: array expected");
                                message.failedLocations = [];
                                for (var i = 0; i < object.failedLocations.length; ++i)
                                    message.failedLocations[i] = String(object.failedLocations[i]);
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListClustersResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ListClustersResponse} message ListClustersResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListClustersResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.clusters = [];
                                object.failedLocations = [];
                            }
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.clusters && message.clusters.length) {
                                object.clusters = [];
                                for (var j = 0; j < message.clusters.length; ++j)
                                    object.clusters[j] = $root.google.bigtable.admin.v2.Cluster.toObject(message.clusters[j], options);
                            }
                            if (message.failedLocations && message.failedLocations.length) {
                                object.failedLocations = [];
                                for (var j = 0; j < message.failedLocations.length; ++j)
                                    object.failedLocations[j] = message.failedLocations[j];
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListClustersResponse to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListClustersResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListClustersResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListClustersResponse;
                    })();
    
                    v2.DeleteClusterRequest = (function() {
    
                        /**
                         * Properties of a DeleteClusterRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IDeleteClusterRequest
                         * @property {string|null} [name] DeleteClusterRequest name
                         */
    
                        /**
                         * Constructs a new DeleteClusterRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a DeleteClusterRequest.
                         * @implements IDeleteClusterRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IDeleteClusterRequest=} [properties] Properties to set
                         */
                        function DeleteClusterRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteClusterRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @instance
                         */
                        DeleteClusterRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteClusterRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteClusterRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.DeleteClusterRequest} DeleteClusterRequest instance
                         */
                        DeleteClusterRequest.create = function create(properties) {
                            return new DeleteClusterRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteClusterRequest message. Does not implicitly {@link google.bigtable.admin.v2.DeleteClusterRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteClusterRequest} message DeleteClusterRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteClusterRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteClusterRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.DeleteClusterRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteClusterRequest} message DeleteClusterRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteClusterRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteClusterRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.DeleteClusterRequest} DeleteClusterRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteClusterRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.DeleteClusterRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteClusterRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.DeleteClusterRequest} DeleteClusterRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteClusterRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteClusterRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteClusterRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteClusterRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.DeleteClusterRequest} DeleteClusterRequest
                         */
                        DeleteClusterRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.DeleteClusterRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.DeleteClusterRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteClusterRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @static
                         * @param {google.bigtable.admin.v2.DeleteClusterRequest} message DeleteClusterRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteClusterRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteClusterRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.DeleteClusterRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteClusterRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteClusterRequest;
                    })();
    
                    v2.CreateInstanceMetadata = (function() {
    
                        /**
                         * Properties of a CreateInstanceMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateInstanceMetadata
                         * @property {google.bigtable.admin.v2.ICreateInstanceRequest|null} [originalRequest] CreateInstanceMetadata originalRequest
                         * @property {google.protobuf.ITimestamp|null} [requestTime] CreateInstanceMetadata requestTime
                         * @property {google.protobuf.ITimestamp|null} [finishTime] CreateInstanceMetadata finishTime
                         */
    
                        /**
                         * Constructs a new CreateInstanceMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateInstanceMetadata.
                         * @implements ICreateInstanceMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateInstanceMetadata=} [properties] Properties to set
                         */
                        function CreateInstanceMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateInstanceMetadata originalRequest.
                         * @member {google.bigtable.admin.v2.ICreateInstanceRequest|null|undefined} originalRequest
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @instance
                         */
                        CreateInstanceMetadata.prototype.originalRequest = null;
    
                        /**
                         * CreateInstanceMetadata requestTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} requestTime
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @instance
                         */
                        CreateInstanceMetadata.prototype.requestTime = null;
    
                        /**
                         * CreateInstanceMetadata finishTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} finishTime
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @instance
                         */
                        CreateInstanceMetadata.prototype.finishTime = null;
    
                        /**
                         * Creates a new CreateInstanceMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateInstanceMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateInstanceMetadata} CreateInstanceMetadata instance
                         */
                        CreateInstanceMetadata.create = function create(properties) {
                            return new CreateInstanceMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified CreateInstanceMetadata message. Does not implicitly {@link google.bigtable.admin.v2.CreateInstanceMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateInstanceMetadata} message CreateInstanceMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateInstanceMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                $root.google.bigtable.admin.v2.CreateInstanceRequest.encode(message.originalRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                $root.google.protobuf.Timestamp.encode(message.requestTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                $root.google.protobuf.Timestamp.encode(message.finishTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateInstanceMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateInstanceMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateInstanceMetadata} message CreateInstanceMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateInstanceMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateInstanceMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateInstanceMetadata} CreateInstanceMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateInstanceMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateInstanceMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.originalRequest = $root.google.bigtable.admin.v2.CreateInstanceRequest.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.requestTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.finishTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateInstanceMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateInstanceMetadata} CreateInstanceMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateInstanceMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateInstanceMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateInstanceMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest")) {
                                var error = $root.google.bigtable.admin.v2.CreateInstanceRequest.verify(message.originalRequest);
                                if (error)
                                    return "originalRequest." + error;
                            }
                            if (message.requestTime != null && message.hasOwnProperty("requestTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.requestTime);
                                if (error)
                                    return "requestTime." + error;
                            }
                            if (message.finishTime != null && message.hasOwnProperty("finishTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.finishTime);
                                if (error)
                                    return "finishTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateInstanceMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateInstanceMetadata} CreateInstanceMetadata
                         */
                        CreateInstanceMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateInstanceMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateInstanceMetadata();
                            if (object.originalRequest != null) {
                                if (typeof object.originalRequest !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateInstanceMetadata.originalRequest: object expected");
                                message.originalRequest = $root.google.bigtable.admin.v2.CreateInstanceRequest.fromObject(object.originalRequest);
                            }
                            if (object.requestTime != null) {
                                if (typeof object.requestTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateInstanceMetadata.requestTime: object expected");
                                message.requestTime = $root.google.protobuf.Timestamp.fromObject(object.requestTime);
                            }
                            if (object.finishTime != null) {
                                if (typeof object.finishTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateInstanceMetadata.finishTime: object expected");
                                message.finishTime = $root.google.protobuf.Timestamp.fromObject(object.finishTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateInstanceMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.CreateInstanceMetadata} message CreateInstanceMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateInstanceMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.originalRequest = null;
                                object.requestTime = null;
                                object.finishTime = null;
                            }
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                object.originalRequest = $root.google.bigtable.admin.v2.CreateInstanceRequest.toObject(message.originalRequest, options);
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                object.requestTime = $root.google.protobuf.Timestamp.toObject(message.requestTime, options);
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                object.finishTime = $root.google.protobuf.Timestamp.toObject(message.finishTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateInstanceMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateInstanceMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateInstanceMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateInstanceMetadata;
                    })();
    
                    v2.UpdateInstanceMetadata = (function() {
    
                        /**
                         * Properties of an UpdateInstanceMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface IUpdateInstanceMetadata
                         * @property {google.bigtable.admin.v2.IPartialUpdateInstanceRequest|null} [originalRequest] UpdateInstanceMetadata originalRequest
                         * @property {google.protobuf.ITimestamp|null} [requestTime] UpdateInstanceMetadata requestTime
                         * @property {google.protobuf.ITimestamp|null} [finishTime] UpdateInstanceMetadata finishTime
                         */
    
                        /**
                         * Constructs a new UpdateInstanceMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an UpdateInstanceMetadata.
                         * @implements IUpdateInstanceMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.IUpdateInstanceMetadata=} [properties] Properties to set
                         */
                        function UpdateInstanceMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateInstanceMetadata originalRequest.
                         * @member {google.bigtable.admin.v2.IPartialUpdateInstanceRequest|null|undefined} originalRequest
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @instance
                         */
                        UpdateInstanceMetadata.prototype.originalRequest = null;
    
                        /**
                         * UpdateInstanceMetadata requestTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} requestTime
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @instance
                         */
                        UpdateInstanceMetadata.prototype.requestTime = null;
    
                        /**
                         * UpdateInstanceMetadata finishTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} finishTime
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @instance
                         */
                        UpdateInstanceMetadata.prototype.finishTime = null;
    
                        /**
                         * Creates a new UpdateInstanceMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateInstanceMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.UpdateInstanceMetadata} UpdateInstanceMetadata instance
                         */
                        UpdateInstanceMetadata.create = function create(properties) {
                            return new UpdateInstanceMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateInstanceMetadata message. Does not implicitly {@link google.bigtable.admin.v2.UpdateInstanceMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateInstanceMetadata} message UpdateInstanceMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateInstanceMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest.encode(message.originalRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                $root.google.protobuf.Timestamp.encode(message.requestTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                $root.google.protobuf.Timestamp.encode(message.finishTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateInstanceMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.UpdateInstanceMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateInstanceMetadata} message UpdateInstanceMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateInstanceMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateInstanceMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.UpdateInstanceMetadata} UpdateInstanceMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateInstanceMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.UpdateInstanceMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.originalRequest = $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.requestTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.finishTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateInstanceMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.UpdateInstanceMetadata} UpdateInstanceMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateInstanceMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateInstanceMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateInstanceMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest")) {
                                var error = $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest.verify(message.originalRequest);
                                if (error)
                                    return "originalRequest." + error;
                            }
                            if (message.requestTime != null && message.hasOwnProperty("requestTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.requestTime);
                                if (error)
                                    return "requestTime." + error;
                            }
                            if (message.finishTime != null && message.hasOwnProperty("finishTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.finishTime);
                                if (error)
                                    return "finishTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpdateInstanceMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.UpdateInstanceMetadata} UpdateInstanceMetadata
                         */
                        UpdateInstanceMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.UpdateInstanceMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.UpdateInstanceMetadata();
                            if (object.originalRequest != null) {
                                if (typeof object.originalRequest !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateInstanceMetadata.originalRequest: object expected");
                                message.originalRequest = $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest.fromObject(object.originalRequest);
                            }
                            if (object.requestTime != null) {
                                if (typeof object.requestTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateInstanceMetadata.requestTime: object expected");
                                message.requestTime = $root.google.protobuf.Timestamp.fromObject(object.requestTime);
                            }
                            if (object.finishTime != null) {
                                if (typeof object.finishTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateInstanceMetadata.finishTime: object expected");
                                message.finishTime = $root.google.protobuf.Timestamp.fromObject(object.finishTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateInstanceMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.UpdateInstanceMetadata} message UpdateInstanceMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateInstanceMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.originalRequest = null;
                                object.requestTime = null;
                                object.finishTime = null;
                            }
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                object.originalRequest = $root.google.bigtable.admin.v2.PartialUpdateInstanceRequest.toObject(message.originalRequest, options);
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                object.requestTime = $root.google.protobuf.Timestamp.toObject(message.requestTime, options);
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                object.finishTime = $root.google.protobuf.Timestamp.toObject(message.finishTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpdateInstanceMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.UpdateInstanceMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateInstanceMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateInstanceMetadata;
                    })();
    
                    v2.CreateClusterMetadata = (function() {
    
                        /**
                         * Properties of a CreateClusterMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateClusterMetadata
                         * @property {google.bigtable.admin.v2.ICreateClusterRequest|null} [originalRequest] CreateClusterMetadata originalRequest
                         * @property {google.protobuf.ITimestamp|null} [requestTime] CreateClusterMetadata requestTime
                         * @property {google.protobuf.ITimestamp|null} [finishTime] CreateClusterMetadata finishTime
                         */
    
                        /**
                         * Constructs a new CreateClusterMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateClusterMetadata.
                         * @implements ICreateClusterMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateClusterMetadata=} [properties] Properties to set
                         */
                        function CreateClusterMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateClusterMetadata originalRequest.
                         * @member {google.bigtable.admin.v2.ICreateClusterRequest|null|undefined} originalRequest
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @instance
                         */
                        CreateClusterMetadata.prototype.originalRequest = null;
    
                        /**
                         * CreateClusterMetadata requestTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} requestTime
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @instance
                         */
                        CreateClusterMetadata.prototype.requestTime = null;
    
                        /**
                         * CreateClusterMetadata finishTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} finishTime
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @instance
                         */
                        CreateClusterMetadata.prototype.finishTime = null;
    
                        /**
                         * Creates a new CreateClusterMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateClusterMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateClusterMetadata} CreateClusterMetadata instance
                         */
                        CreateClusterMetadata.create = function create(properties) {
                            return new CreateClusterMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified CreateClusterMetadata message. Does not implicitly {@link google.bigtable.admin.v2.CreateClusterMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateClusterMetadata} message CreateClusterMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateClusterMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                $root.google.bigtable.admin.v2.CreateClusterRequest.encode(message.originalRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                $root.google.protobuf.Timestamp.encode(message.requestTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                $root.google.protobuf.Timestamp.encode(message.finishTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateClusterMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateClusterMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateClusterMetadata} message CreateClusterMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateClusterMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateClusterMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateClusterMetadata} CreateClusterMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateClusterMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateClusterMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.originalRequest = $root.google.bigtable.admin.v2.CreateClusterRequest.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.requestTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.finishTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateClusterMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateClusterMetadata} CreateClusterMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateClusterMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateClusterMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateClusterMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest")) {
                                var error = $root.google.bigtable.admin.v2.CreateClusterRequest.verify(message.originalRequest);
                                if (error)
                                    return "originalRequest." + error;
                            }
                            if (message.requestTime != null && message.hasOwnProperty("requestTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.requestTime);
                                if (error)
                                    return "requestTime." + error;
                            }
                            if (message.finishTime != null && message.hasOwnProperty("finishTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.finishTime);
                                if (error)
                                    return "finishTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateClusterMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateClusterMetadata} CreateClusterMetadata
                         */
                        CreateClusterMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateClusterMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateClusterMetadata();
                            if (object.originalRequest != null) {
                                if (typeof object.originalRequest !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateClusterMetadata.originalRequest: object expected");
                                message.originalRequest = $root.google.bigtable.admin.v2.CreateClusterRequest.fromObject(object.originalRequest);
                            }
                            if (object.requestTime != null) {
                                if (typeof object.requestTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateClusterMetadata.requestTime: object expected");
                                message.requestTime = $root.google.protobuf.Timestamp.fromObject(object.requestTime);
                            }
                            if (object.finishTime != null) {
                                if (typeof object.finishTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateClusterMetadata.finishTime: object expected");
                                message.finishTime = $root.google.protobuf.Timestamp.fromObject(object.finishTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateClusterMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.CreateClusterMetadata} message CreateClusterMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateClusterMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.originalRequest = null;
                                object.requestTime = null;
                                object.finishTime = null;
                            }
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                object.originalRequest = $root.google.bigtable.admin.v2.CreateClusterRequest.toObject(message.originalRequest, options);
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                object.requestTime = $root.google.protobuf.Timestamp.toObject(message.requestTime, options);
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                object.finishTime = $root.google.protobuf.Timestamp.toObject(message.finishTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateClusterMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateClusterMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateClusterMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateClusterMetadata;
                    })();
    
                    v2.UpdateClusterMetadata = (function() {
    
                        /**
                         * Properties of an UpdateClusterMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface IUpdateClusterMetadata
                         * @property {google.bigtable.admin.v2.ICluster|null} [originalRequest] UpdateClusterMetadata originalRequest
                         * @property {google.protobuf.ITimestamp|null} [requestTime] UpdateClusterMetadata requestTime
                         * @property {google.protobuf.ITimestamp|null} [finishTime] UpdateClusterMetadata finishTime
                         */
    
                        /**
                         * Constructs a new UpdateClusterMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an UpdateClusterMetadata.
                         * @implements IUpdateClusterMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.IUpdateClusterMetadata=} [properties] Properties to set
                         */
                        function UpdateClusterMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateClusterMetadata originalRequest.
                         * @member {google.bigtable.admin.v2.ICluster|null|undefined} originalRequest
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @instance
                         */
                        UpdateClusterMetadata.prototype.originalRequest = null;
    
                        /**
                         * UpdateClusterMetadata requestTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} requestTime
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @instance
                         */
                        UpdateClusterMetadata.prototype.requestTime = null;
    
                        /**
                         * UpdateClusterMetadata finishTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} finishTime
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @instance
                         */
                        UpdateClusterMetadata.prototype.finishTime = null;
    
                        /**
                         * Creates a new UpdateClusterMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateClusterMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.UpdateClusterMetadata} UpdateClusterMetadata instance
                         */
                        UpdateClusterMetadata.create = function create(properties) {
                            return new UpdateClusterMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateClusterMetadata message. Does not implicitly {@link google.bigtable.admin.v2.UpdateClusterMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateClusterMetadata} message UpdateClusterMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateClusterMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                $root.google.bigtable.admin.v2.Cluster.encode(message.originalRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                $root.google.protobuf.Timestamp.encode(message.requestTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                $root.google.protobuf.Timestamp.encode(message.finishTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateClusterMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.UpdateClusterMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateClusterMetadata} message UpdateClusterMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateClusterMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateClusterMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.UpdateClusterMetadata} UpdateClusterMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateClusterMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.UpdateClusterMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.originalRequest = $root.google.bigtable.admin.v2.Cluster.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.requestTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.finishTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateClusterMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.UpdateClusterMetadata} UpdateClusterMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateClusterMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateClusterMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateClusterMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest")) {
                                var error = $root.google.bigtable.admin.v2.Cluster.verify(message.originalRequest);
                                if (error)
                                    return "originalRequest." + error;
                            }
                            if (message.requestTime != null && message.hasOwnProperty("requestTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.requestTime);
                                if (error)
                                    return "requestTime." + error;
                            }
                            if (message.finishTime != null && message.hasOwnProperty("finishTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.finishTime);
                                if (error)
                                    return "finishTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpdateClusterMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.UpdateClusterMetadata} UpdateClusterMetadata
                         */
                        UpdateClusterMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.UpdateClusterMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.UpdateClusterMetadata();
                            if (object.originalRequest != null) {
                                if (typeof object.originalRequest !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateClusterMetadata.originalRequest: object expected");
                                message.originalRequest = $root.google.bigtable.admin.v2.Cluster.fromObject(object.originalRequest);
                            }
                            if (object.requestTime != null) {
                                if (typeof object.requestTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateClusterMetadata.requestTime: object expected");
                                message.requestTime = $root.google.protobuf.Timestamp.fromObject(object.requestTime);
                            }
                            if (object.finishTime != null) {
                                if (typeof object.finishTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateClusterMetadata.finishTime: object expected");
                                message.finishTime = $root.google.protobuf.Timestamp.fromObject(object.finishTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateClusterMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.UpdateClusterMetadata} message UpdateClusterMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateClusterMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.originalRequest = null;
                                object.requestTime = null;
                                object.finishTime = null;
                            }
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                object.originalRequest = $root.google.bigtable.admin.v2.Cluster.toObject(message.originalRequest, options);
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                object.requestTime = $root.google.protobuf.Timestamp.toObject(message.requestTime, options);
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                object.finishTime = $root.google.protobuf.Timestamp.toObject(message.finishTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpdateClusterMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.UpdateClusterMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateClusterMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateClusterMetadata;
                    })();
    
                    v2.CreateAppProfileRequest = (function() {
    
                        /**
                         * Properties of a CreateAppProfileRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateAppProfileRequest
                         * @property {string|null} [parent] CreateAppProfileRequest parent
                         * @property {string|null} [appProfileId] CreateAppProfileRequest appProfileId
                         * @property {google.bigtable.admin.v2.IAppProfile|null} [appProfile] CreateAppProfileRequest appProfile
                         * @property {boolean|null} [ignoreWarnings] CreateAppProfileRequest ignoreWarnings
                         */
    
                        /**
                         * Constructs a new CreateAppProfileRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateAppProfileRequest.
                         * @implements ICreateAppProfileRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateAppProfileRequest=} [properties] Properties to set
                         */
                        function CreateAppProfileRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateAppProfileRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @instance
                         */
                        CreateAppProfileRequest.prototype.parent = "";
    
                        /**
                         * CreateAppProfileRequest appProfileId.
                         * @member {string} appProfileId
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @instance
                         */
                        CreateAppProfileRequest.prototype.appProfileId = "";
    
                        /**
                         * CreateAppProfileRequest appProfile.
                         * @member {google.bigtable.admin.v2.IAppProfile|null|undefined} appProfile
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @instance
                         */
                        CreateAppProfileRequest.prototype.appProfile = null;
    
                        /**
                         * CreateAppProfileRequest ignoreWarnings.
                         * @member {boolean} ignoreWarnings
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @instance
                         */
                        CreateAppProfileRequest.prototype.ignoreWarnings = false;
    
                        /**
                         * Creates a new CreateAppProfileRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateAppProfileRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateAppProfileRequest} CreateAppProfileRequest instance
                         */
                        CreateAppProfileRequest.create = function create(properties) {
                            return new CreateAppProfileRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateAppProfileRequest message. Does not implicitly {@link google.bigtable.admin.v2.CreateAppProfileRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateAppProfileRequest} message CreateAppProfileRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateAppProfileRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.appProfileId);
                            if (message.appProfile != null && message.hasOwnProperty("appProfile"))
                                $root.google.bigtable.admin.v2.AppProfile.encode(message.appProfile, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.ignoreWarnings);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateAppProfileRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateAppProfileRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateAppProfileRequest} message CreateAppProfileRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateAppProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateAppProfileRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateAppProfileRequest} CreateAppProfileRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateAppProfileRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateAppProfileRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.appProfileId = reader.string();
                                    break;
                                case 3:
                                    message.appProfile = $root.google.bigtable.admin.v2.AppProfile.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.ignoreWarnings = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateAppProfileRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateAppProfileRequest} CreateAppProfileRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateAppProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateAppProfileRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateAppProfileRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                                if (!$util.isString(message.appProfileId))
                                    return "appProfileId: string expected";
                            if (message.appProfile != null && message.hasOwnProperty("appProfile")) {
                                var error = $root.google.bigtable.admin.v2.AppProfile.verify(message.appProfile);
                                if (error)
                                    return "appProfile." + error;
                            }
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                if (typeof message.ignoreWarnings !== "boolean")
                                    return "ignoreWarnings: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateAppProfileRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateAppProfileRequest} CreateAppProfileRequest
                         */
                        CreateAppProfileRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateAppProfileRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateAppProfileRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.appProfileId != null)
                                message.appProfileId = String(object.appProfileId);
                            if (object.appProfile != null) {
                                if (typeof object.appProfile !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateAppProfileRequest.appProfile: object expected");
                                message.appProfile = $root.google.bigtable.admin.v2.AppProfile.fromObject(object.appProfile);
                            }
                            if (object.ignoreWarnings != null)
                                message.ignoreWarnings = Boolean(object.ignoreWarnings);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateAppProfileRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.CreateAppProfileRequest} message CreateAppProfileRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateAppProfileRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.appProfileId = "";
                                object.appProfile = null;
                                object.ignoreWarnings = false;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                                object.appProfileId = message.appProfileId;
                            if (message.appProfile != null && message.hasOwnProperty("appProfile"))
                                object.appProfile = $root.google.bigtable.admin.v2.AppProfile.toObject(message.appProfile, options);
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                object.ignoreWarnings = message.ignoreWarnings;
                            return object;
                        };
    
                        /**
                         * Converts this CreateAppProfileRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateAppProfileRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateAppProfileRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateAppProfileRequest;
                    })();
    
                    v2.GetAppProfileRequest = (function() {
    
                        /**
                         * Properties of a GetAppProfileRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGetAppProfileRequest
                         * @property {string|null} [name] GetAppProfileRequest name
                         */
    
                        /**
                         * Constructs a new GetAppProfileRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GetAppProfileRequest.
                         * @implements IGetAppProfileRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGetAppProfileRequest=} [properties] Properties to set
                         */
                        function GetAppProfileRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetAppProfileRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @instance
                         */
                        GetAppProfileRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetAppProfileRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetAppProfileRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GetAppProfileRequest} GetAppProfileRequest instance
                         */
                        GetAppProfileRequest.create = function create(properties) {
                            return new GetAppProfileRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetAppProfileRequest message. Does not implicitly {@link google.bigtable.admin.v2.GetAppProfileRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetAppProfileRequest} message GetAppProfileRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetAppProfileRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetAppProfileRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GetAppProfileRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetAppProfileRequest} message GetAppProfileRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetAppProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetAppProfileRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GetAppProfileRequest} GetAppProfileRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetAppProfileRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GetAppProfileRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetAppProfileRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GetAppProfileRequest} GetAppProfileRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetAppProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetAppProfileRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetAppProfileRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetAppProfileRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GetAppProfileRequest} GetAppProfileRequest
                         */
                        GetAppProfileRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GetAppProfileRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GetAppProfileRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetAppProfileRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.GetAppProfileRequest} message GetAppProfileRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetAppProfileRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetAppProfileRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GetAppProfileRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetAppProfileRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetAppProfileRequest;
                    })();
    
                    v2.ListAppProfilesRequest = (function() {
    
                        /**
                         * Properties of a ListAppProfilesRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListAppProfilesRequest
                         * @property {string|null} [parent] ListAppProfilesRequest parent
                         * @property {number|null} [pageSize] ListAppProfilesRequest pageSize
                         * @property {string|null} [pageToken] ListAppProfilesRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListAppProfilesRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListAppProfilesRequest.
                         * @implements IListAppProfilesRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListAppProfilesRequest=} [properties] Properties to set
                         */
                        function ListAppProfilesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListAppProfilesRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @instance
                         */
                        ListAppProfilesRequest.prototype.parent = "";
    
                        /**
                         * ListAppProfilesRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @instance
                         */
                        ListAppProfilesRequest.prototype.pageSize = 0;
    
                        /**
                         * ListAppProfilesRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @instance
                         */
                        ListAppProfilesRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListAppProfilesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListAppProfilesRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListAppProfilesRequest} ListAppProfilesRequest instance
                         */
                        ListAppProfilesRequest.create = function create(properties) {
                            return new ListAppProfilesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListAppProfilesRequest message. Does not implicitly {@link google.bigtable.admin.v2.ListAppProfilesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListAppProfilesRequest} message ListAppProfilesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListAppProfilesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListAppProfilesRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListAppProfilesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListAppProfilesRequest} message ListAppProfilesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListAppProfilesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListAppProfilesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListAppProfilesRequest} ListAppProfilesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListAppProfilesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListAppProfilesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 3:
                                    message.pageSize = reader.int32();
                                    break;
                                case 2:
                                    message.pageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListAppProfilesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListAppProfilesRequest} ListAppProfilesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListAppProfilesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListAppProfilesRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListAppProfilesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListAppProfilesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListAppProfilesRequest} ListAppProfilesRequest
                         */
                        ListAppProfilesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListAppProfilesRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListAppProfilesRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListAppProfilesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ListAppProfilesRequest} message ListAppProfilesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListAppProfilesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageToken = "";
                                object.pageSize = 0;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            return object;
                        };
    
                        /**
                         * Converts this ListAppProfilesRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListAppProfilesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListAppProfilesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListAppProfilesRequest;
                    })();
    
                    v2.ListAppProfilesResponse = (function() {
    
                        /**
                         * Properties of a ListAppProfilesResponse.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListAppProfilesResponse
                         * @property {Array.<google.bigtable.admin.v2.IAppProfile>|null} [appProfiles] ListAppProfilesResponse appProfiles
                         * @property {string|null} [nextPageToken] ListAppProfilesResponse nextPageToken
                         * @property {Array.<string>|null} [failedLocations] ListAppProfilesResponse failedLocations
                         */
    
                        /**
                         * Constructs a new ListAppProfilesResponse.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListAppProfilesResponse.
                         * @implements IListAppProfilesResponse
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListAppProfilesResponse=} [properties] Properties to set
                         */
                        function ListAppProfilesResponse(properties) {
                            this.appProfiles = [];
                            this.failedLocations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListAppProfilesResponse appProfiles.
                         * @member {Array.<google.bigtable.admin.v2.IAppProfile>} appProfiles
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @instance
                         */
                        ListAppProfilesResponse.prototype.appProfiles = $util.emptyArray;
    
                        /**
                         * ListAppProfilesResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @instance
                         */
                        ListAppProfilesResponse.prototype.nextPageToken = "";
    
                        /**
                         * ListAppProfilesResponse failedLocations.
                         * @member {Array.<string>} failedLocations
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @instance
                         */
                        ListAppProfilesResponse.prototype.failedLocations = $util.emptyArray;
    
                        /**
                         * Creates a new ListAppProfilesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListAppProfilesResponse=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListAppProfilesResponse} ListAppProfilesResponse instance
                         */
                        ListAppProfilesResponse.create = function create(properties) {
                            return new ListAppProfilesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListAppProfilesResponse message. Does not implicitly {@link google.bigtable.admin.v2.ListAppProfilesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListAppProfilesResponse} message ListAppProfilesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListAppProfilesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.appProfiles != null && message.appProfiles.length)
                                for (var i = 0; i < message.appProfiles.length; ++i)
                                    $root.google.bigtable.admin.v2.AppProfile.encode(message.appProfiles[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            if (message.failedLocations != null && message.failedLocations.length)
                                for (var i = 0; i < message.failedLocations.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.failedLocations[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListAppProfilesResponse message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListAppProfilesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListAppProfilesResponse} message ListAppProfilesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListAppProfilesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListAppProfilesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListAppProfilesResponse} ListAppProfilesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListAppProfilesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListAppProfilesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.appProfiles && message.appProfiles.length))
                                        message.appProfiles = [];
                                    message.appProfiles.push($root.google.bigtable.admin.v2.AppProfile.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                case 3:
                                    if (!(message.failedLocations && message.failedLocations.length))
                                        message.failedLocations = [];
                                    message.failedLocations.push(reader.string());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListAppProfilesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListAppProfilesResponse} ListAppProfilesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListAppProfilesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListAppProfilesResponse message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListAppProfilesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.appProfiles != null && message.hasOwnProperty("appProfiles")) {
                                if (!Array.isArray(message.appProfiles))
                                    return "appProfiles: array expected";
                                for (var i = 0; i < message.appProfiles.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.AppProfile.verify(message.appProfiles[i]);
                                    if (error)
                                        return "appProfiles." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            if (message.failedLocations != null && message.hasOwnProperty("failedLocations")) {
                                if (!Array.isArray(message.failedLocations))
                                    return "failedLocations: array expected";
                                for (var i = 0; i < message.failedLocations.length; ++i)
                                    if (!$util.isString(message.failedLocations[i]))
                                        return "failedLocations: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ListAppProfilesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListAppProfilesResponse} ListAppProfilesResponse
                         */
                        ListAppProfilesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListAppProfilesResponse)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListAppProfilesResponse();
                            if (object.appProfiles) {
                                if (!Array.isArray(object.appProfiles))
                                    throw TypeError(".google.bigtable.admin.v2.ListAppProfilesResponse.appProfiles: array expected");
                                message.appProfiles = [];
                                for (var i = 0; i < object.appProfiles.length; ++i) {
                                    if (typeof object.appProfiles[i] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ListAppProfilesResponse.appProfiles: object expected");
                                    message.appProfiles[i] = $root.google.bigtable.admin.v2.AppProfile.fromObject(object.appProfiles[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            if (object.failedLocations) {
                                if (!Array.isArray(object.failedLocations))
                                    throw TypeError(".google.bigtable.admin.v2.ListAppProfilesResponse.failedLocations: array expected");
                                message.failedLocations = [];
                                for (var i = 0; i < object.failedLocations.length; ++i)
                                    message.failedLocations[i] = String(object.failedLocations[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListAppProfilesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ListAppProfilesResponse} message ListAppProfilesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListAppProfilesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.appProfiles = [];
                                object.failedLocations = [];
                            }
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.appProfiles && message.appProfiles.length) {
                                object.appProfiles = [];
                                for (var j = 0; j < message.appProfiles.length; ++j)
                                    object.appProfiles[j] = $root.google.bigtable.admin.v2.AppProfile.toObject(message.appProfiles[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            if (message.failedLocations && message.failedLocations.length) {
                                object.failedLocations = [];
                                for (var j = 0; j < message.failedLocations.length; ++j)
                                    object.failedLocations[j] = message.failedLocations[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ListAppProfilesResponse to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListAppProfilesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListAppProfilesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListAppProfilesResponse;
                    })();
    
                    v2.UpdateAppProfileRequest = (function() {
    
                        /**
                         * Properties of an UpdateAppProfileRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IUpdateAppProfileRequest
                         * @property {google.bigtable.admin.v2.IAppProfile|null} [appProfile] UpdateAppProfileRequest appProfile
                         * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateAppProfileRequest updateMask
                         * @property {boolean|null} [ignoreWarnings] UpdateAppProfileRequest ignoreWarnings
                         */
    
                        /**
                         * Constructs a new UpdateAppProfileRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an UpdateAppProfileRequest.
                         * @implements IUpdateAppProfileRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileRequest=} [properties] Properties to set
                         */
                        function UpdateAppProfileRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateAppProfileRequest appProfile.
                         * @member {google.bigtable.admin.v2.IAppProfile|null|undefined} appProfile
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @instance
                         */
                        UpdateAppProfileRequest.prototype.appProfile = null;
    
                        /**
                         * UpdateAppProfileRequest updateMask.
                         * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @instance
                         */
                        UpdateAppProfileRequest.prototype.updateMask = null;
    
                        /**
                         * UpdateAppProfileRequest ignoreWarnings.
                         * @member {boolean} ignoreWarnings
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @instance
                         */
                        UpdateAppProfileRequest.prototype.ignoreWarnings = false;
    
                        /**
                         * Creates a new UpdateAppProfileRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.UpdateAppProfileRequest} UpdateAppProfileRequest instance
                         */
                        UpdateAppProfileRequest.create = function create(properties) {
                            return new UpdateAppProfileRequest(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateAppProfileRequest message. Does not implicitly {@link google.bigtable.admin.v2.UpdateAppProfileRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileRequest} message UpdateAppProfileRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateAppProfileRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.appProfile != null && message.hasOwnProperty("appProfile"))
                                $root.google.bigtable.admin.v2.AppProfile.encode(message.appProfile, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ignoreWarnings);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateAppProfileRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.UpdateAppProfileRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileRequest} message UpdateAppProfileRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateAppProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateAppProfileRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.UpdateAppProfileRequest} UpdateAppProfileRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateAppProfileRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.UpdateAppProfileRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.appProfile = $root.google.bigtable.admin.v2.AppProfile.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.ignoreWarnings = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateAppProfileRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.UpdateAppProfileRequest} UpdateAppProfileRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateAppProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateAppProfileRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateAppProfileRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.appProfile != null && message.hasOwnProperty("appProfile")) {
                                var error = $root.google.bigtable.admin.v2.AppProfile.verify(message.appProfile);
                                if (error)
                                    return "appProfile." + error;
                            }
                            if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                if (error)
                                    return "updateMask." + error;
                            }
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                if (typeof message.ignoreWarnings !== "boolean")
                                    return "ignoreWarnings: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates an UpdateAppProfileRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.UpdateAppProfileRequest} UpdateAppProfileRequest
                         */
                        UpdateAppProfileRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.UpdateAppProfileRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.UpdateAppProfileRequest();
                            if (object.appProfile != null) {
                                if (typeof object.appProfile !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateAppProfileRequest.appProfile: object expected");
                                message.appProfile = $root.google.bigtable.admin.v2.AppProfile.fromObject(object.appProfile);
                            }
                            if (object.updateMask != null) {
                                if (typeof object.updateMask !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateAppProfileRequest.updateMask: object expected");
                                message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                            }
                            if (object.ignoreWarnings != null)
                                message.ignoreWarnings = Boolean(object.ignoreWarnings);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateAppProfileRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.UpdateAppProfileRequest} message UpdateAppProfileRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateAppProfileRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.appProfile = null;
                                object.updateMask = null;
                                object.ignoreWarnings = false;
                            }
                            if (message.appProfile != null && message.hasOwnProperty("appProfile"))
                                object.appProfile = $root.google.bigtable.admin.v2.AppProfile.toObject(message.appProfile, options);
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                object.ignoreWarnings = message.ignoreWarnings;
                            return object;
                        };
    
                        /**
                         * Converts this UpdateAppProfileRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateAppProfileRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateAppProfileRequest;
                    })();
    
                    v2.DeleteAppProfileRequest = (function() {
    
                        /**
                         * Properties of a DeleteAppProfileRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IDeleteAppProfileRequest
                         * @property {string|null} [name] DeleteAppProfileRequest name
                         * @property {boolean|null} [ignoreWarnings] DeleteAppProfileRequest ignoreWarnings
                         */
    
                        /**
                         * Constructs a new DeleteAppProfileRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a DeleteAppProfileRequest.
                         * @implements IDeleteAppProfileRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IDeleteAppProfileRequest=} [properties] Properties to set
                         */
                        function DeleteAppProfileRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteAppProfileRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @instance
                         */
                        DeleteAppProfileRequest.prototype.name = "";
    
                        /**
                         * DeleteAppProfileRequest ignoreWarnings.
                         * @member {boolean} ignoreWarnings
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @instance
                         */
                        DeleteAppProfileRequest.prototype.ignoreWarnings = false;
    
                        /**
                         * Creates a new DeleteAppProfileRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteAppProfileRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.DeleteAppProfileRequest} DeleteAppProfileRequest instance
                         */
                        DeleteAppProfileRequest.create = function create(properties) {
                            return new DeleteAppProfileRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteAppProfileRequest message. Does not implicitly {@link google.bigtable.admin.v2.DeleteAppProfileRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteAppProfileRequest} message DeleteAppProfileRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteAppProfileRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.ignoreWarnings);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteAppProfileRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.DeleteAppProfileRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteAppProfileRequest} message DeleteAppProfileRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteAppProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteAppProfileRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.DeleteAppProfileRequest} DeleteAppProfileRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteAppProfileRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.DeleteAppProfileRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.ignoreWarnings = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteAppProfileRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.DeleteAppProfileRequest} DeleteAppProfileRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteAppProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteAppProfileRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteAppProfileRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                if (typeof message.ignoreWarnings !== "boolean")
                                    return "ignoreWarnings: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteAppProfileRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.DeleteAppProfileRequest} DeleteAppProfileRequest
                         */
                        DeleteAppProfileRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.DeleteAppProfileRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.DeleteAppProfileRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.ignoreWarnings != null)
                                message.ignoreWarnings = Boolean(object.ignoreWarnings);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteAppProfileRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @static
                         * @param {google.bigtable.admin.v2.DeleteAppProfileRequest} message DeleteAppProfileRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteAppProfileRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.ignoreWarnings = false;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.ignoreWarnings != null && message.hasOwnProperty("ignoreWarnings"))
                                object.ignoreWarnings = message.ignoreWarnings;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteAppProfileRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.DeleteAppProfileRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteAppProfileRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteAppProfileRequest;
                    })();
    
                    v2.UpdateAppProfileMetadata = (function() {
    
                        /**
                         * Properties of an UpdateAppProfileMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface IUpdateAppProfileMetadata
                         */
    
                        /**
                         * Constructs a new UpdateAppProfileMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an UpdateAppProfileMetadata.
                         * @implements IUpdateAppProfileMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileMetadata=} [properties] Properties to set
                         */
                        function UpdateAppProfileMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new UpdateAppProfileMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.UpdateAppProfileMetadata} UpdateAppProfileMetadata instance
                         */
                        UpdateAppProfileMetadata.create = function create(properties) {
                            return new UpdateAppProfileMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateAppProfileMetadata message. Does not implicitly {@link google.bigtable.admin.v2.UpdateAppProfileMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileMetadata} message UpdateAppProfileMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateAppProfileMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateAppProfileMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.UpdateAppProfileMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateAppProfileMetadata} message UpdateAppProfileMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateAppProfileMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateAppProfileMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.UpdateAppProfileMetadata} UpdateAppProfileMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateAppProfileMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.UpdateAppProfileMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateAppProfileMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.UpdateAppProfileMetadata} UpdateAppProfileMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateAppProfileMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateAppProfileMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateAppProfileMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates an UpdateAppProfileMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.UpdateAppProfileMetadata} UpdateAppProfileMetadata
                         */
                        UpdateAppProfileMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.UpdateAppProfileMetadata)
                                return object;
                            return new $root.google.bigtable.admin.v2.UpdateAppProfileMetadata();
                        };
    
                        /**
                         * Creates a plain object from an UpdateAppProfileMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.UpdateAppProfileMetadata} message UpdateAppProfileMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateAppProfileMetadata.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this UpdateAppProfileMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.UpdateAppProfileMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateAppProfileMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateAppProfileMetadata;
                    })();
    
                    v2.Instance = (function() {
    
                        /**
                         * Properties of an Instance.
                         * @memberof google.bigtable.admin.v2
                         * @interface IInstance
                         * @property {string|null} [name] Instance name
                         * @property {string|null} [displayName] Instance displayName
                         * @property {google.bigtable.admin.v2.Instance.State|null} [state] Instance state
                         * @property {google.bigtable.admin.v2.Instance.Type|null} [type] Instance type
                         * @property {Object.<string,string>|null} [labels] Instance labels
                         */
    
                        /**
                         * Constructs a new Instance.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an Instance.
                         * @implements IInstance
                         * @constructor
                         * @param {google.bigtable.admin.v2.IInstance=} [properties] Properties to set
                         */
                        function Instance(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Instance name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.Instance
                         * @instance
                         */
                        Instance.prototype.name = "";
    
                        /**
                         * Instance displayName.
                         * @member {string} displayName
                         * @memberof google.bigtable.admin.v2.Instance
                         * @instance
                         */
                        Instance.prototype.displayName = "";
    
                        /**
                         * Instance state.
                         * @member {google.bigtable.admin.v2.Instance.State} state
                         * @memberof google.bigtable.admin.v2.Instance
                         * @instance
                         */
                        Instance.prototype.state = 0;
    
                        /**
                         * Instance type.
                         * @member {google.bigtable.admin.v2.Instance.Type} type
                         * @memberof google.bigtable.admin.v2.Instance
                         * @instance
                         */
                        Instance.prototype.type = 0;
    
                        /**
                         * Instance labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.bigtable.admin.v2.Instance
                         * @instance
                         */
                        Instance.prototype.labels = $util.emptyObject;
    
                        /**
                         * Creates a new Instance instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.Instance
                         * @static
                         * @param {google.bigtable.admin.v2.IInstance=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.Instance} Instance instance
                         */
                        Instance.create = function create(properties) {
                            return new Instance(properties);
                        };
    
                        /**
                         * Encodes the specified Instance message. Does not implicitly {@link google.bigtable.admin.v2.Instance.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.Instance
                         * @static
                         * @param {google.bigtable.admin.v2.IInstance} message Instance message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Instance.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
                            if (message.labels != null && message.hasOwnProperty("labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Instance message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.Instance.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.Instance
                         * @static
                         * @param {google.bigtable.admin.v2.IInstance} message Instance message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Instance.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Instance message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.Instance
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.Instance} Instance
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Instance.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.Instance(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.displayName = reader.string();
                                    break;
                                case 3:
                                    message.state = reader.int32();
                                    break;
                                case 4:
                                    message.type = reader.int32();
                                    break;
                                case 5:
                                    reader.skip().pos++;
                                    if (message.labels === $util.emptyObject)
                                        message.labels = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.labels[key] = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Instance message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.Instance
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.Instance} Instance
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Instance.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Instance message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.Instance
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Instance.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Instance message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.Instance
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.Instance} Instance
                         */
                        Instance.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.Instance)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.Instance();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            switch (object.state) {
                            case "STATE_NOT_KNOWN":
                            case 0:
                                message.state = 0;
                                break;
                            case "READY":
                            case 1:
                                message.state = 1;
                                break;
                            case "CREATING":
                            case 2:
                                message.state = 2;
                                break;
                            }
                            switch (object.type) {
                            case "TYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "PRODUCTION":
                            case 1:
                                message.type = 1;
                                break;
                            case "DEVELOPMENT":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Instance.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Instance message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.Instance
                         * @static
                         * @param {google.bigtable.admin.v2.Instance} message Instance
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Instance.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.name = "";
                                object.displayName = "";
                                object.state = options.enums === String ? "STATE_NOT_KNOWN" : 0;
                                object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.bigtable.admin.v2.Instance.State[message.state] : message.state;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.bigtable.admin.v2.Instance.Type[message.type] : message.type;
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Instance to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.Instance
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Instance.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * State enum.
                         * @name google.bigtable.admin.v2.Instance.State
                         * @enum {string}
                         * @property {number} STATE_NOT_KNOWN=0 STATE_NOT_KNOWN value
                         * @property {number} READY=1 READY value
                         * @property {number} CREATING=2 CREATING value
                         */
                        Instance.State = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATE_NOT_KNOWN"] = 0;
                            values[valuesById[1] = "READY"] = 1;
                            values[valuesById[2] = "CREATING"] = 2;
                            return values;
                        })();
    
                        /**
                         * Type enum.
                         * @name google.bigtable.admin.v2.Instance.Type
                         * @enum {string}
                         * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                         * @property {number} PRODUCTION=1 PRODUCTION value
                         * @property {number} DEVELOPMENT=2 DEVELOPMENT value
                         */
                        Instance.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PRODUCTION"] = 1;
                            values[valuesById[2] = "DEVELOPMENT"] = 2;
                            return values;
                        })();
    
                        return Instance;
                    })();
    
                    v2.Cluster = (function() {
    
                        /**
                         * Properties of a Cluster.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICluster
                         * @property {string|null} [name] Cluster name
                         * @property {string|null} [location] Cluster location
                         * @property {google.bigtable.admin.v2.Cluster.State|null} [state] Cluster state
                         * @property {number|null} [serveNodes] Cluster serveNodes
                         * @property {google.bigtable.admin.v2.StorageType|null} [defaultStorageType] Cluster defaultStorageType
                         */
    
                        /**
                         * Constructs a new Cluster.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a Cluster.
                         * @implements ICluster
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICluster=} [properties] Properties to set
                         */
                        function Cluster(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Cluster name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @instance
                         */
                        Cluster.prototype.name = "";
    
                        /**
                         * Cluster location.
                         * @member {string} location
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @instance
                         */
                        Cluster.prototype.location = "";
    
                        /**
                         * Cluster state.
                         * @member {google.bigtable.admin.v2.Cluster.State} state
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @instance
                         */
                        Cluster.prototype.state = 0;
    
                        /**
                         * Cluster serveNodes.
                         * @member {number} serveNodes
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @instance
                         */
                        Cluster.prototype.serveNodes = 0;
    
                        /**
                         * Cluster defaultStorageType.
                         * @member {google.bigtable.admin.v2.StorageType} defaultStorageType
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @instance
                         */
                        Cluster.prototype.defaultStorageType = 0;
    
                        /**
                         * Creates a new Cluster instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @static
                         * @param {google.bigtable.admin.v2.ICluster=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.Cluster} Cluster instance
                         */
                        Cluster.create = function create(properties) {
                            return new Cluster(properties);
                        };
    
                        /**
                         * Encodes the specified Cluster message. Does not implicitly {@link google.bigtable.admin.v2.Cluster.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @static
                         * @param {google.bigtable.admin.v2.ICluster} message Cluster message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Cluster.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.location != null && message.hasOwnProperty("location"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.location);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                            if (message.serveNodes != null && message.hasOwnProperty("serveNodes"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.serveNodes);
                            if (message.defaultStorageType != null && message.hasOwnProperty("defaultStorageType"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.defaultStorageType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Cluster message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.Cluster.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @static
                         * @param {google.bigtable.admin.v2.ICluster} message Cluster message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Cluster.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Cluster message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.Cluster} Cluster
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Cluster.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.Cluster();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.location = reader.string();
                                    break;
                                case 3:
                                    message.state = reader.int32();
                                    break;
                                case 4:
                                    message.serveNodes = reader.int32();
                                    break;
                                case 5:
                                    message.defaultStorageType = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Cluster message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.Cluster} Cluster
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Cluster.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Cluster message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Cluster.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.location != null && message.hasOwnProperty("location"))
                                if (!$util.isString(message.location))
                                    return "location: string expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.serveNodes != null && message.hasOwnProperty("serveNodes"))
                                if (!$util.isInteger(message.serveNodes))
                                    return "serveNodes: integer expected";
                            if (message.defaultStorageType != null && message.hasOwnProperty("defaultStorageType"))
                                switch (message.defaultStorageType) {
                                default:
                                    return "defaultStorageType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a Cluster message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.Cluster} Cluster
                         */
                        Cluster.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.Cluster)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.Cluster();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.location != null)
                                message.location = String(object.location);
                            switch (object.state) {
                            case "STATE_NOT_KNOWN":
                            case 0:
                                message.state = 0;
                                break;
                            case "READY":
                            case 1:
                                message.state = 1;
                                break;
                            case "CREATING":
                            case 2:
                                message.state = 2;
                                break;
                            case "RESIZING":
                            case 3:
                                message.state = 3;
                                break;
                            case "DISABLED":
                            case 4:
                                message.state = 4;
                                break;
                            }
                            if (object.serveNodes != null)
                                message.serveNodes = object.serveNodes | 0;
                            switch (object.defaultStorageType) {
                            case "STORAGE_TYPE_UNSPECIFIED":
                            case 0:
                                message.defaultStorageType = 0;
                                break;
                            case "SSD":
                            case 1:
                                message.defaultStorageType = 1;
                                break;
                            case "HDD":
                            case 2:
                                message.defaultStorageType = 2;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Cluster message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @static
                         * @param {google.bigtable.admin.v2.Cluster} message Cluster
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Cluster.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.location = "";
                                object.state = options.enums === String ? "STATE_NOT_KNOWN" : 0;
                                object.serveNodes = 0;
                                object.defaultStorageType = options.enums === String ? "STORAGE_TYPE_UNSPECIFIED" : 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.location != null && message.hasOwnProperty("location"))
                                object.location = message.location;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.bigtable.admin.v2.Cluster.State[message.state] : message.state;
                            if (message.serveNodes != null && message.hasOwnProperty("serveNodes"))
                                object.serveNodes = message.serveNodes;
                            if (message.defaultStorageType != null && message.hasOwnProperty("defaultStorageType"))
                                object.defaultStorageType = options.enums === String ? $root.google.bigtable.admin.v2.StorageType[message.defaultStorageType] : message.defaultStorageType;
                            return object;
                        };
    
                        /**
                         * Converts this Cluster to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.Cluster
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Cluster.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * State enum.
                         * @name google.bigtable.admin.v2.Cluster.State
                         * @enum {string}
                         * @property {number} STATE_NOT_KNOWN=0 STATE_NOT_KNOWN value
                         * @property {number} READY=1 READY value
                         * @property {number} CREATING=2 CREATING value
                         * @property {number} RESIZING=3 RESIZING value
                         * @property {number} DISABLED=4 DISABLED value
                         */
                        Cluster.State = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATE_NOT_KNOWN"] = 0;
                            values[valuesById[1] = "READY"] = 1;
                            values[valuesById[2] = "CREATING"] = 2;
                            values[valuesById[3] = "RESIZING"] = 3;
                            values[valuesById[4] = "DISABLED"] = 4;
                            return values;
                        })();
    
                        return Cluster;
                    })();
    
                    v2.AppProfile = (function() {
    
                        /**
                         * Properties of an AppProfile.
                         * @memberof google.bigtable.admin.v2
                         * @interface IAppProfile
                         * @property {string|null} [name] AppProfile name
                         * @property {string|null} [etag] AppProfile etag
                         * @property {string|null} [description] AppProfile description
                         * @property {google.bigtable.admin.v2.AppProfile.IMultiClusterRoutingUseAny|null} [multiClusterRoutingUseAny] AppProfile multiClusterRoutingUseAny
                         * @property {google.bigtable.admin.v2.AppProfile.ISingleClusterRouting|null} [singleClusterRouting] AppProfile singleClusterRouting
                         */
    
                        /**
                         * Constructs a new AppProfile.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an AppProfile.
                         * @implements IAppProfile
                         * @constructor
                         * @param {google.bigtable.admin.v2.IAppProfile=} [properties] Properties to set
                         */
                        function AppProfile(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AppProfile name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @instance
                         */
                        AppProfile.prototype.name = "";
    
                        /**
                         * AppProfile etag.
                         * @member {string} etag
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @instance
                         */
                        AppProfile.prototype.etag = "";
    
                        /**
                         * AppProfile description.
                         * @member {string} description
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @instance
                         */
                        AppProfile.prototype.description = "";
    
                        /**
                         * AppProfile multiClusterRoutingUseAny.
                         * @member {google.bigtable.admin.v2.AppProfile.IMultiClusterRoutingUseAny|null|undefined} multiClusterRoutingUseAny
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @instance
                         */
                        AppProfile.prototype.multiClusterRoutingUseAny = null;
    
                        /**
                         * AppProfile singleClusterRouting.
                         * @member {google.bigtable.admin.v2.AppProfile.ISingleClusterRouting|null|undefined} singleClusterRouting
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @instance
                         */
                        AppProfile.prototype.singleClusterRouting = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * AppProfile routingPolicy.
                         * @member {"multiClusterRoutingUseAny"|"singleClusterRouting"|undefined} routingPolicy
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @instance
                         */
                        Object.defineProperty(AppProfile.prototype, "routingPolicy", {
                            get: $util.oneOfGetter($oneOfFields = ["multiClusterRoutingUseAny", "singleClusterRouting"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new AppProfile instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @static
                         * @param {google.bigtable.admin.v2.IAppProfile=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.AppProfile} AppProfile instance
                         */
                        AppProfile.create = function create(properties) {
                            return new AppProfile(properties);
                        };
    
                        /**
                         * Encodes the specified AppProfile message. Does not implicitly {@link google.bigtable.admin.v2.AppProfile.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @static
                         * @param {google.bigtable.admin.v2.IAppProfile} message AppProfile message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AppProfile.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.etag != null && message.hasOwnProperty("etag"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.etag);
                            if (message.description != null && message.hasOwnProperty("description"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                            if (message.multiClusterRoutingUseAny != null && message.hasOwnProperty("multiClusterRoutingUseAny"))
                                $root.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.encode(message.multiClusterRoutingUseAny, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.singleClusterRouting != null && message.hasOwnProperty("singleClusterRouting"))
                                $root.google.bigtable.admin.v2.AppProfile.SingleClusterRouting.encode(message.singleClusterRouting, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AppProfile message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.AppProfile.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @static
                         * @param {google.bigtable.admin.v2.IAppProfile} message AppProfile message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AppProfile.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AppProfile message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.AppProfile} AppProfile
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AppProfile.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.AppProfile();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.etag = reader.string();
                                    break;
                                case 3:
                                    message.description = reader.string();
                                    break;
                                case 5:
                                    message.multiClusterRoutingUseAny = $root.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.singleClusterRouting = $root.google.bigtable.admin.v2.AppProfile.SingleClusterRouting.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AppProfile message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.AppProfile} AppProfile
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AppProfile.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AppProfile message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AppProfile.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.etag != null && message.hasOwnProperty("etag"))
                                if (!$util.isString(message.etag))
                                    return "etag: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.multiClusterRoutingUseAny != null && message.hasOwnProperty("multiClusterRoutingUseAny")) {
                                properties.routingPolicy = 1;
                                {
                                    var error = $root.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.verify(message.multiClusterRoutingUseAny);
                                    if (error)
                                        return "multiClusterRoutingUseAny." + error;
                                }
                            }
                            if (message.singleClusterRouting != null && message.hasOwnProperty("singleClusterRouting")) {
                                if (properties.routingPolicy === 1)
                                    return "routingPolicy: multiple values";
                                properties.routingPolicy = 1;
                                {
                                    var error = $root.google.bigtable.admin.v2.AppProfile.SingleClusterRouting.verify(message.singleClusterRouting);
                                    if (error)
                                        return "singleClusterRouting." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AppProfile message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.AppProfile} AppProfile
                         */
                        AppProfile.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.AppProfile)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.AppProfile();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.etag != null)
                                message.etag = String(object.etag);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.multiClusterRoutingUseAny != null) {
                                if (typeof object.multiClusterRoutingUseAny !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.AppProfile.multiClusterRoutingUseAny: object expected");
                                message.multiClusterRoutingUseAny = $root.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.fromObject(object.multiClusterRoutingUseAny);
                            }
                            if (object.singleClusterRouting != null) {
                                if (typeof object.singleClusterRouting !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.AppProfile.singleClusterRouting: object expected");
                                message.singleClusterRouting = $root.google.bigtable.admin.v2.AppProfile.SingleClusterRouting.fromObject(object.singleClusterRouting);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AppProfile message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @static
                         * @param {google.bigtable.admin.v2.AppProfile} message AppProfile
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AppProfile.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.etag = "";
                                object.description = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.etag != null && message.hasOwnProperty("etag"))
                                object.etag = message.etag;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.multiClusterRoutingUseAny != null && message.hasOwnProperty("multiClusterRoutingUseAny")) {
                                object.multiClusterRoutingUseAny = $root.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.toObject(message.multiClusterRoutingUseAny, options);
                                if (options.oneofs)
                                    object.routingPolicy = "multiClusterRoutingUseAny";
                            }
                            if (message.singleClusterRouting != null && message.hasOwnProperty("singleClusterRouting")) {
                                object.singleClusterRouting = $root.google.bigtable.admin.v2.AppProfile.SingleClusterRouting.toObject(message.singleClusterRouting, options);
                                if (options.oneofs)
                                    object.routingPolicy = "singleClusterRouting";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AppProfile to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.AppProfile
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AppProfile.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        AppProfile.MultiClusterRoutingUseAny = (function() {
    
                            /**
                             * Properties of a MultiClusterRoutingUseAny.
                             * @memberof google.bigtable.admin.v2.AppProfile
                             * @interface IMultiClusterRoutingUseAny
                             */
    
                            /**
                             * Constructs a new MultiClusterRoutingUseAny.
                             * @memberof google.bigtable.admin.v2.AppProfile
                             * @classdesc Represents a MultiClusterRoutingUseAny.
                             * @implements IMultiClusterRoutingUseAny
                             * @constructor
                             * @param {google.bigtable.admin.v2.AppProfile.IMultiClusterRoutingUseAny=} [properties] Properties to set
                             */
                            function MultiClusterRoutingUseAny(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new MultiClusterRoutingUseAny instance using the specified properties.
                             * @function create
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @static
                             * @param {google.bigtable.admin.v2.AppProfile.IMultiClusterRoutingUseAny=} [properties] Properties to set
                             * @returns {google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny} MultiClusterRoutingUseAny instance
                             */
                            MultiClusterRoutingUseAny.create = function create(properties) {
                                return new MultiClusterRoutingUseAny(properties);
                            };
    
                            /**
                             * Encodes the specified MultiClusterRoutingUseAny message. Does not implicitly {@link google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.verify|verify} messages.
                             * @function encode
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @static
                             * @param {google.bigtable.admin.v2.AppProfile.IMultiClusterRoutingUseAny} message MultiClusterRoutingUseAny message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            MultiClusterRoutingUseAny.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified MultiClusterRoutingUseAny message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @static
                             * @param {google.bigtable.admin.v2.AppProfile.IMultiClusterRoutingUseAny} message MultiClusterRoutingUseAny message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            MultiClusterRoutingUseAny.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a MultiClusterRoutingUseAny message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny} MultiClusterRoutingUseAny
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            MultiClusterRoutingUseAny.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a MultiClusterRoutingUseAny message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny} MultiClusterRoutingUseAny
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            MultiClusterRoutingUseAny.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a MultiClusterRoutingUseAny message.
                             * @function verify
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            MultiClusterRoutingUseAny.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a MultiClusterRoutingUseAny message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny} MultiClusterRoutingUseAny
                             */
                            MultiClusterRoutingUseAny.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny)
                                    return object;
                                return new $root.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny();
                            };
    
                            /**
                             * Creates a plain object from a MultiClusterRoutingUseAny message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @static
                             * @param {google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny} message MultiClusterRoutingUseAny
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            MultiClusterRoutingUseAny.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this MultiClusterRoutingUseAny to JSON.
                             * @function toJSON
                             * @memberof google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            MultiClusterRoutingUseAny.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return MultiClusterRoutingUseAny;
                        })();
    
                        AppProfile.SingleClusterRouting = (function() {
    
                            /**
                             * Properties of a SingleClusterRouting.
                             * @memberof google.bigtable.admin.v2.AppProfile
                             * @interface ISingleClusterRouting
                             * @property {string|null} [clusterId] SingleClusterRouting clusterId
                             * @property {boolean|null} [allowTransactionalWrites] SingleClusterRouting allowTransactionalWrites
                             */
    
                            /**
                             * Constructs a new SingleClusterRouting.
                             * @memberof google.bigtable.admin.v2.AppProfile
                             * @classdesc Represents a SingleClusterRouting.
                             * @implements ISingleClusterRouting
                             * @constructor
                             * @param {google.bigtable.admin.v2.AppProfile.ISingleClusterRouting=} [properties] Properties to set
                             */
                            function SingleClusterRouting(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * SingleClusterRouting clusterId.
                             * @member {string} clusterId
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @instance
                             */
                            SingleClusterRouting.prototype.clusterId = "";
    
                            /**
                             * SingleClusterRouting allowTransactionalWrites.
                             * @member {boolean} allowTransactionalWrites
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @instance
                             */
                            SingleClusterRouting.prototype.allowTransactionalWrites = false;
    
                            /**
                             * Creates a new SingleClusterRouting instance using the specified properties.
                             * @function create
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @static
                             * @param {google.bigtable.admin.v2.AppProfile.ISingleClusterRouting=} [properties] Properties to set
                             * @returns {google.bigtable.admin.v2.AppProfile.SingleClusterRouting} SingleClusterRouting instance
                             */
                            SingleClusterRouting.create = function create(properties) {
                                return new SingleClusterRouting(properties);
                            };
    
                            /**
                             * Encodes the specified SingleClusterRouting message. Does not implicitly {@link google.bigtable.admin.v2.AppProfile.SingleClusterRouting.verify|verify} messages.
                             * @function encode
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @static
                             * @param {google.bigtable.admin.v2.AppProfile.ISingleClusterRouting} message SingleClusterRouting message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SingleClusterRouting.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.clusterId);
                                if (message.allowTransactionalWrites != null && message.hasOwnProperty("allowTransactionalWrites"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowTransactionalWrites);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified SingleClusterRouting message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.AppProfile.SingleClusterRouting.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @static
                             * @param {google.bigtable.admin.v2.AppProfile.ISingleClusterRouting} message SingleClusterRouting message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SingleClusterRouting.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a SingleClusterRouting message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.bigtable.admin.v2.AppProfile.SingleClusterRouting} SingleClusterRouting
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SingleClusterRouting.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.AppProfile.SingleClusterRouting();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.clusterId = reader.string();
                                        break;
                                    case 2:
                                        message.allowTransactionalWrites = reader.bool();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a SingleClusterRouting message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.bigtable.admin.v2.AppProfile.SingleClusterRouting} SingleClusterRouting
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SingleClusterRouting.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a SingleClusterRouting message.
                             * @function verify
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            SingleClusterRouting.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                    if (!$util.isString(message.clusterId))
                                        return "clusterId: string expected";
                                if (message.allowTransactionalWrites != null && message.hasOwnProperty("allowTransactionalWrites"))
                                    if (typeof message.allowTransactionalWrites !== "boolean")
                                        return "allowTransactionalWrites: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a SingleClusterRouting message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.bigtable.admin.v2.AppProfile.SingleClusterRouting} SingleClusterRouting
                             */
                            SingleClusterRouting.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.bigtable.admin.v2.AppProfile.SingleClusterRouting)
                                    return object;
                                var message = new $root.google.bigtable.admin.v2.AppProfile.SingleClusterRouting();
                                if (object.clusterId != null)
                                    message.clusterId = String(object.clusterId);
                                if (object.allowTransactionalWrites != null)
                                    message.allowTransactionalWrites = Boolean(object.allowTransactionalWrites);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a SingleClusterRouting message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @static
                             * @param {google.bigtable.admin.v2.AppProfile.SingleClusterRouting} message SingleClusterRouting
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            SingleClusterRouting.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.clusterId = "";
                                    object.allowTransactionalWrites = false;
                                }
                                if (message.clusterId != null && message.hasOwnProperty("clusterId"))
                                    object.clusterId = message.clusterId;
                                if (message.allowTransactionalWrites != null && message.hasOwnProperty("allowTransactionalWrites"))
                                    object.allowTransactionalWrites = message.allowTransactionalWrites;
                                return object;
                            };
    
                            /**
                             * Converts this SingleClusterRouting to JSON.
                             * @function toJSON
                             * @memberof google.bigtable.admin.v2.AppProfile.SingleClusterRouting
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            SingleClusterRouting.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return SingleClusterRouting;
                        })();
    
                        return AppProfile;
                    })();
    
                    /**
                     * StorageType enum.
                     * @name google.bigtable.admin.v2.StorageType
                     * @enum {string}
                     * @property {number} STORAGE_TYPE_UNSPECIFIED=0 STORAGE_TYPE_UNSPECIFIED value
                     * @property {number} SSD=1 SSD value
                     * @property {number} HDD=2 HDD value
                     */
                    v2.StorageType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "STORAGE_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SSD"] = 1;
                        values[valuesById[2] = "HDD"] = 2;
                        return values;
                    })();
    
                    v2.OperationProgress = (function() {
    
                        /**
                         * Properties of an OperationProgress.
                         * @memberof google.bigtable.admin.v2
                         * @interface IOperationProgress
                         * @property {number|null} [progressPercent] OperationProgress progressPercent
                         * @property {google.protobuf.ITimestamp|null} [startTime] OperationProgress startTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] OperationProgress endTime
                         */
    
                        /**
                         * Constructs a new OperationProgress.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an OperationProgress.
                         * @implements IOperationProgress
                         * @constructor
                         * @param {google.bigtable.admin.v2.IOperationProgress=} [properties] Properties to set
                         */
                        function OperationProgress(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OperationProgress progressPercent.
                         * @member {number} progressPercent
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @instance
                         */
                        OperationProgress.prototype.progressPercent = 0;
    
                        /**
                         * OperationProgress startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @instance
                         */
                        OperationProgress.prototype.startTime = null;
    
                        /**
                         * OperationProgress endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @instance
                         */
                        OperationProgress.prototype.endTime = null;
    
                        /**
                         * Creates a new OperationProgress instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @static
                         * @param {google.bigtable.admin.v2.IOperationProgress=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.OperationProgress} OperationProgress instance
                         */
                        OperationProgress.create = function create(properties) {
                            return new OperationProgress(properties);
                        };
    
                        /**
                         * Encodes the specified OperationProgress message. Does not implicitly {@link google.bigtable.admin.v2.OperationProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @static
                         * @param {google.bigtable.admin.v2.IOperationProgress} message OperationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OperationProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.progressPercent);
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OperationProgress message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.OperationProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @static
                         * @param {google.bigtable.admin.v2.IOperationProgress} message OperationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OperationProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OperationProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.OperationProgress} OperationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OperationProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.OperationProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.progressPercent = reader.int32();
                                    break;
                                case 2:
                                    message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OperationProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.OperationProgress} OperationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OperationProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OperationProgress message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OperationProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                if (!$util.isInteger(message.progressPercent))
                                    return "progressPercent: integer expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an OperationProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.OperationProgress} OperationProgress
                         */
                        OperationProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.OperationProgress)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.OperationProgress();
                            if (object.progressPercent != null)
                                message.progressPercent = object.progressPercent | 0;
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.OperationProgress.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.OperationProgress.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OperationProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @static
                         * @param {google.bigtable.admin.v2.OperationProgress} message OperationProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OperationProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.progressPercent = 0;
                                object.startTime = null;
                                object.endTime = null;
                            }
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                object.progressPercent = message.progressPercent;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this OperationProgress to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.OperationProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OperationProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return OperationProgress;
                    })();
    
                    v2.BigtableTableAdmin = (function() {
    
                        /**
                         * Constructs a new BigtableTableAdmin service.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a BigtableTableAdmin
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function BigtableTableAdmin(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (BigtableTableAdmin.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = BigtableTableAdmin;
    
                        /**
                         * Creates new BigtableTableAdmin service using the specified rpc implementation.
                         * @function create
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {BigtableTableAdmin} RPC service. Useful where requests and/or responses are streamed.
                         */
                        BigtableTableAdmin.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#createTable}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef CreateTableCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Table} [response] Table
                         */
    
                        /**
                         * Calls CreateTable.
                         * @function createTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateTableRequest} request CreateTableRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.CreateTableCallback} callback Node-style callback called with the error, if any, and Table
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.createTable = function createTable(request, callback) {
                            return this.rpcCall(createTable, $root.google.bigtable.admin.v2.CreateTableRequest, $root.google.bigtable.admin.v2.Table, request, callback);
                        }, "name", { value: "CreateTable" });
    
                        /**
                         * Calls CreateTable.
                         * @function createTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateTableRequest} request CreateTableRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Table>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#createTableFromSnapshot}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef CreateTableFromSnapshotCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls CreateTableFromSnapshot.
                         * @function createTableFromSnapshot
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotRequest} request CreateTableFromSnapshotRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.CreateTableFromSnapshotCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.createTableFromSnapshot = function createTableFromSnapshot(request, callback) {
                            return this.rpcCall(createTableFromSnapshot, $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "CreateTableFromSnapshot" });
    
                        /**
                         * Calls CreateTableFromSnapshot.
                         * @function createTableFromSnapshot
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotRequest} request CreateTableFromSnapshotRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#listTables}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef ListTablesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.ListTablesResponse} [response] ListTablesResponse
                         */
    
                        /**
                         * Calls ListTables.
                         * @function listTables
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListTablesRequest} request ListTablesRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.ListTablesCallback} callback Node-style callback called with the error, if any, and ListTablesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.listTables = function listTables(request, callback) {
                            return this.rpcCall(listTables, $root.google.bigtable.admin.v2.ListTablesRequest, $root.google.bigtable.admin.v2.ListTablesResponse, request, callback);
                        }, "name", { value: "ListTables" });
    
                        /**
                         * Calls ListTables.
                         * @function listTables
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListTablesRequest} request ListTablesRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.ListTablesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#getTable}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef GetTableCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Table} [response] Table
                         */
    
                        /**
                         * Calls GetTable.
                         * @function getTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetTableRequest} request GetTableRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.GetTableCallback} callback Node-style callback called with the error, if any, and Table
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.getTable = function getTable(request, callback) {
                            return this.rpcCall(getTable, $root.google.bigtable.admin.v2.GetTableRequest, $root.google.bigtable.admin.v2.Table, request, callback);
                        }, "name", { value: "GetTable" });
    
                        /**
                         * Calls GetTable.
                         * @function getTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetTableRequest} request GetTableRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Table>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#deleteTable}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef DeleteTableCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteTable.
                         * @function deleteTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteTableRequest} request DeleteTableRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.DeleteTableCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.deleteTable = function deleteTable(request, callback) {
                            return this.rpcCall(deleteTable, $root.google.bigtable.admin.v2.DeleteTableRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteTable" });
    
                        /**
                         * Calls DeleteTable.
                         * @function deleteTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteTableRequest} request DeleteTableRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#modifyColumnFamilies}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef ModifyColumnFamiliesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Table} [response] Table
                         */
    
                        /**
                         * Calls ModifyColumnFamilies.
                         * @function modifyColumnFamilies
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IModifyColumnFamiliesRequest} request ModifyColumnFamiliesRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamiliesCallback} callback Node-style callback called with the error, if any, and Table
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.modifyColumnFamilies = function modifyColumnFamilies(request, callback) {
                            return this.rpcCall(modifyColumnFamilies, $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest, $root.google.bigtable.admin.v2.Table, request, callback);
                        }, "name", { value: "ModifyColumnFamilies" });
    
                        /**
                         * Calls ModifyColumnFamilies.
                         * @function modifyColumnFamilies
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IModifyColumnFamiliesRequest} request ModifyColumnFamiliesRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Table>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#dropRowRange}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef DropRowRangeCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DropRowRange.
                         * @function dropRowRange
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDropRowRangeRequest} request DropRowRangeRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.DropRowRangeCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.dropRowRange = function dropRowRange(request, callback) {
                            return this.rpcCall(dropRowRange, $root.google.bigtable.admin.v2.DropRowRangeRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DropRowRange" });
    
                        /**
                         * Calls DropRowRange.
                         * @function dropRowRange
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDropRowRangeRequest} request DropRowRangeRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#generateConsistencyToken}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef GenerateConsistencyTokenCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.GenerateConsistencyTokenResponse} [response] GenerateConsistencyTokenResponse
                         */
    
                        /**
                         * Calls GenerateConsistencyToken.
                         * @function generateConsistencyToken
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenRequest} request GenerateConsistencyTokenRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyTokenCallback} callback Node-style callback called with the error, if any, and GenerateConsistencyTokenResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.generateConsistencyToken = function generateConsistencyToken(request, callback) {
                            return this.rpcCall(generateConsistencyToken, $root.google.bigtable.admin.v2.GenerateConsistencyTokenRequest, $root.google.bigtable.admin.v2.GenerateConsistencyTokenResponse, request, callback);
                        }, "name", { value: "GenerateConsistencyToken" });
    
                        /**
                         * Calls GenerateConsistencyToken.
                         * @function generateConsistencyToken
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenRequest} request GenerateConsistencyTokenRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.GenerateConsistencyTokenResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#checkConsistency}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef CheckConsistencyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.CheckConsistencyResponse} [response] CheckConsistencyResponse
                         */
    
                        /**
                         * Calls CheckConsistency.
                         * @function checkConsistency
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICheckConsistencyRequest} request CheckConsistencyRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistencyCallback} callback Node-style callback called with the error, if any, and CheckConsistencyResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.checkConsistency = function checkConsistency(request, callback) {
                            return this.rpcCall(checkConsistency, $root.google.bigtable.admin.v2.CheckConsistencyRequest, $root.google.bigtable.admin.v2.CheckConsistencyResponse, request, callback);
                        }, "name", { value: "CheckConsistency" });
    
                        /**
                         * Calls CheckConsistency.
                         * @function checkConsistency
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICheckConsistencyRequest} request CheckConsistencyRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.CheckConsistencyResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#snapshotTable}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef SnapshotTableCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls SnapshotTable.
                         * @function snapshotTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ISnapshotTableRequest} request SnapshotTableRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.SnapshotTableCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.snapshotTable = function snapshotTable(request, callback) {
                            return this.rpcCall(snapshotTable, $root.google.bigtable.admin.v2.SnapshotTableRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "SnapshotTable" });
    
                        /**
                         * Calls SnapshotTable.
                         * @function snapshotTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ISnapshotTableRequest} request SnapshotTableRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#getSnapshot}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef GetSnapshotCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Snapshot} [response] Snapshot
                         */
    
                        /**
                         * Calls GetSnapshot.
                         * @function getSnapshot
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetSnapshotRequest} request GetSnapshotRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.GetSnapshotCallback} callback Node-style callback called with the error, if any, and Snapshot
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.getSnapshot = function getSnapshot(request, callback) {
                            return this.rpcCall(getSnapshot, $root.google.bigtable.admin.v2.GetSnapshotRequest, $root.google.bigtable.admin.v2.Snapshot, request, callback);
                        }, "name", { value: "GetSnapshot" });
    
                        /**
                         * Calls GetSnapshot.
                         * @function getSnapshot
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetSnapshotRequest} request GetSnapshotRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Snapshot>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#listSnapshots}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef ListSnapshotsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.ListSnapshotsResponse} [response] ListSnapshotsResponse
                         */
    
                        /**
                         * Calls ListSnapshots.
                         * @function listSnapshots
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListSnapshotsRequest} request ListSnapshotsRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshotsCallback} callback Node-style callback called with the error, if any, and ListSnapshotsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.listSnapshots = function listSnapshots(request, callback) {
                            return this.rpcCall(listSnapshots, $root.google.bigtable.admin.v2.ListSnapshotsRequest, $root.google.bigtable.admin.v2.ListSnapshotsResponse, request, callback);
                        }, "name", { value: "ListSnapshots" });
    
                        /**
                         * Calls ListSnapshots.
                         * @function listSnapshots
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListSnapshotsRequest} request ListSnapshotsRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.ListSnapshotsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#deleteSnapshot}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef DeleteSnapshotCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteSnapshot.
                         * @function deleteSnapshot
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteSnapshotRequest} request DeleteSnapshotRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.DeleteSnapshotCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.deleteSnapshot = function deleteSnapshot(request, callback) {
                            return this.rpcCall(deleteSnapshot, $root.google.bigtable.admin.v2.DeleteSnapshotRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteSnapshot" });
    
                        /**
                         * Calls DeleteSnapshot.
                         * @function deleteSnapshot
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteSnapshotRequest} request DeleteSnapshotRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#createBackup}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef CreateBackupCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls CreateBackup.
                         * @function createBackup
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateBackupRequest} request CreateBackupRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.CreateBackupCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.createBackup = function createBackup(request, callback) {
                            return this.rpcCall(createBackup, $root.google.bigtable.admin.v2.CreateBackupRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "CreateBackup" });
    
                        /**
                         * Calls CreateBackup.
                         * @function createBackup
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.ICreateBackupRequest} request CreateBackupRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#getBackup}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef GetBackupCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Backup} [response] Backup
                         */
    
                        /**
                         * Calls GetBackup.
                         * @function getBackup
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetBackupRequest} request GetBackupRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.GetBackupCallback} callback Node-style callback called with the error, if any, and Backup
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.getBackup = function getBackup(request, callback) {
                            return this.rpcCall(getBackup, $root.google.bigtable.admin.v2.GetBackupRequest, $root.google.bigtable.admin.v2.Backup, request, callback);
                        }, "name", { value: "GetBackup" });
    
                        /**
                         * Calls GetBackup.
                         * @function getBackup
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IGetBackupRequest} request GetBackupRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Backup>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#updateBackup}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef UpdateBackupCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.Backup} [response] Backup
                         */
    
                        /**
                         * Calls UpdateBackup.
                         * @function updateBackup
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IUpdateBackupRequest} request UpdateBackupRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.UpdateBackupCallback} callback Node-style callback called with the error, if any, and Backup
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.updateBackup = function updateBackup(request, callback) {
                            return this.rpcCall(updateBackup, $root.google.bigtable.admin.v2.UpdateBackupRequest, $root.google.bigtable.admin.v2.Backup, request, callback);
                        }, "name", { value: "UpdateBackup" });
    
                        /**
                         * Calls UpdateBackup.
                         * @function updateBackup
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IUpdateBackupRequest} request UpdateBackupRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.Backup>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#deleteBackup}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef DeleteBackupCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.protobuf.Empty} [response] Empty
                         */
    
                        /**
                         * Calls DeleteBackup.
                         * @function deleteBackup
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteBackupRequest} request DeleteBackupRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.DeleteBackupCallback} callback Node-style callback called with the error, if any, and Empty
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.deleteBackup = function deleteBackup(request, callback) {
                            return this.rpcCall(deleteBackup, $root.google.bigtable.admin.v2.DeleteBackupRequest, $root.google.protobuf.Empty, request, callback);
                        }, "name", { value: "DeleteBackup" });
    
                        /**
                         * Calls DeleteBackup.
                         * @function deleteBackup
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IDeleteBackupRequest} request DeleteBackupRequest message or plain object
                         * @returns {Promise<google.protobuf.Empty>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#listBackups}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef ListBackupsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.bigtable.admin.v2.ListBackupsResponse} [response] ListBackupsResponse
                         */
    
                        /**
                         * Calls ListBackups.
                         * @function listBackups
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListBackupsRequest} request ListBackupsRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.ListBackupsCallback} callback Node-style callback called with the error, if any, and ListBackupsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.listBackups = function listBackups(request, callback) {
                            return this.rpcCall(listBackups, $root.google.bigtable.admin.v2.ListBackupsRequest, $root.google.bigtable.admin.v2.ListBackupsResponse, request, callback);
                        }, "name", { value: "ListBackups" });
    
                        /**
                         * Calls ListBackups.
                         * @function listBackups
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IListBackupsRequest} request ListBackupsRequest message or plain object
                         * @returns {Promise<google.bigtable.admin.v2.ListBackupsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#restoreTable}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef RestoreTableCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls RestoreTable.
                         * @function restoreTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IRestoreTableRequest} request RestoreTableRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.RestoreTableCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.restoreTable = function restoreTable(request, callback) {
                            return this.rpcCall(restoreTable, $root.google.bigtable.admin.v2.RestoreTableRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "RestoreTable" });
    
                        /**
                         * Calls RestoreTable.
                         * @function restoreTable
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.bigtable.admin.v2.IRestoreTableRequest} request RestoreTableRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#getIamPolicy}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef GetIamPolicyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.Policy} [response] Policy
                         */
    
                        /**
                         * Calls GetIamPolicy.
                         * @function getIamPolicy
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.GetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                            return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                        }, "name", { value: "GetIamPolicy" });
    
                        /**
                         * Calls GetIamPolicy.
                         * @function getIamPolicy
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                         * @returns {Promise<google.iam.v1.Policy>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#setIamPolicy}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef SetIamPolicyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.Policy} [response] Policy
                         */
    
                        /**
                         * Calls SetIamPolicy.
                         * @function setIamPolicy
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.SetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                            return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                        }, "name", { value: "SetIamPolicy" });
    
                        /**
                         * Calls SetIamPolicy.
                         * @function setIamPolicy
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                         * @returns {Promise<google.iam.v1.Policy>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.bigtable.admin.v2.BigtableTableAdmin#testIamPermissions}.
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @typedef TestIamPermissionsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.TestIamPermissionsResponse} [response] TestIamPermissionsResponse
                         */
    
                        /**
                         * Calls TestIamPermissions.
                         * @function testIamPermissions
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                         * @param {google.bigtable.admin.v2.BigtableTableAdmin.TestIamPermissionsCallback} callback Node-style callback called with the error, if any, and TestIamPermissionsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BigtableTableAdmin.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                            return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
                        }, "name", { value: "TestIamPermissions" });
    
                        /**
                         * Calls TestIamPermissions.
                         * @function testIamPermissions
                         * @memberof google.bigtable.admin.v2.BigtableTableAdmin
                         * @instance
                         * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                         * @returns {Promise<google.iam.v1.TestIamPermissionsResponse>} Promise
                         * @variation 2
                         */
    
                        return BigtableTableAdmin;
                    })();
    
                    v2.CreateTableRequest = (function() {
    
                        /**
                         * Properties of a CreateTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateTableRequest
                         * @property {string|null} [parent] CreateTableRequest parent
                         * @property {string|null} [tableId] CreateTableRequest tableId
                         * @property {google.bigtable.admin.v2.ITable|null} [table] CreateTableRequest table
                         * @property {Array.<google.bigtable.admin.v2.CreateTableRequest.ISplit>|null} [initialSplits] CreateTableRequest initialSplits
                         */
    
                        /**
                         * Constructs a new CreateTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateTableRequest.
                         * @implements ICreateTableRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateTableRequest=} [properties] Properties to set
                         */
                        function CreateTableRequest(properties) {
                            this.initialSplits = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateTableRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @instance
                         */
                        CreateTableRequest.prototype.parent = "";
    
                        /**
                         * CreateTableRequest tableId.
                         * @member {string} tableId
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @instance
                         */
                        CreateTableRequest.prototype.tableId = "";
    
                        /**
                         * CreateTableRequest table.
                         * @member {google.bigtable.admin.v2.ITable|null|undefined} table
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @instance
                         */
                        CreateTableRequest.prototype.table = null;
    
                        /**
                         * CreateTableRequest initialSplits.
                         * @member {Array.<google.bigtable.admin.v2.CreateTableRequest.ISplit>} initialSplits
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @instance
                         */
                        CreateTableRequest.prototype.initialSplits = $util.emptyArray;
    
                        /**
                         * Creates a new CreateTableRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateTableRequest} CreateTableRequest instance
                         */
                        CreateTableRequest.create = function create(properties) {
                            return new CreateTableRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateTableRequest message. Does not implicitly {@link google.bigtable.admin.v2.CreateTableRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableRequest} message CreateTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateTableRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.tableId);
                            if (message.table != null && message.hasOwnProperty("table"))
                                $root.google.bigtable.admin.v2.Table.encode(message.table, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.initialSplits != null && message.initialSplits.length)
                                for (var i = 0; i < message.initialSplits.length; ++i)
                                    $root.google.bigtable.admin.v2.CreateTableRequest.Split.encode(message.initialSplits[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateTableRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateTableRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableRequest} message CreateTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateTableRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateTableRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateTableRequest} CreateTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateTableRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateTableRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.tableId = reader.string();
                                    break;
                                case 3:
                                    message.table = $root.google.bigtable.admin.v2.Table.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    if (!(message.initialSplits && message.initialSplits.length))
                                        message.initialSplits = [];
                                    message.initialSplits.push($root.google.bigtable.admin.v2.CreateTableRequest.Split.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateTableRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateTableRequest} CreateTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateTableRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateTableRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateTableRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                if (!$util.isString(message.tableId))
                                    return "tableId: string expected";
                            if (message.table != null && message.hasOwnProperty("table")) {
                                var error = $root.google.bigtable.admin.v2.Table.verify(message.table);
                                if (error)
                                    return "table." + error;
                            }
                            if (message.initialSplits != null && message.hasOwnProperty("initialSplits")) {
                                if (!Array.isArray(message.initialSplits))
                                    return "initialSplits: array expected";
                                for (var i = 0; i < message.initialSplits.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.CreateTableRequest.Split.verify(message.initialSplits[i]);
                                    if (error)
                                        return "initialSplits." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateTableRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateTableRequest} CreateTableRequest
                         */
                        CreateTableRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateTableRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateTableRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.tableId != null)
                                message.tableId = String(object.tableId);
                            if (object.table != null) {
                                if (typeof object.table !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateTableRequest.table: object expected");
                                message.table = $root.google.bigtable.admin.v2.Table.fromObject(object.table);
                            }
                            if (object.initialSplits) {
                                if (!Array.isArray(object.initialSplits))
                                    throw TypeError(".google.bigtable.admin.v2.CreateTableRequest.initialSplits: array expected");
                                message.initialSplits = [];
                                for (var i = 0; i < object.initialSplits.length; ++i) {
                                    if (typeof object.initialSplits[i] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.CreateTableRequest.initialSplits: object expected");
                                    message.initialSplits[i] = $root.google.bigtable.admin.v2.CreateTableRequest.Split.fromObject(object.initialSplits[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateTableRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.CreateTableRequest} message CreateTableRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateTableRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.initialSplits = [];
                            if (options.defaults) {
                                object.parent = "";
                                object.tableId = "";
                                object.table = null;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                object.tableId = message.tableId;
                            if (message.table != null && message.hasOwnProperty("table"))
                                object.table = $root.google.bigtable.admin.v2.Table.toObject(message.table, options);
                            if (message.initialSplits && message.initialSplits.length) {
                                object.initialSplits = [];
                                for (var j = 0; j < message.initialSplits.length; ++j)
                                    object.initialSplits[j] = $root.google.bigtable.admin.v2.CreateTableRequest.Split.toObject(message.initialSplits[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CreateTableRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateTableRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateTableRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        CreateTableRequest.Split = (function() {
    
                            /**
                             * Properties of a Split.
                             * @memberof google.bigtable.admin.v2.CreateTableRequest
                             * @interface ISplit
                             * @property {Uint8Array|null} [key] Split key
                             */
    
                            /**
                             * Constructs a new Split.
                             * @memberof google.bigtable.admin.v2.CreateTableRequest
                             * @classdesc Represents a Split.
                             * @implements ISplit
                             * @constructor
                             * @param {google.bigtable.admin.v2.CreateTableRequest.ISplit=} [properties] Properties to set
                             */
                            function Split(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Split key.
                             * @member {Uint8Array} key
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @instance
                             */
                            Split.prototype.key = $util.newBuffer([]);
    
                            /**
                             * Creates a new Split instance using the specified properties.
                             * @function create
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @static
                             * @param {google.bigtable.admin.v2.CreateTableRequest.ISplit=} [properties] Properties to set
                             * @returns {google.bigtable.admin.v2.CreateTableRequest.Split} Split instance
                             */
                            Split.create = function create(properties) {
                                return new Split(properties);
                            };
    
                            /**
                             * Encodes the specified Split message. Does not implicitly {@link google.bigtable.admin.v2.CreateTableRequest.Split.verify|verify} messages.
                             * @function encode
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @static
                             * @param {google.bigtable.admin.v2.CreateTableRequest.ISplit} message Split message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Split.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.key != null && message.hasOwnProperty("key"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Split message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateTableRequest.Split.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @static
                             * @param {google.bigtable.admin.v2.CreateTableRequest.ISplit} message Split message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Split.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Split message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.bigtable.admin.v2.CreateTableRequest.Split} Split
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Split.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateTableRequest.Split();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.key = reader.bytes();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Split message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.bigtable.admin.v2.CreateTableRequest.Split} Split
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Split.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Split message.
                             * @function verify
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Split.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.key != null && message.hasOwnProperty("key"))
                                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                        return "key: buffer expected";
                                return null;
                            };
    
                            /**
                             * Creates a Split message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.bigtable.admin.v2.CreateTableRequest.Split} Split
                             */
                            Split.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.bigtable.admin.v2.CreateTableRequest.Split)
                                    return object;
                                var message = new $root.google.bigtable.admin.v2.CreateTableRequest.Split();
                                if (object.key != null)
                                    if (typeof object.key === "string")
                                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                                    else if (object.key.length)
                                        message.key = object.key;
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Split message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @static
                             * @param {google.bigtable.admin.v2.CreateTableRequest.Split} message Split
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Split.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    if (options.bytes === String)
                                        object.key = "";
                                    else {
                                        object.key = [];
                                        if (options.bytes !== Array)
                                            object.key = $util.newBuffer(object.key);
                                    }
                                if (message.key != null && message.hasOwnProperty("key"))
                                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                                return object;
                            };
    
                            /**
                             * Converts this Split to JSON.
                             * @function toJSON
                             * @memberof google.bigtable.admin.v2.CreateTableRequest.Split
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Split.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Split;
                        })();
    
                        return CreateTableRequest;
                    })();
    
                    v2.CreateTableFromSnapshotRequest = (function() {
    
                        /**
                         * Properties of a CreateTableFromSnapshotRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateTableFromSnapshotRequest
                         * @property {string|null} [parent] CreateTableFromSnapshotRequest parent
                         * @property {string|null} [tableId] CreateTableFromSnapshotRequest tableId
                         * @property {string|null} [sourceSnapshot] CreateTableFromSnapshotRequest sourceSnapshot
                         */
    
                        /**
                         * Constructs a new CreateTableFromSnapshotRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateTableFromSnapshotRequest.
                         * @implements ICreateTableFromSnapshotRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotRequest=} [properties] Properties to set
                         */
                        function CreateTableFromSnapshotRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateTableFromSnapshotRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @instance
                         */
                        CreateTableFromSnapshotRequest.prototype.parent = "";
    
                        /**
                         * CreateTableFromSnapshotRequest tableId.
                         * @member {string} tableId
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @instance
                         */
                        CreateTableFromSnapshotRequest.prototype.tableId = "";
    
                        /**
                         * CreateTableFromSnapshotRequest sourceSnapshot.
                         * @member {string} sourceSnapshot
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @instance
                         */
                        CreateTableFromSnapshotRequest.prototype.sourceSnapshot = "";
    
                        /**
                         * Creates a new CreateTableFromSnapshotRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateTableFromSnapshotRequest} CreateTableFromSnapshotRequest instance
                         */
                        CreateTableFromSnapshotRequest.create = function create(properties) {
                            return new CreateTableFromSnapshotRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateTableFromSnapshotRequest message. Does not implicitly {@link google.bigtable.admin.v2.CreateTableFromSnapshotRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotRequest} message CreateTableFromSnapshotRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateTableFromSnapshotRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.tableId);
                            if (message.sourceSnapshot != null && message.hasOwnProperty("sourceSnapshot"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.sourceSnapshot);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateTableFromSnapshotRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateTableFromSnapshotRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotRequest} message CreateTableFromSnapshotRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateTableFromSnapshotRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateTableFromSnapshotRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateTableFromSnapshotRequest} CreateTableFromSnapshotRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateTableFromSnapshotRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.tableId = reader.string();
                                    break;
                                case 3:
                                    message.sourceSnapshot = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateTableFromSnapshotRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateTableFromSnapshotRequest} CreateTableFromSnapshotRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateTableFromSnapshotRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateTableFromSnapshotRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateTableFromSnapshotRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                if (!$util.isString(message.tableId))
                                    return "tableId: string expected";
                            if (message.sourceSnapshot != null && message.hasOwnProperty("sourceSnapshot"))
                                if (!$util.isString(message.sourceSnapshot))
                                    return "sourceSnapshot: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateTableFromSnapshotRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateTableFromSnapshotRequest} CreateTableFromSnapshotRequest
                         */
                        CreateTableFromSnapshotRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.tableId != null)
                                message.tableId = String(object.tableId);
                            if (object.sourceSnapshot != null)
                                message.sourceSnapshot = String(object.sourceSnapshot);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateTableFromSnapshotRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.CreateTableFromSnapshotRequest} message CreateTableFromSnapshotRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateTableFromSnapshotRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.tableId = "";
                                object.sourceSnapshot = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                object.tableId = message.tableId;
                            if (message.sourceSnapshot != null && message.hasOwnProperty("sourceSnapshot"))
                                object.sourceSnapshot = message.sourceSnapshot;
                            return object;
                        };
    
                        /**
                         * Converts this CreateTableFromSnapshotRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateTableFromSnapshotRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateTableFromSnapshotRequest;
                    })();
    
                    v2.DropRowRangeRequest = (function() {
    
                        /**
                         * Properties of a DropRowRangeRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IDropRowRangeRequest
                         * @property {string|null} [name] DropRowRangeRequest name
                         * @property {Uint8Array|null} [rowKeyPrefix] DropRowRangeRequest rowKeyPrefix
                         * @property {boolean|null} [deleteAllDataFromTable] DropRowRangeRequest deleteAllDataFromTable
                         */
    
                        /**
                         * Constructs a new DropRowRangeRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a DropRowRangeRequest.
                         * @implements IDropRowRangeRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IDropRowRangeRequest=} [properties] Properties to set
                         */
                        function DropRowRangeRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DropRowRangeRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @instance
                         */
                        DropRowRangeRequest.prototype.name = "";
    
                        /**
                         * DropRowRangeRequest rowKeyPrefix.
                         * @member {Uint8Array} rowKeyPrefix
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @instance
                         */
                        DropRowRangeRequest.prototype.rowKeyPrefix = $util.newBuffer([]);
    
                        /**
                         * DropRowRangeRequest deleteAllDataFromTable.
                         * @member {boolean} deleteAllDataFromTable
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @instance
                         */
                        DropRowRangeRequest.prototype.deleteAllDataFromTable = false;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * DropRowRangeRequest target.
                         * @member {"rowKeyPrefix"|"deleteAllDataFromTable"|undefined} target
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @instance
                         */
                        Object.defineProperty(DropRowRangeRequest.prototype, "target", {
                            get: $util.oneOfGetter($oneOfFields = ["rowKeyPrefix", "deleteAllDataFromTable"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new DropRowRangeRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDropRowRangeRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.DropRowRangeRequest} DropRowRangeRequest instance
                         */
                        DropRowRangeRequest.create = function create(properties) {
                            return new DropRowRangeRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DropRowRangeRequest message. Does not implicitly {@link google.bigtable.admin.v2.DropRowRangeRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDropRowRangeRequest} message DropRowRangeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DropRowRangeRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.rowKeyPrefix != null && message.hasOwnProperty("rowKeyPrefix"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.rowKeyPrefix);
                            if (message.deleteAllDataFromTable != null && message.hasOwnProperty("deleteAllDataFromTable"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deleteAllDataFromTable);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DropRowRangeRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.DropRowRangeRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDropRowRangeRequest} message DropRowRangeRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DropRowRangeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DropRowRangeRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.DropRowRangeRequest} DropRowRangeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DropRowRangeRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.DropRowRangeRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.rowKeyPrefix = reader.bytes();
                                    break;
                                case 3:
                                    message.deleteAllDataFromTable = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DropRowRangeRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.DropRowRangeRequest} DropRowRangeRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DropRowRangeRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DropRowRangeRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DropRowRangeRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.rowKeyPrefix != null && message.hasOwnProperty("rowKeyPrefix")) {
                                properties.target = 1;
                                if (!(message.rowKeyPrefix && typeof message.rowKeyPrefix.length === "number" || $util.isString(message.rowKeyPrefix)))
                                    return "rowKeyPrefix: buffer expected";
                            }
                            if (message.deleteAllDataFromTable != null && message.hasOwnProperty("deleteAllDataFromTable")) {
                                if (properties.target === 1)
                                    return "target: multiple values";
                                properties.target = 1;
                                if (typeof message.deleteAllDataFromTable !== "boolean")
                                    return "deleteAllDataFromTable: boolean expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DropRowRangeRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.DropRowRangeRequest} DropRowRangeRequest
                         */
                        DropRowRangeRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.DropRowRangeRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.DropRowRangeRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.rowKeyPrefix != null)
                                if (typeof object.rowKeyPrefix === "string")
                                    $util.base64.decode(object.rowKeyPrefix, message.rowKeyPrefix = $util.newBuffer($util.base64.length(object.rowKeyPrefix)), 0);
                                else if (object.rowKeyPrefix.length)
                                    message.rowKeyPrefix = object.rowKeyPrefix;
                            if (object.deleteAllDataFromTable != null)
                                message.deleteAllDataFromTable = Boolean(object.deleteAllDataFromTable);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DropRowRangeRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @static
                         * @param {google.bigtable.admin.v2.DropRowRangeRequest} message DropRowRangeRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DropRowRangeRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.rowKeyPrefix != null && message.hasOwnProperty("rowKeyPrefix")) {
                                object.rowKeyPrefix = options.bytes === String ? $util.base64.encode(message.rowKeyPrefix, 0, message.rowKeyPrefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKeyPrefix) : message.rowKeyPrefix;
                                if (options.oneofs)
                                    object.target = "rowKeyPrefix";
                            }
                            if (message.deleteAllDataFromTable != null && message.hasOwnProperty("deleteAllDataFromTable")) {
                                object.deleteAllDataFromTable = message.deleteAllDataFromTable;
                                if (options.oneofs)
                                    object.target = "deleteAllDataFromTable";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this DropRowRangeRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.DropRowRangeRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DropRowRangeRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DropRowRangeRequest;
                    })();
    
                    v2.ListTablesRequest = (function() {
    
                        /**
                         * Properties of a ListTablesRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListTablesRequest
                         * @property {string|null} [parent] ListTablesRequest parent
                         * @property {google.bigtable.admin.v2.Table.View|null} [view] ListTablesRequest view
                         * @property {number|null} [pageSize] ListTablesRequest pageSize
                         * @property {string|null} [pageToken] ListTablesRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListTablesRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListTablesRequest.
                         * @implements IListTablesRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListTablesRequest=} [properties] Properties to set
                         */
                        function ListTablesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListTablesRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @instance
                         */
                        ListTablesRequest.prototype.parent = "";
    
                        /**
                         * ListTablesRequest view.
                         * @member {google.bigtable.admin.v2.Table.View} view
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @instance
                         */
                        ListTablesRequest.prototype.view = 0;
    
                        /**
                         * ListTablesRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @instance
                         */
                        ListTablesRequest.prototype.pageSize = 0;
    
                        /**
                         * ListTablesRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @instance
                         */
                        ListTablesRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListTablesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListTablesRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListTablesRequest} ListTablesRequest instance
                         */
                        ListTablesRequest.create = function create(properties) {
                            return new ListTablesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListTablesRequest message. Does not implicitly {@link google.bigtable.admin.v2.ListTablesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListTablesRequest} message ListTablesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTablesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.view != null && message.hasOwnProperty("view"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.view);
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pageSize);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListTablesRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListTablesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListTablesRequest} message ListTablesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTablesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListTablesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListTablesRequest} ListTablesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTablesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListTablesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.view = reader.int32();
                                    break;
                                case 4:
                                    message.pageSize = reader.int32();
                                    break;
                                case 3:
                                    message.pageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListTablesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListTablesRequest} ListTablesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTablesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListTablesRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListTablesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.view != null && message.hasOwnProperty("view"))
                                switch (message.view) {
                                default:
                                    return "view: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListTablesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListTablesRequest} ListTablesRequest
                         */
                        ListTablesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListTablesRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListTablesRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            switch (object.view) {
                            case "VIEW_UNSPECIFIED":
                            case 0:
                                message.view = 0;
                                break;
                            case "NAME_ONLY":
                            case 1:
                                message.view = 1;
                                break;
                            case "SCHEMA_VIEW":
                            case 2:
                                message.view = 2;
                                break;
                            case "REPLICATION_VIEW":
                            case 3:
                                message.view = 3;
                                break;
                            case "FULL":
                            case 4:
                                message.view = 4;
                                break;
                            }
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListTablesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ListTablesRequest} message ListTablesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListTablesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.view = options.enums === String ? "VIEW_UNSPECIFIED" : 0;
                                object.pageToken = "";
                                object.pageSize = 0;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.view != null && message.hasOwnProperty("view"))
                                object.view = options.enums === String ? $root.google.bigtable.admin.v2.Table.View[message.view] : message.view;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            return object;
                        };
    
                        /**
                         * Converts this ListTablesRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListTablesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListTablesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListTablesRequest;
                    })();
    
                    v2.ListTablesResponse = (function() {
    
                        /**
                         * Properties of a ListTablesResponse.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListTablesResponse
                         * @property {Array.<google.bigtable.admin.v2.ITable>|null} [tables] ListTablesResponse tables
                         * @property {string|null} [nextPageToken] ListTablesResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListTablesResponse.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListTablesResponse.
                         * @implements IListTablesResponse
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListTablesResponse=} [properties] Properties to set
                         */
                        function ListTablesResponse(properties) {
                            this.tables = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListTablesResponse tables.
                         * @member {Array.<google.bigtable.admin.v2.ITable>} tables
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @instance
                         */
                        ListTablesResponse.prototype.tables = $util.emptyArray;
    
                        /**
                         * ListTablesResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @instance
                         */
                        ListTablesResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListTablesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListTablesResponse=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListTablesResponse} ListTablesResponse instance
                         */
                        ListTablesResponse.create = function create(properties) {
                            return new ListTablesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListTablesResponse message. Does not implicitly {@link google.bigtable.admin.v2.ListTablesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListTablesResponse} message ListTablesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTablesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tables != null && message.tables.length)
                                for (var i = 0; i < message.tables.length; ++i)
                                    $root.google.bigtable.admin.v2.Table.encode(message.tables[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListTablesResponse message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListTablesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListTablesResponse} message ListTablesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTablesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListTablesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListTablesResponse} ListTablesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTablesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListTablesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.tables && message.tables.length))
                                        message.tables = [];
                                    message.tables.push($root.google.bigtable.admin.v2.Table.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListTablesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListTablesResponse} ListTablesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTablesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListTablesResponse message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListTablesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tables != null && message.hasOwnProperty("tables")) {
                                if (!Array.isArray(message.tables))
                                    return "tables: array expected";
                                for (var i = 0; i < message.tables.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.Table.verify(message.tables[i]);
                                    if (error)
                                        return "tables." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListTablesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListTablesResponse} ListTablesResponse
                         */
                        ListTablesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListTablesResponse)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListTablesResponse();
                            if (object.tables) {
                                if (!Array.isArray(object.tables))
                                    throw TypeError(".google.bigtable.admin.v2.ListTablesResponse.tables: array expected");
                                message.tables = [];
                                for (var i = 0; i < object.tables.length; ++i) {
                                    if (typeof object.tables[i] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ListTablesResponse.tables: object expected");
                                    message.tables[i] = $root.google.bigtable.admin.v2.Table.fromObject(object.tables[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListTablesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ListTablesResponse} message ListTablesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListTablesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.tables = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.tables && message.tables.length) {
                                object.tables = [];
                                for (var j = 0; j < message.tables.length; ++j)
                                    object.tables[j] = $root.google.bigtable.admin.v2.Table.toObject(message.tables[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListTablesResponse to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListTablesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListTablesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListTablesResponse;
                    })();
    
                    v2.GetTableRequest = (function() {
    
                        /**
                         * Properties of a GetTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGetTableRequest
                         * @property {string|null} [name] GetTableRequest name
                         * @property {google.bigtable.admin.v2.Table.View|null} [view] GetTableRequest view
                         */
    
                        /**
                         * Constructs a new GetTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GetTableRequest.
                         * @implements IGetTableRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGetTableRequest=} [properties] Properties to set
                         */
                        function GetTableRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetTableRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @instance
                         */
                        GetTableRequest.prototype.name = "";
    
                        /**
                         * GetTableRequest view.
                         * @member {google.bigtable.admin.v2.Table.View} view
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @instance
                         */
                        GetTableRequest.prototype.view = 0;
    
                        /**
                         * Creates a new GetTableRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetTableRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GetTableRequest} GetTableRequest instance
                         */
                        GetTableRequest.create = function create(properties) {
                            return new GetTableRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetTableRequest message. Does not implicitly {@link google.bigtable.admin.v2.GetTableRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetTableRequest} message GetTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetTableRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.view != null && message.hasOwnProperty("view"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.view);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetTableRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GetTableRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetTableRequest} message GetTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetTableRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetTableRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GetTableRequest} GetTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetTableRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GetTableRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.view = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetTableRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GetTableRequest} GetTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetTableRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetTableRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetTableRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.view != null && message.hasOwnProperty("view"))
                                switch (message.view) {
                                default:
                                    return "view: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a GetTableRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GetTableRequest} GetTableRequest
                         */
                        GetTableRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GetTableRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GetTableRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            switch (object.view) {
                            case "VIEW_UNSPECIFIED":
                            case 0:
                                message.view = 0;
                                break;
                            case "NAME_ONLY":
                            case 1:
                                message.view = 1;
                                break;
                            case "SCHEMA_VIEW":
                            case 2:
                                message.view = 2;
                                break;
                            case "REPLICATION_VIEW":
                            case 3:
                                message.view = 3;
                                break;
                            case "FULL":
                            case 4:
                                message.view = 4;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetTableRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.GetTableRequest} message GetTableRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetTableRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.view = options.enums === String ? "VIEW_UNSPECIFIED" : 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.view != null && message.hasOwnProperty("view"))
                                object.view = options.enums === String ? $root.google.bigtable.admin.v2.Table.View[message.view] : message.view;
                            return object;
                        };
    
                        /**
                         * Converts this GetTableRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GetTableRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetTableRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetTableRequest;
                    })();
    
                    v2.DeleteTableRequest = (function() {
    
                        /**
                         * Properties of a DeleteTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IDeleteTableRequest
                         * @property {string|null} [name] DeleteTableRequest name
                         */
    
                        /**
                         * Constructs a new DeleteTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a DeleteTableRequest.
                         * @implements IDeleteTableRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IDeleteTableRequest=} [properties] Properties to set
                         */
                        function DeleteTableRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteTableRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @instance
                         */
                        DeleteTableRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteTableRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteTableRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.DeleteTableRequest} DeleteTableRequest instance
                         */
                        DeleteTableRequest.create = function create(properties) {
                            return new DeleteTableRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteTableRequest message. Does not implicitly {@link google.bigtable.admin.v2.DeleteTableRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteTableRequest} message DeleteTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteTableRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteTableRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.DeleteTableRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteTableRequest} message DeleteTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteTableRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteTableRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.DeleteTableRequest} DeleteTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteTableRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.DeleteTableRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteTableRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.DeleteTableRequest} DeleteTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteTableRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteTableRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteTableRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteTableRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.DeleteTableRequest} DeleteTableRequest
                         */
                        DeleteTableRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.DeleteTableRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.DeleteTableRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteTableRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.DeleteTableRequest} message DeleteTableRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteTableRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteTableRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.DeleteTableRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteTableRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteTableRequest;
                    })();
    
                    v2.ModifyColumnFamiliesRequest = (function() {
    
                        /**
                         * Properties of a ModifyColumnFamiliesRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IModifyColumnFamiliesRequest
                         * @property {string|null} [name] ModifyColumnFamiliesRequest name
                         * @property {Array.<google.bigtable.admin.v2.ModifyColumnFamiliesRequest.IModification>|null} [modifications] ModifyColumnFamiliesRequest modifications
                         */
    
                        /**
                         * Constructs a new ModifyColumnFamiliesRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ModifyColumnFamiliesRequest.
                         * @implements IModifyColumnFamiliesRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IModifyColumnFamiliesRequest=} [properties] Properties to set
                         */
                        function ModifyColumnFamiliesRequest(properties) {
                            this.modifications = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ModifyColumnFamiliesRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @instance
                         */
                        ModifyColumnFamiliesRequest.prototype.name = "";
    
                        /**
                         * ModifyColumnFamiliesRequest modifications.
                         * @member {Array.<google.bigtable.admin.v2.ModifyColumnFamiliesRequest.IModification>} modifications
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @instance
                         */
                        ModifyColumnFamiliesRequest.prototype.modifications = $util.emptyArray;
    
                        /**
                         * Creates a new ModifyColumnFamiliesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IModifyColumnFamiliesRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ModifyColumnFamiliesRequest} ModifyColumnFamiliesRequest instance
                         */
                        ModifyColumnFamiliesRequest.create = function create(properties) {
                            return new ModifyColumnFamiliesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ModifyColumnFamiliesRequest message. Does not implicitly {@link google.bigtable.admin.v2.ModifyColumnFamiliesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IModifyColumnFamiliesRequest} message ModifyColumnFamiliesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ModifyColumnFamiliesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.modifications != null && message.modifications.length)
                                for (var i = 0; i < message.modifications.length; ++i)
                                    $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.encode(message.modifications[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ModifyColumnFamiliesRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ModifyColumnFamiliesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IModifyColumnFamiliesRequest} message ModifyColumnFamiliesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ModifyColumnFamiliesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ModifyColumnFamiliesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ModifyColumnFamiliesRequest} ModifyColumnFamiliesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ModifyColumnFamiliesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    if (!(message.modifications && message.modifications.length))
                                        message.modifications = [];
                                    message.modifications.push($root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ModifyColumnFamiliesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ModifyColumnFamiliesRequest} ModifyColumnFamiliesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ModifyColumnFamiliesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ModifyColumnFamiliesRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ModifyColumnFamiliesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.modifications != null && message.hasOwnProperty("modifications")) {
                                if (!Array.isArray(message.modifications))
                                    return "modifications: array expected";
                                for (var i = 0; i < message.modifications.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.verify(message.modifications[i]);
                                    if (error)
                                        return "modifications." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ModifyColumnFamiliesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ModifyColumnFamiliesRequest} ModifyColumnFamiliesRequest
                         */
                        ModifyColumnFamiliesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.modifications) {
                                if (!Array.isArray(object.modifications))
                                    throw TypeError(".google.bigtable.admin.v2.ModifyColumnFamiliesRequest.modifications: array expected");
                                message.modifications = [];
                                for (var i = 0; i < object.modifications.length; ++i) {
                                    if (typeof object.modifications[i] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ModifyColumnFamiliesRequest.modifications: object expected");
                                    message.modifications[i] = $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.fromObject(object.modifications[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ModifyColumnFamiliesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ModifyColumnFamiliesRequest} message ModifyColumnFamiliesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ModifyColumnFamiliesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.modifications = [];
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.modifications && message.modifications.length) {
                                object.modifications = [];
                                for (var j = 0; j < message.modifications.length; ++j)
                                    object.modifications[j] = $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.toObject(message.modifications[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ModifyColumnFamiliesRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ModifyColumnFamiliesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        ModifyColumnFamiliesRequest.Modification = (function() {
    
                            /**
                             * Properties of a Modification.
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                             * @interface IModification
                             * @property {string|null} [id] Modification id
                             * @property {google.bigtable.admin.v2.IColumnFamily|null} [create] Modification create
                             * @property {google.bigtable.admin.v2.IColumnFamily|null} [update] Modification update
                             * @property {boolean|null} [drop] Modification drop
                             */
    
                            /**
                             * Constructs a new Modification.
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest
                             * @classdesc Represents a Modification.
                             * @implements IModification
                             * @constructor
                             * @param {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.IModification=} [properties] Properties to set
                             */
                            function Modification(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Modification id.
                             * @member {string} id
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @instance
                             */
                            Modification.prototype.id = "";
    
                            /**
                             * Modification create.
                             * @member {google.bigtable.admin.v2.IColumnFamily|null|undefined} create
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @instance
                             */
                            Modification.prototype.create = null;
    
                            /**
                             * Modification update.
                             * @member {google.bigtable.admin.v2.IColumnFamily|null|undefined} update
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @instance
                             */
                            Modification.prototype.update = null;
    
                            /**
                             * Modification drop.
                             * @member {boolean} drop
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @instance
                             */
                            Modification.prototype.drop = false;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * Modification mod.
                             * @member {"create"|"update"|"drop"|undefined} mod
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @instance
                             */
                            Object.defineProperty(Modification.prototype, "mod", {
                                get: $util.oneOfGetter($oneOfFields = ["create", "update", "drop"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new Modification instance using the specified properties.
                             * @function create
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @static
                             * @param {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.IModification=} [properties] Properties to set
                             * @returns {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification} Modification instance
                             */
                            Modification.create = function create(properties) {
                                return new Modification(properties);
                            };
    
                            /**
                             * Encodes the specified Modification message. Does not implicitly {@link google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.verify|verify} messages.
                             * @function encode
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @static
                             * @param {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.IModification} message Modification message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Modification.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.id != null && message.hasOwnProperty("id"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                                if (message.create != null && message.hasOwnProperty("create"))
                                    $root.google.bigtable.admin.v2.ColumnFamily.encode(message.create, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.update != null && message.hasOwnProperty("update"))
                                    $root.google.bigtable.admin.v2.ColumnFamily.encode(message.update, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.drop != null && message.hasOwnProperty("drop"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.drop);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Modification message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @static
                             * @param {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.IModification} message Modification message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Modification.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Modification message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification} Modification
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Modification.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.id = reader.string();
                                        break;
                                    case 2:
                                        message.create = $root.google.bigtable.admin.v2.ColumnFamily.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.update = $root.google.bigtable.admin.v2.ColumnFamily.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.drop = reader.bool();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Modification message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification} Modification
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Modification.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Modification message.
                             * @function verify
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Modification.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.id != null && message.hasOwnProperty("id"))
                                    if (!$util.isString(message.id))
                                        return "id: string expected";
                                if (message.create != null && message.hasOwnProperty("create")) {
                                    properties.mod = 1;
                                    {
                                        var error = $root.google.bigtable.admin.v2.ColumnFamily.verify(message.create);
                                        if (error)
                                            return "create." + error;
                                    }
                                }
                                if (message.update != null && message.hasOwnProperty("update")) {
                                    if (properties.mod === 1)
                                        return "mod: multiple values";
                                    properties.mod = 1;
                                    {
                                        var error = $root.google.bigtable.admin.v2.ColumnFamily.verify(message.update);
                                        if (error)
                                            return "update." + error;
                                    }
                                }
                                if (message.drop != null && message.hasOwnProperty("drop")) {
                                    if (properties.mod === 1)
                                        return "mod: multiple values";
                                    properties.mod = 1;
                                    if (typeof message.drop !== "boolean")
                                        return "drop: boolean expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Modification message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification} Modification
                             */
                            Modification.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification)
                                    return object;
                                var message = new $root.google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification();
                                if (object.id != null)
                                    message.id = String(object.id);
                                if (object.create != null) {
                                    if (typeof object.create !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.create: object expected");
                                    message.create = $root.google.bigtable.admin.v2.ColumnFamily.fromObject(object.create);
                                }
                                if (object.update != null) {
                                    if (typeof object.update !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.update: object expected");
                                    message.update = $root.google.bigtable.admin.v2.ColumnFamily.fromObject(object.update);
                                }
                                if (object.drop != null)
                                    message.drop = Boolean(object.drop);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Modification message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @static
                             * @param {google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification} message Modification
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Modification.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.id = "";
                                if (message.id != null && message.hasOwnProperty("id"))
                                    object.id = message.id;
                                if (message.create != null && message.hasOwnProperty("create")) {
                                    object.create = $root.google.bigtable.admin.v2.ColumnFamily.toObject(message.create, options);
                                    if (options.oneofs)
                                        object.mod = "create";
                                }
                                if (message.update != null && message.hasOwnProperty("update")) {
                                    object.update = $root.google.bigtable.admin.v2.ColumnFamily.toObject(message.update, options);
                                    if (options.oneofs)
                                        object.mod = "update";
                                }
                                if (message.drop != null && message.hasOwnProperty("drop")) {
                                    object.drop = message.drop;
                                    if (options.oneofs)
                                        object.mod = "drop";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Modification to JSON.
                             * @function toJSON
                             * @memberof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Modification.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Modification;
                        })();
    
                        return ModifyColumnFamiliesRequest;
                    })();
    
                    v2.GenerateConsistencyTokenRequest = (function() {
    
                        /**
                         * Properties of a GenerateConsistencyTokenRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGenerateConsistencyTokenRequest
                         * @property {string|null} [name] GenerateConsistencyTokenRequest name
                         */
    
                        /**
                         * Constructs a new GenerateConsistencyTokenRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GenerateConsistencyTokenRequest.
                         * @implements IGenerateConsistencyTokenRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenRequest=} [properties] Properties to set
                         */
                        function GenerateConsistencyTokenRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GenerateConsistencyTokenRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @instance
                         */
                        GenerateConsistencyTokenRequest.prototype.name = "";
    
                        /**
                         * Creates a new GenerateConsistencyTokenRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GenerateConsistencyTokenRequest} GenerateConsistencyTokenRequest instance
                         */
                        GenerateConsistencyTokenRequest.create = function create(properties) {
                            return new GenerateConsistencyTokenRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GenerateConsistencyTokenRequest message. Does not implicitly {@link google.bigtable.admin.v2.GenerateConsistencyTokenRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenRequest} message GenerateConsistencyTokenRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GenerateConsistencyTokenRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GenerateConsistencyTokenRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GenerateConsistencyTokenRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenRequest} message GenerateConsistencyTokenRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GenerateConsistencyTokenRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GenerateConsistencyTokenRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GenerateConsistencyTokenRequest} GenerateConsistencyTokenRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GenerateConsistencyTokenRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GenerateConsistencyTokenRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GenerateConsistencyTokenRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GenerateConsistencyTokenRequest} GenerateConsistencyTokenRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GenerateConsistencyTokenRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GenerateConsistencyTokenRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GenerateConsistencyTokenRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GenerateConsistencyTokenRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GenerateConsistencyTokenRequest} GenerateConsistencyTokenRequest
                         */
                        GenerateConsistencyTokenRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GenerateConsistencyTokenRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GenerateConsistencyTokenRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GenerateConsistencyTokenRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @static
                         * @param {google.bigtable.admin.v2.GenerateConsistencyTokenRequest} message GenerateConsistencyTokenRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GenerateConsistencyTokenRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GenerateConsistencyTokenRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GenerateConsistencyTokenRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GenerateConsistencyTokenRequest;
                    })();
    
                    v2.GenerateConsistencyTokenResponse = (function() {
    
                        /**
                         * Properties of a GenerateConsistencyTokenResponse.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGenerateConsistencyTokenResponse
                         * @property {string|null} [consistencyToken] GenerateConsistencyTokenResponse consistencyToken
                         */
    
                        /**
                         * Constructs a new GenerateConsistencyTokenResponse.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GenerateConsistencyTokenResponse.
                         * @implements IGenerateConsistencyTokenResponse
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenResponse=} [properties] Properties to set
                         */
                        function GenerateConsistencyTokenResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GenerateConsistencyTokenResponse consistencyToken.
                         * @member {string} consistencyToken
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @instance
                         */
                        GenerateConsistencyTokenResponse.prototype.consistencyToken = "";
    
                        /**
                         * Creates a new GenerateConsistencyTokenResponse instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenResponse=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GenerateConsistencyTokenResponse} GenerateConsistencyTokenResponse instance
                         */
                        GenerateConsistencyTokenResponse.create = function create(properties) {
                            return new GenerateConsistencyTokenResponse(properties);
                        };
    
                        /**
                         * Encodes the specified GenerateConsistencyTokenResponse message. Does not implicitly {@link google.bigtable.admin.v2.GenerateConsistencyTokenResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenResponse} message GenerateConsistencyTokenResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GenerateConsistencyTokenResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.consistencyToken != null && message.hasOwnProperty("consistencyToken"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.consistencyToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GenerateConsistencyTokenResponse message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GenerateConsistencyTokenResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IGenerateConsistencyTokenResponse} message GenerateConsistencyTokenResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GenerateConsistencyTokenResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GenerateConsistencyTokenResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GenerateConsistencyTokenResponse} GenerateConsistencyTokenResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GenerateConsistencyTokenResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GenerateConsistencyTokenResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.consistencyToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GenerateConsistencyTokenResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GenerateConsistencyTokenResponse} GenerateConsistencyTokenResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GenerateConsistencyTokenResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GenerateConsistencyTokenResponse message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GenerateConsistencyTokenResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.consistencyToken != null && message.hasOwnProperty("consistencyToken"))
                                if (!$util.isString(message.consistencyToken))
                                    return "consistencyToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GenerateConsistencyTokenResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GenerateConsistencyTokenResponse} GenerateConsistencyTokenResponse
                         */
                        GenerateConsistencyTokenResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GenerateConsistencyTokenResponse)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GenerateConsistencyTokenResponse();
                            if (object.consistencyToken != null)
                                message.consistencyToken = String(object.consistencyToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GenerateConsistencyTokenResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @static
                         * @param {google.bigtable.admin.v2.GenerateConsistencyTokenResponse} message GenerateConsistencyTokenResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GenerateConsistencyTokenResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.consistencyToken = "";
                            if (message.consistencyToken != null && message.hasOwnProperty("consistencyToken"))
                                object.consistencyToken = message.consistencyToken;
                            return object;
                        };
    
                        /**
                         * Converts this GenerateConsistencyTokenResponse to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GenerateConsistencyTokenResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GenerateConsistencyTokenResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GenerateConsistencyTokenResponse;
                    })();
    
                    v2.CheckConsistencyRequest = (function() {
    
                        /**
                         * Properties of a CheckConsistencyRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICheckConsistencyRequest
                         * @property {string|null} [name] CheckConsistencyRequest name
                         * @property {string|null} [consistencyToken] CheckConsistencyRequest consistencyToken
                         */
    
                        /**
                         * Constructs a new CheckConsistencyRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CheckConsistencyRequest.
                         * @implements ICheckConsistencyRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICheckConsistencyRequest=} [properties] Properties to set
                         */
                        function CheckConsistencyRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CheckConsistencyRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @instance
                         */
                        CheckConsistencyRequest.prototype.name = "";
    
                        /**
                         * CheckConsistencyRequest consistencyToken.
                         * @member {string} consistencyToken
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @instance
                         */
                        CheckConsistencyRequest.prototype.consistencyToken = "";
    
                        /**
                         * Creates a new CheckConsistencyRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICheckConsistencyRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CheckConsistencyRequest} CheckConsistencyRequest instance
                         */
                        CheckConsistencyRequest.create = function create(properties) {
                            return new CheckConsistencyRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CheckConsistencyRequest message. Does not implicitly {@link google.bigtable.admin.v2.CheckConsistencyRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICheckConsistencyRequest} message CheckConsistencyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckConsistencyRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.consistencyToken != null && message.hasOwnProperty("consistencyToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.consistencyToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CheckConsistencyRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CheckConsistencyRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICheckConsistencyRequest} message CheckConsistencyRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckConsistencyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CheckConsistencyRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CheckConsistencyRequest} CheckConsistencyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckConsistencyRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CheckConsistencyRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.consistencyToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CheckConsistencyRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CheckConsistencyRequest} CheckConsistencyRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckConsistencyRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CheckConsistencyRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckConsistencyRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.consistencyToken != null && message.hasOwnProperty("consistencyToken"))
                                if (!$util.isString(message.consistencyToken))
                                    return "consistencyToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CheckConsistencyRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CheckConsistencyRequest} CheckConsistencyRequest
                         */
                        CheckConsistencyRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CheckConsistencyRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CheckConsistencyRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.consistencyToken != null)
                                message.consistencyToken = String(object.consistencyToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CheckConsistencyRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @static
                         * @param {google.bigtable.admin.v2.CheckConsistencyRequest} message CheckConsistencyRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckConsistencyRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.consistencyToken = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.consistencyToken != null && message.hasOwnProperty("consistencyToken"))
                                object.consistencyToken = message.consistencyToken;
                            return object;
                        };
    
                        /**
                         * Converts this CheckConsistencyRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CheckConsistencyRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckConsistencyRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CheckConsistencyRequest;
                    })();
    
                    v2.CheckConsistencyResponse = (function() {
    
                        /**
                         * Properties of a CheckConsistencyResponse.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICheckConsistencyResponse
                         * @property {boolean|null} [consistent] CheckConsistencyResponse consistent
                         */
    
                        /**
                         * Constructs a new CheckConsistencyResponse.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CheckConsistencyResponse.
                         * @implements ICheckConsistencyResponse
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICheckConsistencyResponse=} [properties] Properties to set
                         */
                        function CheckConsistencyResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CheckConsistencyResponse consistent.
                         * @member {boolean} consistent
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @instance
                         */
                        CheckConsistencyResponse.prototype.consistent = false;
    
                        /**
                         * Creates a new CheckConsistencyResponse instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ICheckConsistencyResponse=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CheckConsistencyResponse} CheckConsistencyResponse instance
                         */
                        CheckConsistencyResponse.create = function create(properties) {
                            return new CheckConsistencyResponse(properties);
                        };
    
                        /**
                         * Encodes the specified CheckConsistencyResponse message. Does not implicitly {@link google.bigtable.admin.v2.CheckConsistencyResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ICheckConsistencyResponse} message CheckConsistencyResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckConsistencyResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.consistent != null && message.hasOwnProperty("consistent"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.consistent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CheckConsistencyResponse message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CheckConsistencyResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ICheckConsistencyResponse} message CheckConsistencyResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckConsistencyResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CheckConsistencyResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CheckConsistencyResponse} CheckConsistencyResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckConsistencyResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CheckConsistencyResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.consistent = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CheckConsistencyResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CheckConsistencyResponse} CheckConsistencyResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckConsistencyResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CheckConsistencyResponse message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckConsistencyResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.consistent != null && message.hasOwnProperty("consistent"))
                                if (typeof message.consistent !== "boolean")
                                    return "consistent: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a CheckConsistencyResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CheckConsistencyResponse} CheckConsistencyResponse
                         */
                        CheckConsistencyResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CheckConsistencyResponse)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CheckConsistencyResponse();
                            if (object.consistent != null)
                                message.consistent = Boolean(object.consistent);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CheckConsistencyResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @static
                         * @param {google.bigtable.admin.v2.CheckConsistencyResponse} message CheckConsistencyResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckConsistencyResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.consistent = false;
                            if (message.consistent != null && message.hasOwnProperty("consistent"))
                                object.consistent = message.consistent;
                            return object;
                        };
    
                        /**
                         * Converts this CheckConsistencyResponse to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CheckConsistencyResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckConsistencyResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CheckConsistencyResponse;
                    })();
    
                    v2.SnapshotTableRequest = (function() {
    
                        /**
                         * Properties of a SnapshotTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface ISnapshotTableRequest
                         * @property {string|null} [name] SnapshotTableRequest name
                         * @property {string|null} [cluster] SnapshotTableRequest cluster
                         * @property {string|null} [snapshotId] SnapshotTableRequest snapshotId
                         * @property {google.protobuf.IDuration|null} [ttl] SnapshotTableRequest ttl
                         * @property {string|null} [description] SnapshotTableRequest description
                         */
    
                        /**
                         * Constructs a new SnapshotTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a SnapshotTableRequest.
                         * @implements ISnapshotTableRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.ISnapshotTableRequest=} [properties] Properties to set
                         */
                        function SnapshotTableRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SnapshotTableRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @instance
                         */
                        SnapshotTableRequest.prototype.name = "";
    
                        /**
                         * SnapshotTableRequest cluster.
                         * @member {string} cluster
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @instance
                         */
                        SnapshotTableRequest.prototype.cluster = "";
    
                        /**
                         * SnapshotTableRequest snapshotId.
                         * @member {string} snapshotId
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @instance
                         */
                        SnapshotTableRequest.prototype.snapshotId = "";
    
                        /**
                         * SnapshotTableRequest ttl.
                         * @member {google.protobuf.IDuration|null|undefined} ttl
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @instance
                         */
                        SnapshotTableRequest.prototype.ttl = null;
    
                        /**
                         * SnapshotTableRequest description.
                         * @member {string} description
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @instance
                         */
                        SnapshotTableRequest.prototype.description = "";
    
                        /**
                         * Creates a new SnapshotTableRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshotTableRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.SnapshotTableRequest} SnapshotTableRequest instance
                         */
                        SnapshotTableRequest.create = function create(properties) {
                            return new SnapshotTableRequest(properties);
                        };
    
                        /**
                         * Encodes the specified SnapshotTableRequest message. Does not implicitly {@link google.bigtable.admin.v2.SnapshotTableRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshotTableRequest} message SnapshotTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SnapshotTableRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.cluster != null && message.hasOwnProperty("cluster"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.cluster);
                            if (message.snapshotId != null && message.hasOwnProperty("snapshotId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.snapshotId);
                            if (message.ttl != null && message.hasOwnProperty("ttl"))
                                $root.google.protobuf.Duration.encode(message.ttl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.description != null && message.hasOwnProperty("description"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SnapshotTableRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.SnapshotTableRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshotTableRequest} message SnapshotTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SnapshotTableRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SnapshotTableRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.SnapshotTableRequest} SnapshotTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SnapshotTableRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.SnapshotTableRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.cluster = reader.string();
                                    break;
                                case 3:
                                    message.snapshotId = reader.string();
                                    break;
                                case 4:
                                    message.ttl = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.description = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SnapshotTableRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.SnapshotTableRequest} SnapshotTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SnapshotTableRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SnapshotTableRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SnapshotTableRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.cluster != null && message.hasOwnProperty("cluster"))
                                if (!$util.isString(message.cluster))
                                    return "cluster: string expected";
                            if (message.snapshotId != null && message.hasOwnProperty("snapshotId"))
                                if (!$util.isString(message.snapshotId))
                                    return "snapshotId: string expected";
                            if (message.ttl != null && message.hasOwnProperty("ttl")) {
                                var error = $root.google.protobuf.Duration.verify(message.ttl);
                                if (error)
                                    return "ttl." + error;
                            }
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a SnapshotTableRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.SnapshotTableRequest} SnapshotTableRequest
                         */
                        SnapshotTableRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.SnapshotTableRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.SnapshotTableRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.cluster != null)
                                message.cluster = String(object.cluster);
                            if (object.snapshotId != null)
                                message.snapshotId = String(object.snapshotId);
                            if (object.ttl != null) {
                                if (typeof object.ttl !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.SnapshotTableRequest.ttl: object expected");
                                message.ttl = $root.google.protobuf.Duration.fromObject(object.ttl);
                            }
                            if (object.description != null)
                                message.description = String(object.description);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SnapshotTableRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.SnapshotTableRequest} message SnapshotTableRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SnapshotTableRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.cluster = "";
                                object.snapshotId = "";
                                object.ttl = null;
                                object.description = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.cluster != null && message.hasOwnProperty("cluster"))
                                object.cluster = message.cluster;
                            if (message.snapshotId != null && message.hasOwnProperty("snapshotId"))
                                object.snapshotId = message.snapshotId;
                            if (message.ttl != null && message.hasOwnProperty("ttl"))
                                object.ttl = $root.google.protobuf.Duration.toObject(message.ttl, options);
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            return object;
                        };
    
                        /**
                         * Converts this SnapshotTableRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.SnapshotTableRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SnapshotTableRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return SnapshotTableRequest;
                    })();
    
                    v2.GetSnapshotRequest = (function() {
    
                        /**
                         * Properties of a GetSnapshotRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGetSnapshotRequest
                         * @property {string|null} [name] GetSnapshotRequest name
                         */
    
                        /**
                         * Constructs a new GetSnapshotRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GetSnapshotRequest.
                         * @implements IGetSnapshotRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGetSnapshotRequest=} [properties] Properties to set
                         */
                        function GetSnapshotRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetSnapshotRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @instance
                         */
                        GetSnapshotRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetSnapshotRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetSnapshotRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GetSnapshotRequest} GetSnapshotRequest instance
                         */
                        GetSnapshotRequest.create = function create(properties) {
                            return new GetSnapshotRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetSnapshotRequest message. Does not implicitly {@link google.bigtable.admin.v2.GetSnapshotRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetSnapshotRequest} message GetSnapshotRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetSnapshotRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetSnapshotRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GetSnapshotRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetSnapshotRequest} message GetSnapshotRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetSnapshotRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetSnapshotRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GetSnapshotRequest} GetSnapshotRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetSnapshotRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GetSnapshotRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetSnapshotRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GetSnapshotRequest} GetSnapshotRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetSnapshotRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetSnapshotRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetSnapshotRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetSnapshotRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GetSnapshotRequest} GetSnapshotRequest
                         */
                        GetSnapshotRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GetSnapshotRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GetSnapshotRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetSnapshotRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.GetSnapshotRequest} message GetSnapshotRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetSnapshotRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetSnapshotRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GetSnapshotRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetSnapshotRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetSnapshotRequest;
                    })();
    
                    v2.ListSnapshotsRequest = (function() {
    
                        /**
                         * Properties of a ListSnapshotsRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListSnapshotsRequest
                         * @property {string|null} [parent] ListSnapshotsRequest parent
                         * @property {number|null} [pageSize] ListSnapshotsRequest pageSize
                         * @property {string|null} [pageToken] ListSnapshotsRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListSnapshotsRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListSnapshotsRequest.
                         * @implements IListSnapshotsRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListSnapshotsRequest=} [properties] Properties to set
                         */
                        function ListSnapshotsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListSnapshotsRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @instance
                         */
                        ListSnapshotsRequest.prototype.parent = "";
    
                        /**
                         * ListSnapshotsRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @instance
                         */
                        ListSnapshotsRequest.prototype.pageSize = 0;
    
                        /**
                         * ListSnapshotsRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @instance
                         */
                        ListSnapshotsRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListSnapshotsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListSnapshotsRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListSnapshotsRequest} ListSnapshotsRequest instance
                         */
                        ListSnapshotsRequest.create = function create(properties) {
                            return new ListSnapshotsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListSnapshotsRequest message. Does not implicitly {@link google.bigtable.admin.v2.ListSnapshotsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListSnapshotsRequest} message ListSnapshotsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListSnapshotsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListSnapshotsRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListSnapshotsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListSnapshotsRequest} message ListSnapshotsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListSnapshotsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListSnapshotsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListSnapshotsRequest} ListSnapshotsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListSnapshotsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListSnapshotsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.pageSize = reader.int32();
                                    break;
                                case 3:
                                    message.pageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListSnapshotsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListSnapshotsRequest} ListSnapshotsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListSnapshotsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListSnapshotsRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListSnapshotsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListSnapshotsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListSnapshotsRequest} ListSnapshotsRequest
                         */
                        ListSnapshotsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListSnapshotsRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListSnapshotsRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListSnapshotsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ListSnapshotsRequest} message ListSnapshotsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListSnapshotsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListSnapshotsRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListSnapshotsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListSnapshotsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListSnapshotsRequest;
                    })();
    
                    v2.ListSnapshotsResponse = (function() {
    
                        /**
                         * Properties of a ListSnapshotsResponse.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListSnapshotsResponse
                         * @property {Array.<google.bigtable.admin.v2.ISnapshot>|null} [snapshots] ListSnapshotsResponse snapshots
                         * @property {string|null} [nextPageToken] ListSnapshotsResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListSnapshotsResponse.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListSnapshotsResponse.
                         * @implements IListSnapshotsResponse
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListSnapshotsResponse=} [properties] Properties to set
                         */
                        function ListSnapshotsResponse(properties) {
                            this.snapshots = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListSnapshotsResponse snapshots.
                         * @member {Array.<google.bigtable.admin.v2.ISnapshot>} snapshots
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @instance
                         */
                        ListSnapshotsResponse.prototype.snapshots = $util.emptyArray;
    
                        /**
                         * ListSnapshotsResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @instance
                         */
                        ListSnapshotsResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListSnapshotsResponse instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListSnapshotsResponse=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListSnapshotsResponse} ListSnapshotsResponse instance
                         */
                        ListSnapshotsResponse.create = function create(properties) {
                            return new ListSnapshotsResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListSnapshotsResponse message. Does not implicitly {@link google.bigtable.admin.v2.ListSnapshotsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListSnapshotsResponse} message ListSnapshotsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListSnapshotsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.snapshots != null && message.snapshots.length)
                                for (var i = 0; i < message.snapshots.length; ++i)
                                    $root.google.bigtable.admin.v2.Snapshot.encode(message.snapshots[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListSnapshotsResponse message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListSnapshotsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListSnapshotsResponse} message ListSnapshotsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListSnapshotsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListSnapshotsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListSnapshotsResponse} ListSnapshotsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListSnapshotsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListSnapshotsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.snapshots && message.snapshots.length))
                                        message.snapshots = [];
                                    message.snapshots.push($root.google.bigtable.admin.v2.Snapshot.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListSnapshotsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListSnapshotsResponse} ListSnapshotsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListSnapshotsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListSnapshotsResponse message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListSnapshotsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.snapshots != null && message.hasOwnProperty("snapshots")) {
                                if (!Array.isArray(message.snapshots))
                                    return "snapshots: array expected";
                                for (var i = 0; i < message.snapshots.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.Snapshot.verify(message.snapshots[i]);
                                    if (error)
                                        return "snapshots." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListSnapshotsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListSnapshotsResponse} ListSnapshotsResponse
                         */
                        ListSnapshotsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListSnapshotsResponse)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListSnapshotsResponse();
                            if (object.snapshots) {
                                if (!Array.isArray(object.snapshots))
                                    throw TypeError(".google.bigtable.admin.v2.ListSnapshotsResponse.snapshots: array expected");
                                message.snapshots = [];
                                for (var i = 0; i < object.snapshots.length; ++i) {
                                    if (typeof object.snapshots[i] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ListSnapshotsResponse.snapshots: object expected");
                                    message.snapshots[i] = $root.google.bigtable.admin.v2.Snapshot.fromObject(object.snapshots[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListSnapshotsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ListSnapshotsResponse} message ListSnapshotsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListSnapshotsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.snapshots = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.snapshots && message.snapshots.length) {
                                object.snapshots = [];
                                for (var j = 0; j < message.snapshots.length; ++j)
                                    object.snapshots[j] = $root.google.bigtable.admin.v2.Snapshot.toObject(message.snapshots[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListSnapshotsResponse to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListSnapshotsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListSnapshotsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListSnapshotsResponse;
                    })();
    
                    v2.DeleteSnapshotRequest = (function() {
    
                        /**
                         * Properties of a DeleteSnapshotRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IDeleteSnapshotRequest
                         * @property {string|null} [name] DeleteSnapshotRequest name
                         */
    
                        /**
                         * Constructs a new DeleteSnapshotRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a DeleteSnapshotRequest.
                         * @implements IDeleteSnapshotRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IDeleteSnapshotRequest=} [properties] Properties to set
                         */
                        function DeleteSnapshotRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteSnapshotRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @instance
                         */
                        DeleteSnapshotRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteSnapshotRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteSnapshotRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.DeleteSnapshotRequest} DeleteSnapshotRequest instance
                         */
                        DeleteSnapshotRequest.create = function create(properties) {
                            return new DeleteSnapshotRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteSnapshotRequest message. Does not implicitly {@link google.bigtable.admin.v2.DeleteSnapshotRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteSnapshotRequest} message DeleteSnapshotRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteSnapshotRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteSnapshotRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.DeleteSnapshotRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteSnapshotRequest} message DeleteSnapshotRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteSnapshotRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteSnapshotRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.DeleteSnapshotRequest} DeleteSnapshotRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteSnapshotRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.DeleteSnapshotRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteSnapshotRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.DeleteSnapshotRequest} DeleteSnapshotRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteSnapshotRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteSnapshotRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteSnapshotRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteSnapshotRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.DeleteSnapshotRequest} DeleteSnapshotRequest
                         */
                        DeleteSnapshotRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.DeleteSnapshotRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.DeleteSnapshotRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteSnapshotRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @static
                         * @param {google.bigtable.admin.v2.DeleteSnapshotRequest} message DeleteSnapshotRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteSnapshotRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteSnapshotRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.DeleteSnapshotRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteSnapshotRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteSnapshotRequest;
                    })();
    
                    v2.SnapshotTableMetadata = (function() {
    
                        /**
                         * Properties of a SnapshotTableMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface ISnapshotTableMetadata
                         * @property {google.bigtable.admin.v2.ISnapshotTableRequest|null} [originalRequest] SnapshotTableMetadata originalRequest
                         * @property {google.protobuf.ITimestamp|null} [requestTime] SnapshotTableMetadata requestTime
                         * @property {google.protobuf.ITimestamp|null} [finishTime] SnapshotTableMetadata finishTime
                         */
    
                        /**
                         * Constructs a new SnapshotTableMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a SnapshotTableMetadata.
                         * @implements ISnapshotTableMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.ISnapshotTableMetadata=} [properties] Properties to set
                         */
                        function SnapshotTableMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SnapshotTableMetadata originalRequest.
                         * @member {google.bigtable.admin.v2.ISnapshotTableRequest|null|undefined} originalRequest
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @instance
                         */
                        SnapshotTableMetadata.prototype.originalRequest = null;
    
                        /**
                         * SnapshotTableMetadata requestTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} requestTime
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @instance
                         */
                        SnapshotTableMetadata.prototype.requestTime = null;
    
                        /**
                         * SnapshotTableMetadata finishTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} finishTime
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @instance
                         */
                        SnapshotTableMetadata.prototype.finishTime = null;
    
                        /**
                         * Creates a new SnapshotTableMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshotTableMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.SnapshotTableMetadata} SnapshotTableMetadata instance
                         */
                        SnapshotTableMetadata.create = function create(properties) {
                            return new SnapshotTableMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified SnapshotTableMetadata message. Does not implicitly {@link google.bigtable.admin.v2.SnapshotTableMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshotTableMetadata} message SnapshotTableMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SnapshotTableMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                $root.google.bigtable.admin.v2.SnapshotTableRequest.encode(message.originalRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                $root.google.protobuf.Timestamp.encode(message.requestTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                $root.google.protobuf.Timestamp.encode(message.finishTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SnapshotTableMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.SnapshotTableMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshotTableMetadata} message SnapshotTableMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SnapshotTableMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SnapshotTableMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.SnapshotTableMetadata} SnapshotTableMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SnapshotTableMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.SnapshotTableMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.originalRequest = $root.google.bigtable.admin.v2.SnapshotTableRequest.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.requestTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.finishTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SnapshotTableMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.SnapshotTableMetadata} SnapshotTableMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SnapshotTableMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SnapshotTableMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SnapshotTableMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest")) {
                                var error = $root.google.bigtable.admin.v2.SnapshotTableRequest.verify(message.originalRequest);
                                if (error)
                                    return "originalRequest." + error;
                            }
                            if (message.requestTime != null && message.hasOwnProperty("requestTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.requestTime);
                                if (error)
                                    return "requestTime." + error;
                            }
                            if (message.finishTime != null && message.hasOwnProperty("finishTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.finishTime);
                                if (error)
                                    return "finishTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SnapshotTableMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.SnapshotTableMetadata} SnapshotTableMetadata
                         */
                        SnapshotTableMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.SnapshotTableMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.SnapshotTableMetadata();
                            if (object.originalRequest != null) {
                                if (typeof object.originalRequest !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.SnapshotTableMetadata.originalRequest: object expected");
                                message.originalRequest = $root.google.bigtable.admin.v2.SnapshotTableRequest.fromObject(object.originalRequest);
                            }
                            if (object.requestTime != null) {
                                if (typeof object.requestTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.SnapshotTableMetadata.requestTime: object expected");
                                message.requestTime = $root.google.protobuf.Timestamp.fromObject(object.requestTime);
                            }
                            if (object.finishTime != null) {
                                if (typeof object.finishTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.SnapshotTableMetadata.finishTime: object expected");
                                message.finishTime = $root.google.protobuf.Timestamp.fromObject(object.finishTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SnapshotTableMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.SnapshotTableMetadata} message SnapshotTableMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SnapshotTableMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.originalRequest = null;
                                object.requestTime = null;
                                object.finishTime = null;
                            }
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                object.originalRequest = $root.google.bigtable.admin.v2.SnapshotTableRequest.toObject(message.originalRequest, options);
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                object.requestTime = $root.google.protobuf.Timestamp.toObject(message.requestTime, options);
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                object.finishTime = $root.google.protobuf.Timestamp.toObject(message.finishTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this SnapshotTableMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.SnapshotTableMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SnapshotTableMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return SnapshotTableMetadata;
                    })();
    
                    v2.CreateTableFromSnapshotMetadata = (function() {
    
                        /**
                         * Properties of a CreateTableFromSnapshotMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateTableFromSnapshotMetadata
                         * @property {google.bigtable.admin.v2.ICreateTableFromSnapshotRequest|null} [originalRequest] CreateTableFromSnapshotMetadata originalRequest
                         * @property {google.protobuf.ITimestamp|null} [requestTime] CreateTableFromSnapshotMetadata requestTime
                         * @property {google.protobuf.ITimestamp|null} [finishTime] CreateTableFromSnapshotMetadata finishTime
                         */
    
                        /**
                         * Constructs a new CreateTableFromSnapshotMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateTableFromSnapshotMetadata.
                         * @implements ICreateTableFromSnapshotMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata=} [properties] Properties to set
                         */
                        function CreateTableFromSnapshotMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateTableFromSnapshotMetadata originalRequest.
                         * @member {google.bigtable.admin.v2.ICreateTableFromSnapshotRequest|null|undefined} originalRequest
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @instance
                         */
                        CreateTableFromSnapshotMetadata.prototype.originalRequest = null;
    
                        /**
                         * CreateTableFromSnapshotMetadata requestTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} requestTime
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @instance
                         */
                        CreateTableFromSnapshotMetadata.prototype.requestTime = null;
    
                        /**
                         * CreateTableFromSnapshotMetadata finishTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} finishTime
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @instance
                         */
                        CreateTableFromSnapshotMetadata.prototype.finishTime = null;
    
                        /**
                         * Creates a new CreateTableFromSnapshotMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateTableFromSnapshotMetadata} CreateTableFromSnapshotMetadata instance
                         */
                        CreateTableFromSnapshotMetadata.create = function create(properties) {
                            return new CreateTableFromSnapshotMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified CreateTableFromSnapshotMetadata message. Does not implicitly {@link google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata} message CreateTableFromSnapshotMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateTableFromSnapshotMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest.encode(message.originalRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                $root.google.protobuf.Timestamp.encode(message.requestTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                $root.google.protobuf.Timestamp.encode(message.finishTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateTableFromSnapshotMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateTableFromSnapshotMetadata} message CreateTableFromSnapshotMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateTableFromSnapshotMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateTableFromSnapshotMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateTableFromSnapshotMetadata} CreateTableFromSnapshotMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateTableFromSnapshotMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateTableFromSnapshotMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.originalRequest = $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.requestTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.finishTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateTableFromSnapshotMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateTableFromSnapshotMetadata} CreateTableFromSnapshotMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateTableFromSnapshotMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateTableFromSnapshotMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateTableFromSnapshotMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest")) {
                                var error = $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest.verify(message.originalRequest);
                                if (error)
                                    return "originalRequest." + error;
                            }
                            if (message.requestTime != null && message.hasOwnProperty("requestTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.requestTime);
                                if (error)
                                    return "requestTime." + error;
                            }
                            if (message.finishTime != null && message.hasOwnProperty("finishTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.finishTime);
                                if (error)
                                    return "finishTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateTableFromSnapshotMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateTableFromSnapshotMetadata} CreateTableFromSnapshotMetadata
                         */
                        CreateTableFromSnapshotMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateTableFromSnapshotMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateTableFromSnapshotMetadata();
                            if (object.originalRequest != null) {
                                if (typeof object.originalRequest !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.originalRequest: object expected");
                                message.originalRequest = $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest.fromObject(object.originalRequest);
                            }
                            if (object.requestTime != null) {
                                if (typeof object.requestTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.requestTime: object expected");
                                message.requestTime = $root.google.protobuf.Timestamp.fromObject(object.requestTime);
                            }
                            if (object.finishTime != null) {
                                if (typeof object.finishTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.finishTime: object expected");
                                message.finishTime = $root.google.protobuf.Timestamp.fromObject(object.finishTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateTableFromSnapshotMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.CreateTableFromSnapshotMetadata} message CreateTableFromSnapshotMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateTableFromSnapshotMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.originalRequest = null;
                                object.requestTime = null;
                                object.finishTime = null;
                            }
                            if (message.originalRequest != null && message.hasOwnProperty("originalRequest"))
                                object.originalRequest = $root.google.bigtable.admin.v2.CreateTableFromSnapshotRequest.toObject(message.originalRequest, options);
                            if (message.requestTime != null && message.hasOwnProperty("requestTime"))
                                object.requestTime = $root.google.protobuf.Timestamp.toObject(message.requestTime, options);
                            if (message.finishTime != null && message.hasOwnProperty("finishTime"))
                                object.finishTime = $root.google.protobuf.Timestamp.toObject(message.finishTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateTableFromSnapshotMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateTableFromSnapshotMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateTableFromSnapshotMetadata;
                    })();
    
                    v2.CreateBackupRequest = (function() {
    
                        /**
                         * Properties of a CreateBackupRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateBackupRequest
                         * @property {string|null} [parent] CreateBackupRequest parent
                         * @property {string|null} [backupId] CreateBackupRequest backupId
                         * @property {google.bigtable.admin.v2.IBackup|null} [backup] CreateBackupRequest backup
                         */
    
                        /**
                         * Constructs a new CreateBackupRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateBackupRequest.
                         * @implements ICreateBackupRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateBackupRequest=} [properties] Properties to set
                         */
                        function CreateBackupRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateBackupRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @instance
                         */
                        CreateBackupRequest.prototype.parent = "";
    
                        /**
                         * CreateBackupRequest backupId.
                         * @member {string} backupId
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @instance
                         */
                        CreateBackupRequest.prototype.backupId = "";
    
                        /**
                         * CreateBackupRequest backup.
                         * @member {google.bigtable.admin.v2.IBackup|null|undefined} backup
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @instance
                         */
                        CreateBackupRequest.prototype.backup = null;
    
                        /**
                         * Creates a new CreateBackupRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateBackupRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateBackupRequest} CreateBackupRequest instance
                         */
                        CreateBackupRequest.create = function create(properties) {
                            return new CreateBackupRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateBackupRequest message. Does not implicitly {@link google.bigtable.admin.v2.CreateBackupRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateBackupRequest} message CreateBackupRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateBackupRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.backupId != null && message.hasOwnProperty("backupId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.backupId);
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                $root.google.bigtable.admin.v2.Backup.encode(message.backup, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateBackupRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateBackupRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateBackupRequest} message CreateBackupRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateBackupRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateBackupRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateBackupRequest} CreateBackupRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateBackupRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateBackupRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.backupId = reader.string();
                                    break;
                                case 3:
                                    message.backup = $root.google.bigtable.admin.v2.Backup.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateBackupRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateBackupRequest} CreateBackupRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateBackupRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateBackupRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateBackupRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.backupId != null && message.hasOwnProperty("backupId"))
                                if (!$util.isString(message.backupId))
                                    return "backupId: string expected";
                            if (message.backup != null && message.hasOwnProperty("backup")) {
                                var error = $root.google.bigtable.admin.v2.Backup.verify(message.backup);
                                if (error)
                                    return "backup." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateBackupRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateBackupRequest} CreateBackupRequest
                         */
                        CreateBackupRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateBackupRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateBackupRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.backupId != null)
                                message.backupId = String(object.backupId);
                            if (object.backup != null) {
                                if (typeof object.backup !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateBackupRequest.backup: object expected");
                                message.backup = $root.google.bigtable.admin.v2.Backup.fromObject(object.backup);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateBackupRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.CreateBackupRequest} message CreateBackupRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateBackupRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.backupId = "";
                                object.backup = null;
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.backupId != null && message.hasOwnProperty("backupId"))
                                object.backupId = message.backupId;
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                object.backup = $root.google.bigtable.admin.v2.Backup.toObject(message.backup, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateBackupRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateBackupRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateBackupRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateBackupRequest;
                    })();
    
                    v2.CreateBackupMetadata = (function() {
    
                        /**
                         * Properties of a CreateBackupMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface ICreateBackupMetadata
                         * @property {string|null} [name] CreateBackupMetadata name
                         * @property {string|null} [sourceTable] CreateBackupMetadata sourceTable
                         * @property {google.protobuf.ITimestamp|null} [startTime] CreateBackupMetadata startTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] CreateBackupMetadata endTime
                         */
    
                        /**
                         * Constructs a new CreateBackupMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a CreateBackupMetadata.
                         * @implements ICreateBackupMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.ICreateBackupMetadata=} [properties] Properties to set
                         */
                        function CreateBackupMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateBackupMetadata name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @instance
                         */
                        CreateBackupMetadata.prototype.name = "";
    
                        /**
                         * CreateBackupMetadata sourceTable.
                         * @member {string} sourceTable
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @instance
                         */
                        CreateBackupMetadata.prototype.sourceTable = "";
    
                        /**
                         * CreateBackupMetadata startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @instance
                         */
                        CreateBackupMetadata.prototype.startTime = null;
    
                        /**
                         * CreateBackupMetadata endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @instance
                         */
                        CreateBackupMetadata.prototype.endTime = null;
    
                        /**
                         * Creates a new CreateBackupMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateBackupMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.CreateBackupMetadata} CreateBackupMetadata instance
                         */
                        CreateBackupMetadata.create = function create(properties) {
                            return new CreateBackupMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified CreateBackupMetadata message. Does not implicitly {@link google.bigtable.admin.v2.CreateBackupMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateBackupMetadata} message CreateBackupMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateBackupMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceTable);
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateBackupMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.CreateBackupMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.ICreateBackupMetadata} message CreateBackupMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateBackupMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateBackupMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.CreateBackupMetadata} CreateBackupMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateBackupMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.CreateBackupMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.sourceTable = reader.string();
                                    break;
                                case 3:
                                    message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateBackupMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.CreateBackupMetadata} CreateBackupMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateBackupMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateBackupMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateBackupMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                if (!$util.isString(message.sourceTable))
                                    return "sourceTable: string expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CreateBackupMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.CreateBackupMetadata} CreateBackupMetadata
                         */
                        CreateBackupMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.CreateBackupMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.CreateBackupMetadata();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.sourceTable != null)
                                message.sourceTable = String(object.sourceTable);
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateBackupMetadata.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.CreateBackupMetadata.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateBackupMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.CreateBackupMetadata} message CreateBackupMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateBackupMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.sourceTable = "";
                                object.startTime = null;
                                object.endTime = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                object.sourceTable = message.sourceTable;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this CreateBackupMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.CreateBackupMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateBackupMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CreateBackupMetadata;
                    })();
    
                    v2.GetBackupRequest = (function() {
    
                        /**
                         * Properties of a GetBackupRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGetBackupRequest
                         * @property {string|null} [name] GetBackupRequest name
                         */
    
                        /**
                         * Constructs a new GetBackupRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GetBackupRequest.
                         * @implements IGetBackupRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGetBackupRequest=} [properties] Properties to set
                         */
                        function GetBackupRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetBackupRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @instance
                         */
                        GetBackupRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetBackupRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetBackupRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GetBackupRequest} GetBackupRequest instance
                         */
                        GetBackupRequest.create = function create(properties) {
                            return new GetBackupRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetBackupRequest message. Does not implicitly {@link google.bigtable.admin.v2.GetBackupRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetBackupRequest} message GetBackupRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetBackupRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetBackupRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GetBackupRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IGetBackupRequest} message GetBackupRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetBackupRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetBackupRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GetBackupRequest} GetBackupRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetBackupRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GetBackupRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetBackupRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GetBackupRequest} GetBackupRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetBackupRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetBackupRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetBackupRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetBackupRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GetBackupRequest} GetBackupRequest
                         */
                        GetBackupRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GetBackupRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GetBackupRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetBackupRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.GetBackupRequest} message GetBackupRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetBackupRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetBackupRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GetBackupRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetBackupRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return GetBackupRequest;
                    })();
    
                    v2.UpdateBackupRequest = (function() {
    
                        /**
                         * Properties of an UpdateBackupRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IUpdateBackupRequest
                         * @property {google.bigtable.admin.v2.IBackup|null} [backup] UpdateBackupRequest backup
                         * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateBackupRequest updateMask
                         */
    
                        /**
                         * Constructs a new UpdateBackupRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an UpdateBackupRequest.
                         * @implements IUpdateBackupRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IUpdateBackupRequest=} [properties] Properties to set
                         */
                        function UpdateBackupRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdateBackupRequest backup.
                         * @member {google.bigtable.admin.v2.IBackup|null|undefined} backup
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @instance
                         */
                        UpdateBackupRequest.prototype.backup = null;
    
                        /**
                         * UpdateBackupRequest updateMask.
                         * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @instance
                         */
                        UpdateBackupRequest.prototype.updateMask = null;
    
                        /**
                         * Creates a new UpdateBackupRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateBackupRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.UpdateBackupRequest} UpdateBackupRequest instance
                         */
                        UpdateBackupRequest.create = function create(properties) {
                            return new UpdateBackupRequest(properties);
                        };
    
                        /**
                         * Encodes the specified UpdateBackupRequest message. Does not implicitly {@link google.bigtable.admin.v2.UpdateBackupRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateBackupRequest} message UpdateBackupRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateBackupRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                $root.google.bigtable.admin.v2.Backup.encode(message.backup, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdateBackupRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.UpdateBackupRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IUpdateBackupRequest} message UpdateBackupRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdateBackupRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdateBackupRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.UpdateBackupRequest} UpdateBackupRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateBackupRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.UpdateBackupRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.backup = $root.google.bigtable.admin.v2.Backup.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdateBackupRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.UpdateBackupRequest} UpdateBackupRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdateBackupRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdateBackupRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdateBackupRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.backup != null && message.hasOwnProperty("backup")) {
                                var error = $root.google.bigtable.admin.v2.Backup.verify(message.backup);
                                if (error)
                                    return "backup." + error;
                            }
                            if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                if (error)
                                    return "updateMask." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpdateBackupRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.UpdateBackupRequest} UpdateBackupRequest
                         */
                        UpdateBackupRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.UpdateBackupRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.UpdateBackupRequest();
                            if (object.backup != null) {
                                if (typeof object.backup !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateBackupRequest.backup: object expected");
                                message.backup = $root.google.bigtable.admin.v2.Backup.fromObject(object.backup);
                            }
                            if (object.updateMask != null) {
                                if (typeof object.updateMask !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.UpdateBackupRequest.updateMask: object expected");
                                message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdateBackupRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.UpdateBackupRequest} message UpdateBackupRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdateBackupRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.backup = null;
                                object.updateMask = null;
                            }
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                object.backup = $root.google.bigtable.admin.v2.Backup.toObject(message.backup, options);
                            if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpdateBackupRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.UpdateBackupRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdateBackupRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpdateBackupRequest;
                    })();
    
                    v2.DeleteBackupRequest = (function() {
    
                        /**
                         * Properties of a DeleteBackupRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IDeleteBackupRequest
                         * @property {string|null} [name] DeleteBackupRequest name
                         */
    
                        /**
                         * Constructs a new DeleteBackupRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a DeleteBackupRequest.
                         * @implements IDeleteBackupRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IDeleteBackupRequest=} [properties] Properties to set
                         */
                        function DeleteBackupRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteBackupRequest name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @instance
                         */
                        DeleteBackupRequest.prototype.name = "";
    
                        /**
                         * Creates a new DeleteBackupRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteBackupRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.DeleteBackupRequest} DeleteBackupRequest instance
                         */
                        DeleteBackupRequest.create = function create(properties) {
                            return new DeleteBackupRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteBackupRequest message. Does not implicitly {@link google.bigtable.admin.v2.DeleteBackupRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteBackupRequest} message DeleteBackupRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteBackupRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteBackupRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.DeleteBackupRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IDeleteBackupRequest} message DeleteBackupRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteBackupRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteBackupRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.DeleteBackupRequest} DeleteBackupRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteBackupRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.DeleteBackupRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteBackupRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.DeleteBackupRequest} DeleteBackupRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteBackupRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteBackupRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteBackupRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteBackupRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.DeleteBackupRequest} DeleteBackupRequest
                         */
                        DeleteBackupRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.DeleteBackupRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.DeleteBackupRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteBackupRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @static
                         * @param {google.bigtable.admin.v2.DeleteBackupRequest} message DeleteBackupRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteBackupRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteBackupRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.DeleteBackupRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteBackupRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteBackupRequest;
                    })();
    
                    v2.ListBackupsRequest = (function() {
    
                        /**
                         * Properties of a ListBackupsRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListBackupsRequest
                         * @property {string|null} [parent] ListBackupsRequest parent
                         * @property {string|null} [filter] ListBackupsRequest filter
                         * @property {string|null} [orderBy] ListBackupsRequest orderBy
                         * @property {number|null} [pageSize] ListBackupsRequest pageSize
                         * @property {string|null} [pageToken] ListBackupsRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListBackupsRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListBackupsRequest.
                         * @implements IListBackupsRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListBackupsRequest=} [properties] Properties to set
                         */
                        function ListBackupsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListBackupsRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @instance
                         */
                        ListBackupsRequest.prototype.parent = "";
    
                        /**
                         * ListBackupsRequest filter.
                         * @member {string} filter
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @instance
                         */
                        ListBackupsRequest.prototype.filter = "";
    
                        /**
                         * ListBackupsRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @instance
                         */
                        ListBackupsRequest.prototype.orderBy = "";
    
                        /**
                         * ListBackupsRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @instance
                         */
                        ListBackupsRequest.prototype.pageSize = 0;
    
                        /**
                         * ListBackupsRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @instance
                         */
                        ListBackupsRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListBackupsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListBackupsRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListBackupsRequest} ListBackupsRequest instance
                         */
                        ListBackupsRequest.create = function create(properties) {
                            return new ListBackupsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListBackupsRequest message. Does not implicitly {@link google.bigtable.admin.v2.ListBackupsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListBackupsRequest} message ListBackupsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListBackupsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.orderBy);
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pageSize);
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListBackupsRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListBackupsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IListBackupsRequest} message ListBackupsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListBackupsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListBackupsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListBackupsRequest} ListBackupsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListBackupsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListBackupsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.filter = reader.string();
                                    break;
                                case 3:
                                    message.orderBy = reader.string();
                                    break;
                                case 4:
                                    message.pageSize = reader.int32();
                                    break;
                                case 5:
                                    message.pageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListBackupsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListBackupsRequest} ListBackupsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListBackupsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListBackupsRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListBackupsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                if (!$util.isString(message.filter))
                                    return "filter: string expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListBackupsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListBackupsRequest} ListBackupsRequest
                         */
                        ListBackupsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListBackupsRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListBackupsRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.filter != null)
                                message.filter = String(object.filter);
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListBackupsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @static
                         * @param {google.bigtable.admin.v2.ListBackupsRequest} message ListBackupsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListBackupsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.filter = "";
                                object.orderBy = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = message.filter;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListBackupsRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListBackupsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListBackupsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListBackupsRequest;
                    })();
    
                    v2.ListBackupsResponse = (function() {
    
                        /**
                         * Properties of a ListBackupsResponse.
                         * @memberof google.bigtable.admin.v2
                         * @interface IListBackupsResponse
                         * @property {Array.<google.bigtable.admin.v2.IBackup>|null} [backups] ListBackupsResponse backups
                         * @property {string|null} [nextPageToken] ListBackupsResponse nextPageToken
                         */
    
                        /**
                         * Constructs a new ListBackupsResponse.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ListBackupsResponse.
                         * @implements IListBackupsResponse
                         * @constructor
                         * @param {google.bigtable.admin.v2.IListBackupsResponse=} [properties] Properties to set
                         */
                        function ListBackupsResponse(properties) {
                            this.backups = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListBackupsResponse backups.
                         * @member {Array.<google.bigtable.admin.v2.IBackup>} backups
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @instance
                         */
                        ListBackupsResponse.prototype.backups = $util.emptyArray;
    
                        /**
                         * ListBackupsResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @instance
                         */
                        ListBackupsResponse.prototype.nextPageToken = "";
    
                        /**
                         * Creates a new ListBackupsResponse instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListBackupsResponse=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ListBackupsResponse} ListBackupsResponse instance
                         */
                        ListBackupsResponse.create = function create(properties) {
                            return new ListBackupsResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListBackupsResponse message. Does not implicitly {@link google.bigtable.admin.v2.ListBackupsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListBackupsResponse} message ListBackupsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListBackupsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.backups != null && message.backups.length)
                                for (var i = 0; i < message.backups.length; ++i)
                                    $root.google.bigtable.admin.v2.Backup.encode(message.backups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListBackupsResponse message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ListBackupsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @static
                         * @param {google.bigtable.admin.v2.IListBackupsResponse} message ListBackupsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListBackupsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListBackupsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ListBackupsResponse} ListBackupsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListBackupsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ListBackupsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.backups && message.backups.length))
                                        message.backups = [];
                                    message.backups.push($root.google.bigtable.admin.v2.Backup.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.nextPageToken = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListBackupsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ListBackupsResponse} ListBackupsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListBackupsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListBackupsResponse message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListBackupsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.backups != null && message.hasOwnProperty("backups")) {
                                if (!Array.isArray(message.backups))
                                    return "backups: array expected";
                                for (var i = 0; i < message.backups.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.Backup.verify(message.backups[i]);
                                    if (error)
                                        return "backups." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListBackupsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ListBackupsResponse} ListBackupsResponse
                         */
                        ListBackupsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ListBackupsResponse)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ListBackupsResponse();
                            if (object.backups) {
                                if (!Array.isArray(object.backups))
                                    throw TypeError(".google.bigtable.admin.v2.ListBackupsResponse.backups: array expected");
                                message.backups = [];
                                for (var i = 0; i < object.backups.length; ++i) {
                                    if (typeof object.backups[i] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.ListBackupsResponse.backups: object expected");
                                    message.backups[i] = $root.google.bigtable.admin.v2.Backup.fromObject(object.backups[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListBackupsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @static
                         * @param {google.bigtable.admin.v2.ListBackupsResponse} message ListBackupsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListBackupsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.backups = [];
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.backups && message.backups.length) {
                                object.backups = [];
                                for (var j = 0; j < message.backups.length; ++j)
                                    object.backups[j] = $root.google.bigtable.admin.v2.Backup.toObject(message.backups[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListBackupsResponse to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ListBackupsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListBackupsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ListBackupsResponse;
                    })();
    
                    v2.RestoreTableRequest = (function() {
    
                        /**
                         * Properties of a RestoreTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @interface IRestoreTableRequest
                         * @property {string|null} [parent] RestoreTableRequest parent
                         * @property {string|null} [tableId] RestoreTableRequest tableId
                         * @property {string|null} [backup] RestoreTableRequest backup
                         */
    
                        /**
                         * Constructs a new RestoreTableRequest.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a RestoreTableRequest.
                         * @implements IRestoreTableRequest
                         * @constructor
                         * @param {google.bigtable.admin.v2.IRestoreTableRequest=} [properties] Properties to set
                         */
                        function RestoreTableRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RestoreTableRequest parent.
                         * @member {string} parent
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @instance
                         */
                        RestoreTableRequest.prototype.parent = "";
    
                        /**
                         * RestoreTableRequest tableId.
                         * @member {string} tableId
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @instance
                         */
                        RestoreTableRequest.prototype.tableId = "";
    
                        /**
                         * RestoreTableRequest backup.
                         * @member {string} backup
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @instance
                         */
                        RestoreTableRequest.prototype.backup = "";
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * RestoreTableRequest source.
                         * @member {"backup"|undefined} source
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @instance
                         */
                        Object.defineProperty(RestoreTableRequest.prototype, "source", {
                            get: $util.oneOfGetter($oneOfFields = ["backup"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new RestoreTableRequest instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreTableRequest=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.RestoreTableRequest} RestoreTableRequest instance
                         */
                        RestoreTableRequest.create = function create(properties) {
                            return new RestoreTableRequest(properties);
                        };
    
                        /**
                         * Encodes the specified RestoreTableRequest message. Does not implicitly {@link google.bigtable.admin.v2.RestoreTableRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreTableRequest} message RestoreTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestoreTableRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.tableId);
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.backup);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RestoreTableRequest message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.RestoreTableRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreTableRequest} message RestoreTableRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestoreTableRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RestoreTableRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.RestoreTableRequest} RestoreTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestoreTableRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.RestoreTableRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                case 2:
                                    message.tableId = reader.string();
                                    break;
                                case 3:
                                    message.backup = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RestoreTableRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.RestoreTableRequest} RestoreTableRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestoreTableRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RestoreTableRequest message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RestoreTableRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                if (!$util.isString(message.tableId))
                                    return "tableId: string expected";
                            if (message.backup != null && message.hasOwnProperty("backup")) {
                                properties.source = 1;
                                if (!$util.isString(message.backup))
                                    return "backup: string expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RestoreTableRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.RestoreTableRequest} RestoreTableRequest
                         */
                        RestoreTableRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.RestoreTableRequest)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.RestoreTableRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.tableId != null)
                                message.tableId = String(object.tableId);
                            if (object.backup != null)
                                message.backup = String(object.backup);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RestoreTableRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @static
                         * @param {google.bigtable.admin.v2.RestoreTableRequest} message RestoreTableRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RestoreTableRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.tableId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.tableId != null && message.hasOwnProperty("tableId"))
                                object.tableId = message.tableId;
                            if (message.backup != null && message.hasOwnProperty("backup")) {
                                object.backup = message.backup;
                                if (options.oneofs)
                                    object.source = "backup";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this RestoreTableRequest to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.RestoreTableRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RestoreTableRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RestoreTableRequest;
                    })();
    
                    v2.RestoreTableMetadata = (function() {
    
                        /**
                         * Properties of a RestoreTableMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface IRestoreTableMetadata
                         * @property {string|null} [name] RestoreTableMetadata name
                         * @property {google.bigtable.admin.v2.RestoreSourceType|null} [sourceType] RestoreTableMetadata sourceType
                         * @property {google.bigtable.admin.v2.IBackupInfo|null} [backupInfo] RestoreTableMetadata backupInfo
                         * @property {string|null} [optimizeTableOperationName] RestoreTableMetadata optimizeTableOperationName
                         * @property {google.bigtable.admin.v2.IOperationProgress|null} [progress] RestoreTableMetadata progress
                         */
    
                        /**
                         * Constructs a new RestoreTableMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a RestoreTableMetadata.
                         * @implements IRestoreTableMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.IRestoreTableMetadata=} [properties] Properties to set
                         */
                        function RestoreTableMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RestoreTableMetadata name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @instance
                         */
                        RestoreTableMetadata.prototype.name = "";
    
                        /**
                         * RestoreTableMetadata sourceType.
                         * @member {google.bigtable.admin.v2.RestoreSourceType} sourceType
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @instance
                         */
                        RestoreTableMetadata.prototype.sourceType = 0;
    
                        /**
                         * RestoreTableMetadata backupInfo.
                         * @member {google.bigtable.admin.v2.IBackupInfo|null|undefined} backupInfo
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @instance
                         */
                        RestoreTableMetadata.prototype.backupInfo = null;
    
                        /**
                         * RestoreTableMetadata optimizeTableOperationName.
                         * @member {string} optimizeTableOperationName
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @instance
                         */
                        RestoreTableMetadata.prototype.optimizeTableOperationName = "";
    
                        /**
                         * RestoreTableMetadata progress.
                         * @member {google.bigtable.admin.v2.IOperationProgress|null|undefined} progress
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @instance
                         */
                        RestoreTableMetadata.prototype.progress = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * RestoreTableMetadata sourceInfo.
                         * @member {"backupInfo"|undefined} sourceInfo
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @instance
                         */
                        Object.defineProperty(RestoreTableMetadata.prototype, "sourceInfo", {
                            get: $util.oneOfGetter($oneOfFields = ["backupInfo"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new RestoreTableMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreTableMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.RestoreTableMetadata} RestoreTableMetadata instance
                         */
                        RestoreTableMetadata.create = function create(properties) {
                            return new RestoreTableMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified RestoreTableMetadata message. Does not implicitly {@link google.bigtable.admin.v2.RestoreTableMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreTableMetadata} message RestoreTableMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestoreTableMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sourceType);
                            if (message.backupInfo != null && message.hasOwnProperty("backupInfo"))
                                $root.google.bigtable.admin.v2.BackupInfo.encode(message.backupInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.optimizeTableOperationName != null && message.hasOwnProperty("optimizeTableOperationName"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.optimizeTableOperationName);
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                $root.google.bigtable.admin.v2.OperationProgress.encode(message.progress, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RestoreTableMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.RestoreTableMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreTableMetadata} message RestoreTableMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestoreTableMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RestoreTableMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.RestoreTableMetadata} RestoreTableMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestoreTableMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.RestoreTableMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.sourceType = reader.int32();
                                    break;
                                case 3:
                                    message.backupInfo = $root.google.bigtable.admin.v2.BackupInfo.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.optimizeTableOperationName = reader.string();
                                    break;
                                case 5:
                                    message.progress = $root.google.bigtable.admin.v2.OperationProgress.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RestoreTableMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.RestoreTableMetadata} RestoreTableMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestoreTableMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RestoreTableMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RestoreTableMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                switch (message.sourceType) {
                                default:
                                    return "sourceType: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.backupInfo != null && message.hasOwnProperty("backupInfo")) {
                                properties.sourceInfo = 1;
                                {
                                    var error = $root.google.bigtable.admin.v2.BackupInfo.verify(message.backupInfo);
                                    if (error)
                                        return "backupInfo." + error;
                                }
                            }
                            if (message.optimizeTableOperationName != null && message.hasOwnProperty("optimizeTableOperationName"))
                                if (!$util.isString(message.optimizeTableOperationName))
                                    return "optimizeTableOperationName: string expected";
                            if (message.progress != null && message.hasOwnProperty("progress")) {
                                var error = $root.google.bigtable.admin.v2.OperationProgress.verify(message.progress);
                                if (error)
                                    return "progress." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RestoreTableMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.RestoreTableMetadata} RestoreTableMetadata
                         */
                        RestoreTableMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.RestoreTableMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.RestoreTableMetadata();
                            if (object.name != null)
                                message.name = String(object.name);
                            switch (object.sourceType) {
                            case "RESTORE_SOURCE_TYPE_UNSPECIFIED":
                            case 0:
                                message.sourceType = 0;
                                break;
                            case "BACKUP":
                            case 1:
                                message.sourceType = 1;
                                break;
                            }
                            if (object.backupInfo != null) {
                                if (typeof object.backupInfo !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.RestoreTableMetadata.backupInfo: object expected");
                                message.backupInfo = $root.google.bigtable.admin.v2.BackupInfo.fromObject(object.backupInfo);
                            }
                            if (object.optimizeTableOperationName != null)
                                message.optimizeTableOperationName = String(object.optimizeTableOperationName);
                            if (object.progress != null) {
                                if (typeof object.progress !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.RestoreTableMetadata.progress: object expected");
                                message.progress = $root.google.bigtable.admin.v2.OperationProgress.fromObject(object.progress);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RestoreTableMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.RestoreTableMetadata} message RestoreTableMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RestoreTableMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.sourceType = options.enums === String ? "RESTORE_SOURCE_TYPE_UNSPECIFIED" : 0;
                                object.optimizeTableOperationName = "";
                                object.progress = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                object.sourceType = options.enums === String ? $root.google.bigtable.admin.v2.RestoreSourceType[message.sourceType] : message.sourceType;
                            if (message.backupInfo != null && message.hasOwnProperty("backupInfo")) {
                                object.backupInfo = $root.google.bigtable.admin.v2.BackupInfo.toObject(message.backupInfo, options);
                                if (options.oneofs)
                                    object.sourceInfo = "backupInfo";
                            }
                            if (message.optimizeTableOperationName != null && message.hasOwnProperty("optimizeTableOperationName"))
                                object.optimizeTableOperationName = message.optimizeTableOperationName;
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                object.progress = $root.google.bigtable.admin.v2.OperationProgress.toObject(message.progress, options);
                            return object;
                        };
    
                        /**
                         * Converts this RestoreTableMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.RestoreTableMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RestoreTableMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RestoreTableMetadata;
                    })();
    
                    v2.OptimizeRestoredTableMetadata = (function() {
    
                        /**
                         * Properties of an OptimizeRestoredTableMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @interface IOptimizeRestoredTableMetadata
                         * @property {string|null} [name] OptimizeRestoredTableMetadata name
                         * @property {google.bigtable.admin.v2.IOperationProgress|null} [progress] OptimizeRestoredTableMetadata progress
                         */
    
                        /**
                         * Constructs a new OptimizeRestoredTableMetadata.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents an OptimizeRestoredTableMetadata.
                         * @implements IOptimizeRestoredTableMetadata
                         * @constructor
                         * @param {google.bigtable.admin.v2.IOptimizeRestoredTableMetadata=} [properties] Properties to set
                         */
                        function OptimizeRestoredTableMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OptimizeRestoredTableMetadata name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @instance
                         */
                        OptimizeRestoredTableMetadata.prototype.name = "";
    
                        /**
                         * OptimizeRestoredTableMetadata progress.
                         * @member {google.bigtable.admin.v2.IOperationProgress|null|undefined} progress
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @instance
                         */
                        OptimizeRestoredTableMetadata.prototype.progress = null;
    
                        /**
                         * Creates a new OptimizeRestoredTableMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IOptimizeRestoredTableMetadata=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.OptimizeRestoredTableMetadata} OptimizeRestoredTableMetadata instance
                         */
                        OptimizeRestoredTableMetadata.create = function create(properties) {
                            return new OptimizeRestoredTableMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified OptimizeRestoredTableMetadata message. Does not implicitly {@link google.bigtable.admin.v2.OptimizeRestoredTableMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IOptimizeRestoredTableMetadata} message OptimizeRestoredTableMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OptimizeRestoredTableMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                $root.google.bigtable.admin.v2.OperationProgress.encode(message.progress, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OptimizeRestoredTableMetadata message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.OptimizeRestoredTableMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.IOptimizeRestoredTableMetadata} message OptimizeRestoredTableMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OptimizeRestoredTableMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OptimizeRestoredTableMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.OptimizeRestoredTableMetadata} OptimizeRestoredTableMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OptimizeRestoredTableMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.OptimizeRestoredTableMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.progress = $root.google.bigtable.admin.v2.OperationProgress.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OptimizeRestoredTableMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.OptimizeRestoredTableMetadata} OptimizeRestoredTableMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OptimizeRestoredTableMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OptimizeRestoredTableMetadata message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OptimizeRestoredTableMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.progress != null && message.hasOwnProperty("progress")) {
                                var error = $root.google.bigtable.admin.v2.OperationProgress.verify(message.progress);
                                if (error)
                                    return "progress." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an OptimizeRestoredTableMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.OptimizeRestoredTableMetadata} OptimizeRestoredTableMetadata
                         */
                        OptimizeRestoredTableMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.OptimizeRestoredTableMetadata)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.OptimizeRestoredTableMetadata();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.progress != null) {
                                if (typeof object.progress !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.OptimizeRestoredTableMetadata.progress: object expected");
                                message.progress = $root.google.bigtable.admin.v2.OperationProgress.fromObject(object.progress);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OptimizeRestoredTableMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @static
                         * @param {google.bigtable.admin.v2.OptimizeRestoredTableMetadata} message OptimizeRestoredTableMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OptimizeRestoredTableMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.progress = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                object.progress = $root.google.bigtable.admin.v2.OperationProgress.toObject(message.progress, options);
                            return object;
                        };
    
                        /**
                         * Converts this OptimizeRestoredTableMetadata to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.OptimizeRestoredTableMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OptimizeRestoredTableMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return OptimizeRestoredTableMetadata;
                    })();
    
                    /**
                     * RestoreSourceType enum.
                     * @name google.bigtable.admin.v2.RestoreSourceType
                     * @enum {string}
                     * @property {number} RESTORE_SOURCE_TYPE_UNSPECIFIED=0 RESTORE_SOURCE_TYPE_UNSPECIFIED value
                     * @property {number} BACKUP=1 BACKUP value
                     */
                    v2.RestoreSourceType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "RESTORE_SOURCE_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "BACKUP"] = 1;
                        return values;
                    })();
    
                    v2.RestoreInfo = (function() {
    
                        /**
                         * Properties of a RestoreInfo.
                         * @memberof google.bigtable.admin.v2
                         * @interface IRestoreInfo
                         * @property {google.bigtable.admin.v2.RestoreSourceType|null} [sourceType] RestoreInfo sourceType
                         * @property {google.bigtable.admin.v2.IBackupInfo|null} [backupInfo] RestoreInfo backupInfo
                         */
    
                        /**
                         * Constructs a new RestoreInfo.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a RestoreInfo.
                         * @implements IRestoreInfo
                         * @constructor
                         * @param {google.bigtable.admin.v2.IRestoreInfo=} [properties] Properties to set
                         */
                        function RestoreInfo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * RestoreInfo sourceType.
                         * @member {google.bigtable.admin.v2.RestoreSourceType} sourceType
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @instance
                         */
                        RestoreInfo.prototype.sourceType = 0;
    
                        /**
                         * RestoreInfo backupInfo.
                         * @member {google.bigtable.admin.v2.IBackupInfo|null|undefined} backupInfo
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @instance
                         */
                        RestoreInfo.prototype.backupInfo = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * RestoreInfo sourceInfo.
                         * @member {"backupInfo"|undefined} sourceInfo
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @instance
                         */
                        Object.defineProperty(RestoreInfo.prototype, "sourceInfo", {
                            get: $util.oneOfGetter($oneOfFields = ["backupInfo"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new RestoreInfo instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreInfo=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.RestoreInfo} RestoreInfo instance
                         */
                        RestoreInfo.create = function create(properties) {
                            return new RestoreInfo(properties);
                        };
    
                        /**
                         * Encodes the specified RestoreInfo message. Does not implicitly {@link google.bigtable.admin.v2.RestoreInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreInfo} message RestoreInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestoreInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sourceType);
                            if (message.backupInfo != null && message.hasOwnProperty("backupInfo"))
                                $root.google.bigtable.admin.v2.BackupInfo.encode(message.backupInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified RestoreInfo message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.RestoreInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @static
                         * @param {google.bigtable.admin.v2.IRestoreInfo} message RestoreInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestoreInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a RestoreInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.RestoreInfo} RestoreInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestoreInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.RestoreInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.sourceType = reader.int32();
                                    break;
                                case 2:
                                    message.backupInfo = $root.google.bigtable.admin.v2.BackupInfo.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a RestoreInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.RestoreInfo} RestoreInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestoreInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a RestoreInfo message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RestoreInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                switch (message.sourceType) {
                                default:
                                    return "sourceType: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.backupInfo != null && message.hasOwnProperty("backupInfo")) {
                                properties.sourceInfo = 1;
                                {
                                    var error = $root.google.bigtable.admin.v2.BackupInfo.verify(message.backupInfo);
                                    if (error)
                                        return "backupInfo." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a RestoreInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.RestoreInfo} RestoreInfo
                         */
                        RestoreInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.RestoreInfo)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.RestoreInfo();
                            switch (object.sourceType) {
                            case "RESTORE_SOURCE_TYPE_UNSPECIFIED":
                            case 0:
                                message.sourceType = 0;
                                break;
                            case "BACKUP":
                            case 1:
                                message.sourceType = 1;
                                break;
                            }
                            if (object.backupInfo != null) {
                                if (typeof object.backupInfo !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.RestoreInfo.backupInfo: object expected");
                                message.backupInfo = $root.google.bigtable.admin.v2.BackupInfo.fromObject(object.backupInfo);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a RestoreInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @static
                         * @param {google.bigtable.admin.v2.RestoreInfo} message RestoreInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RestoreInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.sourceType = options.enums === String ? "RESTORE_SOURCE_TYPE_UNSPECIFIED" : 0;
                            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                object.sourceType = options.enums === String ? $root.google.bigtable.admin.v2.RestoreSourceType[message.sourceType] : message.sourceType;
                            if (message.backupInfo != null && message.hasOwnProperty("backupInfo")) {
                                object.backupInfo = $root.google.bigtable.admin.v2.BackupInfo.toObject(message.backupInfo, options);
                                if (options.oneofs)
                                    object.sourceInfo = "backupInfo";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this RestoreInfo to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.RestoreInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RestoreInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return RestoreInfo;
                    })();
    
                    v2.Table = (function() {
    
                        /**
                         * Properties of a Table.
                         * @memberof google.bigtable.admin.v2
                         * @interface ITable
                         * @property {string|null} [name] Table name
                         * @property {Object.<string,google.bigtable.admin.v2.Table.IClusterState>|null} [clusterStates] Table clusterStates
                         * @property {Object.<string,google.bigtable.admin.v2.IColumnFamily>|null} [columnFamilies] Table columnFamilies
                         * @property {google.bigtable.admin.v2.Table.TimestampGranularity|null} [granularity] Table granularity
                         * @property {google.bigtable.admin.v2.IRestoreInfo|null} [restoreInfo] Table restoreInfo
                         */
    
                        /**
                         * Constructs a new Table.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a Table.
                         * @implements ITable
                         * @constructor
                         * @param {google.bigtable.admin.v2.ITable=} [properties] Properties to set
                         */
                        function Table(properties) {
                            this.clusterStates = {};
                            this.columnFamilies = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Table name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.Table
                         * @instance
                         */
                        Table.prototype.name = "";
    
                        /**
                         * Table clusterStates.
                         * @member {Object.<string,google.bigtable.admin.v2.Table.IClusterState>} clusterStates
                         * @memberof google.bigtable.admin.v2.Table
                         * @instance
                         */
                        Table.prototype.clusterStates = $util.emptyObject;
    
                        /**
                         * Table columnFamilies.
                         * @member {Object.<string,google.bigtable.admin.v2.IColumnFamily>} columnFamilies
                         * @memberof google.bigtable.admin.v2.Table
                         * @instance
                         */
                        Table.prototype.columnFamilies = $util.emptyObject;
    
                        /**
                         * Table granularity.
                         * @member {google.bigtable.admin.v2.Table.TimestampGranularity} granularity
                         * @memberof google.bigtable.admin.v2.Table
                         * @instance
                         */
                        Table.prototype.granularity = 0;
    
                        /**
                         * Table restoreInfo.
                         * @member {google.bigtable.admin.v2.IRestoreInfo|null|undefined} restoreInfo
                         * @memberof google.bigtable.admin.v2.Table
                         * @instance
                         */
                        Table.prototype.restoreInfo = null;
    
                        /**
                         * Creates a new Table instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.Table
                         * @static
                         * @param {google.bigtable.admin.v2.ITable=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.Table} Table instance
                         */
                        Table.create = function create(properties) {
                            return new Table(properties);
                        };
    
                        /**
                         * Encodes the specified Table message. Does not implicitly {@link google.bigtable.admin.v2.Table.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.Table
                         * @static
                         * @param {google.bigtable.admin.v2.ITable} message Table message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Table.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.clusterStates != null && message.hasOwnProperty("clusterStates"))
                                for (var keys = Object.keys(message.clusterStates), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.google.bigtable.admin.v2.Table.ClusterState.encode(message.clusterStates[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            if (message.columnFamilies != null && message.hasOwnProperty("columnFamilies"))
                                for (var keys = Object.keys(message.columnFamilies), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.google.bigtable.admin.v2.ColumnFamily.encode(message.columnFamilies[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            if (message.granularity != null && message.hasOwnProperty("granularity"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.granularity);
                            if (message.restoreInfo != null && message.hasOwnProperty("restoreInfo"))
                                $root.google.bigtable.admin.v2.RestoreInfo.encode(message.restoreInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Table message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.Table.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.Table
                         * @static
                         * @param {google.bigtable.admin.v2.ITable} message Table message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Table.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Table message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.Table
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.Table} Table
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Table.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.Table(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    reader.skip().pos++;
                                    if (message.clusterStates === $util.emptyObject)
                                        message.clusterStates = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.clusterStates[key] = $root.google.bigtable.admin.v2.Table.ClusterState.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    reader.skip().pos++;
                                    if (message.columnFamilies === $util.emptyObject)
                                        message.columnFamilies = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.columnFamilies[key] = $root.google.bigtable.admin.v2.ColumnFamily.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.granularity = reader.int32();
                                    break;
                                case 6:
                                    message.restoreInfo = $root.google.bigtable.admin.v2.RestoreInfo.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Table message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.Table
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.Table} Table
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Table.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Table message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.Table
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Table.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.clusterStates != null && message.hasOwnProperty("clusterStates")) {
                                if (!$util.isObject(message.clusterStates))
                                    return "clusterStates: object expected";
                                var key = Object.keys(message.clusterStates);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.Table.ClusterState.verify(message.clusterStates[key[i]]);
                                    if (error)
                                        return "clusterStates." + error;
                                }
                            }
                            if (message.columnFamilies != null && message.hasOwnProperty("columnFamilies")) {
                                if (!$util.isObject(message.columnFamilies))
                                    return "columnFamilies: object expected";
                                var key = Object.keys(message.columnFamilies);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.google.bigtable.admin.v2.ColumnFamily.verify(message.columnFamilies[key[i]]);
                                    if (error)
                                        return "columnFamilies." + error;
                                }
                            }
                            if (message.granularity != null && message.hasOwnProperty("granularity"))
                                switch (message.granularity) {
                                default:
                                    return "granularity: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.restoreInfo != null && message.hasOwnProperty("restoreInfo")) {
                                var error = $root.google.bigtable.admin.v2.RestoreInfo.verify(message.restoreInfo);
                                if (error)
                                    return "restoreInfo." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Table message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.Table
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.Table} Table
                         */
                        Table.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.Table)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.Table();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.clusterStates) {
                                if (typeof object.clusterStates !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Table.clusterStates: object expected");
                                message.clusterStates = {};
                                for (var keys = Object.keys(object.clusterStates), i = 0; i < keys.length; ++i) {
                                    if (typeof object.clusterStates[keys[i]] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.Table.clusterStates: object expected");
                                    message.clusterStates[keys[i]] = $root.google.bigtable.admin.v2.Table.ClusterState.fromObject(object.clusterStates[keys[i]]);
                                }
                            }
                            if (object.columnFamilies) {
                                if (typeof object.columnFamilies !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Table.columnFamilies: object expected");
                                message.columnFamilies = {};
                                for (var keys = Object.keys(object.columnFamilies), i = 0; i < keys.length; ++i) {
                                    if (typeof object.columnFamilies[keys[i]] !== "object")
                                        throw TypeError(".google.bigtable.admin.v2.Table.columnFamilies: object expected");
                                    message.columnFamilies[keys[i]] = $root.google.bigtable.admin.v2.ColumnFamily.fromObject(object.columnFamilies[keys[i]]);
                                }
                            }
                            switch (object.granularity) {
                            case "TIMESTAMP_GRANULARITY_UNSPECIFIED":
                            case 0:
                                message.granularity = 0;
                                break;
                            case "MILLIS":
                            case 1:
                                message.granularity = 1;
                                break;
                            }
                            if (object.restoreInfo != null) {
                                if (typeof object.restoreInfo !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Table.restoreInfo: object expected");
                                message.restoreInfo = $root.google.bigtable.admin.v2.RestoreInfo.fromObject(object.restoreInfo);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Table message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.Table
                         * @static
                         * @param {google.bigtable.admin.v2.Table} message Table
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Table.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults) {
                                object.clusterStates = {};
                                object.columnFamilies = {};
                            }
                            if (options.defaults) {
                                object.name = "";
                                object.granularity = options.enums === String ? "TIMESTAMP_GRANULARITY_UNSPECIFIED" : 0;
                                object.restoreInfo = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            var keys2;
                            if (message.clusterStates && (keys2 = Object.keys(message.clusterStates)).length) {
                                object.clusterStates = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.clusterStates[keys2[j]] = $root.google.bigtable.admin.v2.Table.ClusterState.toObject(message.clusterStates[keys2[j]], options);
                            }
                            if (message.columnFamilies && (keys2 = Object.keys(message.columnFamilies)).length) {
                                object.columnFamilies = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.columnFamilies[keys2[j]] = $root.google.bigtable.admin.v2.ColumnFamily.toObject(message.columnFamilies[keys2[j]], options);
                            }
                            if (message.granularity != null && message.hasOwnProperty("granularity"))
                                object.granularity = options.enums === String ? $root.google.bigtable.admin.v2.Table.TimestampGranularity[message.granularity] : message.granularity;
                            if (message.restoreInfo != null && message.hasOwnProperty("restoreInfo"))
                                object.restoreInfo = $root.google.bigtable.admin.v2.RestoreInfo.toObject(message.restoreInfo, options);
                            return object;
                        };
    
                        /**
                         * Converts this Table to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.Table
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Table.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        Table.ClusterState = (function() {
    
                            /**
                             * Properties of a ClusterState.
                             * @memberof google.bigtable.admin.v2.Table
                             * @interface IClusterState
                             * @property {google.bigtable.admin.v2.Table.ClusterState.ReplicationState|null} [replicationState] ClusterState replicationState
                             */
    
                            /**
                             * Constructs a new ClusterState.
                             * @memberof google.bigtable.admin.v2.Table
                             * @classdesc Represents a ClusterState.
                             * @implements IClusterState
                             * @constructor
                             * @param {google.bigtable.admin.v2.Table.IClusterState=} [properties] Properties to set
                             */
                            function ClusterState(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ClusterState replicationState.
                             * @member {google.bigtable.admin.v2.Table.ClusterState.ReplicationState} replicationState
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @instance
                             */
                            ClusterState.prototype.replicationState = 0;
    
                            /**
                             * Creates a new ClusterState instance using the specified properties.
                             * @function create
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @static
                             * @param {google.bigtable.admin.v2.Table.IClusterState=} [properties] Properties to set
                             * @returns {google.bigtable.admin.v2.Table.ClusterState} ClusterState instance
                             */
                            ClusterState.create = function create(properties) {
                                return new ClusterState(properties);
                            };
    
                            /**
                             * Encodes the specified ClusterState message. Does not implicitly {@link google.bigtable.admin.v2.Table.ClusterState.verify|verify} messages.
                             * @function encode
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @static
                             * @param {google.bigtable.admin.v2.Table.IClusterState} message ClusterState message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ClusterState.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.replicationState != null && message.hasOwnProperty("replicationState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.replicationState);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ClusterState message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.Table.ClusterState.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @static
                             * @param {google.bigtable.admin.v2.Table.IClusterState} message ClusterState message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ClusterState.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ClusterState message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.bigtable.admin.v2.Table.ClusterState} ClusterState
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ClusterState.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.Table.ClusterState();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.replicationState = reader.int32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ClusterState message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.bigtable.admin.v2.Table.ClusterState} ClusterState
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ClusterState.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ClusterState message.
                             * @function verify
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ClusterState.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.replicationState != null && message.hasOwnProperty("replicationState"))
                                    switch (message.replicationState) {
                                    default:
                                        return "replicationState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates a ClusterState message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.bigtable.admin.v2.Table.ClusterState} ClusterState
                             */
                            ClusterState.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.bigtable.admin.v2.Table.ClusterState)
                                    return object;
                                var message = new $root.google.bigtable.admin.v2.Table.ClusterState();
                                switch (object.replicationState) {
                                case "STATE_NOT_KNOWN":
                                case 0:
                                    message.replicationState = 0;
                                    break;
                                case "INITIALIZING":
                                case 1:
                                    message.replicationState = 1;
                                    break;
                                case "PLANNED_MAINTENANCE":
                                case 2:
                                    message.replicationState = 2;
                                    break;
                                case "UNPLANNED_MAINTENANCE":
                                case 3:
                                    message.replicationState = 3;
                                    break;
                                case "READY":
                                case 4:
                                    message.replicationState = 4;
                                    break;
                                case "READY_OPTIMIZING":
                                case 5:
                                    message.replicationState = 5;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ClusterState message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @static
                             * @param {google.bigtable.admin.v2.Table.ClusterState} message ClusterState
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ClusterState.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.replicationState = options.enums === String ? "STATE_NOT_KNOWN" : 0;
                                if (message.replicationState != null && message.hasOwnProperty("replicationState"))
                                    object.replicationState = options.enums === String ? $root.google.bigtable.admin.v2.Table.ClusterState.ReplicationState[message.replicationState] : message.replicationState;
                                return object;
                            };
    
                            /**
                             * Converts this ClusterState to JSON.
                             * @function toJSON
                             * @memberof google.bigtable.admin.v2.Table.ClusterState
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ClusterState.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * ReplicationState enum.
                             * @name google.bigtable.admin.v2.Table.ClusterState.ReplicationState
                             * @enum {string}
                             * @property {number} STATE_NOT_KNOWN=0 STATE_NOT_KNOWN value
                             * @property {number} INITIALIZING=1 INITIALIZING value
                             * @property {number} PLANNED_MAINTENANCE=2 PLANNED_MAINTENANCE value
                             * @property {number} UNPLANNED_MAINTENANCE=3 UNPLANNED_MAINTENANCE value
                             * @property {number} READY=4 READY value
                             * @property {number} READY_OPTIMIZING=5 READY_OPTIMIZING value
                             */
                            ClusterState.ReplicationState = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "STATE_NOT_KNOWN"] = 0;
                                values[valuesById[1] = "INITIALIZING"] = 1;
                                values[valuesById[2] = "PLANNED_MAINTENANCE"] = 2;
                                values[valuesById[3] = "UNPLANNED_MAINTENANCE"] = 3;
                                values[valuesById[4] = "READY"] = 4;
                                values[valuesById[5] = "READY_OPTIMIZING"] = 5;
                                return values;
                            })();
    
                            return ClusterState;
                        })();
    
                        /**
                         * TimestampGranularity enum.
                         * @name google.bigtable.admin.v2.Table.TimestampGranularity
                         * @enum {string}
                         * @property {number} TIMESTAMP_GRANULARITY_UNSPECIFIED=0 TIMESTAMP_GRANULARITY_UNSPECIFIED value
                         * @property {number} MILLIS=1 MILLIS value
                         */
                        Table.TimestampGranularity = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TIMESTAMP_GRANULARITY_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "MILLIS"] = 1;
                            return values;
                        })();
    
                        /**
                         * View enum.
                         * @name google.bigtable.admin.v2.Table.View
                         * @enum {string}
                         * @property {number} VIEW_UNSPECIFIED=0 VIEW_UNSPECIFIED value
                         * @property {number} NAME_ONLY=1 NAME_ONLY value
                         * @property {number} SCHEMA_VIEW=2 SCHEMA_VIEW value
                         * @property {number} REPLICATION_VIEW=3 REPLICATION_VIEW value
                         * @property {number} FULL=4 FULL value
                         */
                        Table.View = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "VIEW_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "NAME_ONLY"] = 1;
                            values[valuesById[2] = "SCHEMA_VIEW"] = 2;
                            values[valuesById[3] = "REPLICATION_VIEW"] = 3;
                            values[valuesById[4] = "FULL"] = 4;
                            return values;
                        })();
    
                        return Table;
                    })();
    
                    v2.ColumnFamily = (function() {
    
                        /**
                         * Properties of a ColumnFamily.
                         * @memberof google.bigtable.admin.v2
                         * @interface IColumnFamily
                         * @property {google.bigtable.admin.v2.IGcRule|null} [gcRule] ColumnFamily gcRule
                         */
    
                        /**
                         * Constructs a new ColumnFamily.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a ColumnFamily.
                         * @implements IColumnFamily
                         * @constructor
                         * @param {google.bigtable.admin.v2.IColumnFamily=} [properties] Properties to set
                         */
                        function ColumnFamily(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ColumnFamily gcRule.
                         * @member {google.bigtable.admin.v2.IGcRule|null|undefined} gcRule
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @instance
                         */
                        ColumnFamily.prototype.gcRule = null;
    
                        /**
                         * Creates a new ColumnFamily instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @static
                         * @param {google.bigtable.admin.v2.IColumnFamily=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.ColumnFamily} ColumnFamily instance
                         */
                        ColumnFamily.create = function create(properties) {
                            return new ColumnFamily(properties);
                        };
    
                        /**
                         * Encodes the specified ColumnFamily message. Does not implicitly {@link google.bigtable.admin.v2.ColumnFamily.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @static
                         * @param {google.bigtable.admin.v2.IColumnFamily} message ColumnFamily message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ColumnFamily.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.gcRule != null && message.hasOwnProperty("gcRule"))
                                $root.google.bigtable.admin.v2.GcRule.encode(message.gcRule, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ColumnFamily message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.ColumnFamily.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @static
                         * @param {google.bigtable.admin.v2.IColumnFamily} message ColumnFamily message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ColumnFamily.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ColumnFamily message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.ColumnFamily} ColumnFamily
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ColumnFamily.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.ColumnFamily();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.gcRule = $root.google.bigtable.admin.v2.GcRule.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ColumnFamily message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.ColumnFamily} ColumnFamily
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ColumnFamily.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ColumnFamily message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ColumnFamily.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.gcRule != null && message.hasOwnProperty("gcRule")) {
                                var error = $root.google.bigtable.admin.v2.GcRule.verify(message.gcRule);
                                if (error)
                                    return "gcRule." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ColumnFamily message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.ColumnFamily} ColumnFamily
                         */
                        ColumnFamily.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.ColumnFamily)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.ColumnFamily();
                            if (object.gcRule != null) {
                                if (typeof object.gcRule !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.ColumnFamily.gcRule: object expected");
                                message.gcRule = $root.google.bigtable.admin.v2.GcRule.fromObject(object.gcRule);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ColumnFamily message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @static
                         * @param {google.bigtable.admin.v2.ColumnFamily} message ColumnFamily
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ColumnFamily.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.gcRule = null;
                            if (message.gcRule != null && message.hasOwnProperty("gcRule"))
                                object.gcRule = $root.google.bigtable.admin.v2.GcRule.toObject(message.gcRule, options);
                            return object;
                        };
    
                        /**
                         * Converts this ColumnFamily to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.ColumnFamily
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ColumnFamily.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ColumnFamily;
                    })();
    
                    v2.GcRule = (function() {
    
                        /**
                         * Properties of a GcRule.
                         * @memberof google.bigtable.admin.v2
                         * @interface IGcRule
                         * @property {number|null} [maxNumVersions] GcRule maxNumVersions
                         * @property {google.protobuf.IDuration|null} [maxAge] GcRule maxAge
                         * @property {google.bigtable.admin.v2.GcRule.IIntersection|null} [intersection] GcRule intersection
                         * @property {google.bigtable.admin.v2.GcRule.IUnion|null} [union] GcRule union
                         */
    
                        /**
                         * Constructs a new GcRule.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a GcRule.
                         * @implements IGcRule
                         * @constructor
                         * @param {google.bigtable.admin.v2.IGcRule=} [properties] Properties to set
                         */
                        function GcRule(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GcRule maxNumVersions.
                         * @member {number} maxNumVersions
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @instance
                         */
                        GcRule.prototype.maxNumVersions = 0;
    
                        /**
                         * GcRule maxAge.
                         * @member {google.protobuf.IDuration|null|undefined} maxAge
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @instance
                         */
                        GcRule.prototype.maxAge = null;
    
                        /**
                         * GcRule intersection.
                         * @member {google.bigtable.admin.v2.GcRule.IIntersection|null|undefined} intersection
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @instance
                         */
                        GcRule.prototype.intersection = null;
    
                        /**
                         * GcRule union.
                         * @member {google.bigtable.admin.v2.GcRule.IUnion|null|undefined} union
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @instance
                         */
                        GcRule.prototype.union = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * GcRule rule.
                         * @member {"maxNumVersions"|"maxAge"|"intersection"|"union"|undefined} rule
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @instance
                         */
                        Object.defineProperty(GcRule.prototype, "rule", {
                            get: $util.oneOfGetter($oneOfFields = ["maxNumVersions", "maxAge", "intersection", "union"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new GcRule instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @static
                         * @param {google.bigtable.admin.v2.IGcRule=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.GcRule} GcRule instance
                         */
                        GcRule.create = function create(properties) {
                            return new GcRule(properties);
                        };
    
                        /**
                         * Encodes the specified GcRule message. Does not implicitly {@link google.bigtable.admin.v2.GcRule.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @static
                         * @param {google.bigtable.admin.v2.IGcRule} message GcRule message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GcRule.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.maxNumVersions != null && message.hasOwnProperty("maxNumVersions"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.maxNumVersions);
                            if (message.maxAge != null && message.hasOwnProperty("maxAge"))
                                $root.google.protobuf.Duration.encode(message.maxAge, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.intersection != null && message.hasOwnProperty("intersection"))
                                $root.google.bigtable.admin.v2.GcRule.Intersection.encode(message.intersection, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.union != null && message.hasOwnProperty("union"))
                                $root.google.bigtable.admin.v2.GcRule.Union.encode(message.union, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GcRule message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GcRule.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @static
                         * @param {google.bigtable.admin.v2.IGcRule} message GcRule message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GcRule.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GcRule message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.GcRule} GcRule
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GcRule.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GcRule();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.maxNumVersions = reader.int32();
                                    break;
                                case 2:
                                    message.maxAge = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.intersection = $root.google.bigtable.admin.v2.GcRule.Intersection.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.union = $root.google.bigtable.admin.v2.GcRule.Union.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GcRule message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.GcRule} GcRule
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GcRule.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GcRule message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GcRule.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.maxNumVersions != null && message.hasOwnProperty("maxNumVersions")) {
                                properties.rule = 1;
                                if (!$util.isInteger(message.maxNumVersions))
                                    return "maxNumVersions: integer expected";
                            }
                            if (message.maxAge != null && message.hasOwnProperty("maxAge")) {
                                if (properties.rule === 1)
                                    return "rule: multiple values";
                                properties.rule = 1;
                                {
                                    var error = $root.google.protobuf.Duration.verify(message.maxAge);
                                    if (error)
                                        return "maxAge." + error;
                                }
                            }
                            if (message.intersection != null && message.hasOwnProperty("intersection")) {
                                if (properties.rule === 1)
                                    return "rule: multiple values";
                                properties.rule = 1;
                                {
                                    var error = $root.google.bigtable.admin.v2.GcRule.Intersection.verify(message.intersection);
                                    if (error)
                                        return "intersection." + error;
                                }
                            }
                            if (message.union != null && message.hasOwnProperty("union")) {
                                if (properties.rule === 1)
                                    return "rule: multiple values";
                                properties.rule = 1;
                                {
                                    var error = $root.google.bigtable.admin.v2.GcRule.Union.verify(message.union);
                                    if (error)
                                        return "union." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a GcRule message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.GcRule} GcRule
                         */
                        GcRule.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.GcRule)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.GcRule();
                            if (object.maxNumVersions != null)
                                message.maxNumVersions = object.maxNumVersions | 0;
                            if (object.maxAge != null) {
                                if (typeof object.maxAge !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.GcRule.maxAge: object expected");
                                message.maxAge = $root.google.protobuf.Duration.fromObject(object.maxAge);
                            }
                            if (object.intersection != null) {
                                if (typeof object.intersection !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.GcRule.intersection: object expected");
                                message.intersection = $root.google.bigtable.admin.v2.GcRule.Intersection.fromObject(object.intersection);
                            }
                            if (object.union != null) {
                                if (typeof object.union !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.GcRule.union: object expected");
                                message.union = $root.google.bigtable.admin.v2.GcRule.Union.fromObject(object.union);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GcRule message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @static
                         * @param {google.bigtable.admin.v2.GcRule} message GcRule
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GcRule.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.maxNumVersions != null && message.hasOwnProperty("maxNumVersions")) {
                                object.maxNumVersions = message.maxNumVersions;
                                if (options.oneofs)
                                    object.rule = "maxNumVersions";
                            }
                            if (message.maxAge != null && message.hasOwnProperty("maxAge")) {
                                object.maxAge = $root.google.protobuf.Duration.toObject(message.maxAge, options);
                                if (options.oneofs)
                                    object.rule = "maxAge";
                            }
                            if (message.intersection != null && message.hasOwnProperty("intersection")) {
                                object.intersection = $root.google.bigtable.admin.v2.GcRule.Intersection.toObject(message.intersection, options);
                                if (options.oneofs)
                                    object.rule = "intersection";
                            }
                            if (message.union != null && message.hasOwnProperty("union")) {
                                object.union = $root.google.bigtable.admin.v2.GcRule.Union.toObject(message.union, options);
                                if (options.oneofs)
                                    object.rule = "union";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this GcRule to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.GcRule
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GcRule.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        GcRule.Intersection = (function() {
    
                            /**
                             * Properties of an Intersection.
                             * @memberof google.bigtable.admin.v2.GcRule
                             * @interface IIntersection
                             * @property {Array.<google.bigtable.admin.v2.IGcRule>|null} [rules] Intersection rules
                             */
    
                            /**
                             * Constructs a new Intersection.
                             * @memberof google.bigtable.admin.v2.GcRule
                             * @classdesc Represents an Intersection.
                             * @implements IIntersection
                             * @constructor
                             * @param {google.bigtable.admin.v2.GcRule.IIntersection=} [properties] Properties to set
                             */
                            function Intersection(properties) {
                                this.rules = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Intersection rules.
                             * @member {Array.<google.bigtable.admin.v2.IGcRule>} rules
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @instance
                             */
                            Intersection.prototype.rules = $util.emptyArray;
    
                            /**
                             * Creates a new Intersection instance using the specified properties.
                             * @function create
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @static
                             * @param {google.bigtable.admin.v2.GcRule.IIntersection=} [properties] Properties to set
                             * @returns {google.bigtable.admin.v2.GcRule.Intersection} Intersection instance
                             */
                            Intersection.create = function create(properties) {
                                return new Intersection(properties);
                            };
    
                            /**
                             * Encodes the specified Intersection message. Does not implicitly {@link google.bigtable.admin.v2.GcRule.Intersection.verify|verify} messages.
                             * @function encode
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @static
                             * @param {google.bigtable.admin.v2.GcRule.IIntersection} message Intersection message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Intersection.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.rules != null && message.rules.length)
                                    for (var i = 0; i < message.rules.length; ++i)
                                        $root.google.bigtable.admin.v2.GcRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Intersection message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GcRule.Intersection.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @static
                             * @param {google.bigtable.admin.v2.GcRule.IIntersection} message Intersection message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Intersection.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Intersection message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.bigtable.admin.v2.GcRule.Intersection} Intersection
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Intersection.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GcRule.Intersection();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.rules && message.rules.length))
                                            message.rules = [];
                                        message.rules.push($root.google.bigtable.admin.v2.GcRule.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Intersection message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.bigtable.admin.v2.GcRule.Intersection} Intersection
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Intersection.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Intersection message.
                             * @function verify
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Intersection.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.rules != null && message.hasOwnProperty("rules")) {
                                    if (!Array.isArray(message.rules))
                                        return "rules: array expected";
                                    for (var i = 0; i < message.rules.length; ++i) {
                                        var error = $root.google.bigtable.admin.v2.GcRule.verify(message.rules[i]);
                                        if (error)
                                            return "rules." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates an Intersection message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.bigtable.admin.v2.GcRule.Intersection} Intersection
                             */
                            Intersection.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.bigtable.admin.v2.GcRule.Intersection)
                                    return object;
                                var message = new $root.google.bigtable.admin.v2.GcRule.Intersection();
                                if (object.rules) {
                                    if (!Array.isArray(object.rules))
                                        throw TypeError(".google.bigtable.admin.v2.GcRule.Intersection.rules: array expected");
                                    message.rules = [];
                                    for (var i = 0; i < object.rules.length; ++i) {
                                        if (typeof object.rules[i] !== "object")
                                            throw TypeError(".google.bigtable.admin.v2.GcRule.Intersection.rules: object expected");
                                        message.rules[i] = $root.google.bigtable.admin.v2.GcRule.fromObject(object.rules[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Intersection message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @static
                             * @param {google.bigtable.admin.v2.GcRule.Intersection} message Intersection
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Intersection.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.rules = [];
                                if (message.rules && message.rules.length) {
                                    object.rules = [];
                                    for (var j = 0; j < message.rules.length; ++j)
                                        object.rules[j] = $root.google.bigtable.admin.v2.GcRule.toObject(message.rules[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Intersection to JSON.
                             * @function toJSON
                             * @memberof google.bigtable.admin.v2.GcRule.Intersection
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Intersection.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Intersection;
                        })();
    
                        GcRule.Union = (function() {
    
                            /**
                             * Properties of an Union.
                             * @memberof google.bigtable.admin.v2.GcRule
                             * @interface IUnion
                             * @property {Array.<google.bigtable.admin.v2.IGcRule>|null} [rules] Union rules
                             */
    
                            /**
                             * Constructs a new Union.
                             * @memberof google.bigtable.admin.v2.GcRule
                             * @classdesc Represents an Union.
                             * @implements IUnion
                             * @constructor
                             * @param {google.bigtable.admin.v2.GcRule.IUnion=} [properties] Properties to set
                             */
                            function Union(properties) {
                                this.rules = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Union rules.
                             * @member {Array.<google.bigtable.admin.v2.IGcRule>} rules
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @instance
                             */
                            Union.prototype.rules = $util.emptyArray;
    
                            /**
                             * Creates a new Union instance using the specified properties.
                             * @function create
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @static
                             * @param {google.bigtable.admin.v2.GcRule.IUnion=} [properties] Properties to set
                             * @returns {google.bigtable.admin.v2.GcRule.Union} Union instance
                             */
                            Union.create = function create(properties) {
                                return new Union(properties);
                            };
    
                            /**
                             * Encodes the specified Union message. Does not implicitly {@link google.bigtable.admin.v2.GcRule.Union.verify|verify} messages.
                             * @function encode
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @static
                             * @param {google.bigtable.admin.v2.GcRule.IUnion} message Union message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Union.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.rules != null && message.rules.length)
                                    for (var i = 0; i < message.rules.length; ++i)
                                        $root.google.bigtable.admin.v2.GcRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Union message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.GcRule.Union.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @static
                             * @param {google.bigtable.admin.v2.GcRule.IUnion} message Union message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Union.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Union message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.bigtable.admin.v2.GcRule.Union} Union
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Union.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.GcRule.Union();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.rules && message.rules.length))
                                            message.rules = [];
                                        message.rules.push($root.google.bigtable.admin.v2.GcRule.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Union message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.bigtable.admin.v2.GcRule.Union} Union
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Union.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Union message.
                             * @function verify
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Union.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.rules != null && message.hasOwnProperty("rules")) {
                                    if (!Array.isArray(message.rules))
                                        return "rules: array expected";
                                    for (var i = 0; i < message.rules.length; ++i) {
                                        var error = $root.google.bigtable.admin.v2.GcRule.verify(message.rules[i]);
                                        if (error)
                                            return "rules." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates an Union message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.bigtable.admin.v2.GcRule.Union} Union
                             */
                            Union.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.bigtable.admin.v2.GcRule.Union)
                                    return object;
                                var message = new $root.google.bigtable.admin.v2.GcRule.Union();
                                if (object.rules) {
                                    if (!Array.isArray(object.rules))
                                        throw TypeError(".google.bigtable.admin.v2.GcRule.Union.rules: array expected");
                                    message.rules = [];
                                    for (var i = 0; i < object.rules.length; ++i) {
                                        if (typeof object.rules[i] !== "object")
                                            throw TypeError(".google.bigtable.admin.v2.GcRule.Union.rules: object expected");
                                        message.rules[i] = $root.google.bigtable.admin.v2.GcRule.fromObject(object.rules[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Union message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @static
                             * @param {google.bigtable.admin.v2.GcRule.Union} message Union
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Union.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.rules = [];
                                if (message.rules && message.rules.length) {
                                    object.rules = [];
                                    for (var j = 0; j < message.rules.length; ++j)
                                        object.rules[j] = $root.google.bigtable.admin.v2.GcRule.toObject(message.rules[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Union to JSON.
                             * @function toJSON
                             * @memberof google.bigtable.admin.v2.GcRule.Union
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Union.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Union;
                        })();
    
                        return GcRule;
                    })();
    
                    v2.Snapshot = (function() {
    
                        /**
                         * Properties of a Snapshot.
                         * @memberof google.bigtable.admin.v2
                         * @interface ISnapshot
                         * @property {string|null} [name] Snapshot name
                         * @property {google.bigtable.admin.v2.ITable|null} [sourceTable] Snapshot sourceTable
                         * @property {number|Long|null} [dataSizeBytes] Snapshot dataSizeBytes
                         * @property {google.protobuf.ITimestamp|null} [createTime] Snapshot createTime
                         * @property {google.protobuf.ITimestamp|null} [deleteTime] Snapshot deleteTime
                         * @property {google.bigtable.admin.v2.Snapshot.State|null} [state] Snapshot state
                         * @property {string|null} [description] Snapshot description
                         */
    
                        /**
                         * Constructs a new Snapshot.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a Snapshot.
                         * @implements ISnapshot
                         * @constructor
                         * @param {google.bigtable.admin.v2.ISnapshot=} [properties] Properties to set
                         */
                        function Snapshot(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Snapshot name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @instance
                         */
                        Snapshot.prototype.name = "";
    
                        /**
                         * Snapshot sourceTable.
                         * @member {google.bigtable.admin.v2.ITable|null|undefined} sourceTable
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @instance
                         */
                        Snapshot.prototype.sourceTable = null;
    
                        /**
                         * Snapshot dataSizeBytes.
                         * @member {number|Long} dataSizeBytes
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @instance
                         */
                        Snapshot.prototype.dataSizeBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Snapshot createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @instance
                         */
                        Snapshot.prototype.createTime = null;
    
                        /**
                         * Snapshot deleteTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} deleteTime
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @instance
                         */
                        Snapshot.prototype.deleteTime = null;
    
                        /**
                         * Snapshot state.
                         * @member {google.bigtable.admin.v2.Snapshot.State} state
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @instance
                         */
                        Snapshot.prototype.state = 0;
    
                        /**
                         * Snapshot description.
                         * @member {string} description
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @instance
                         */
                        Snapshot.prototype.description = "";
    
                        /**
                         * Creates a new Snapshot instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshot=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.Snapshot} Snapshot instance
                         */
                        Snapshot.create = function create(properties) {
                            return new Snapshot(properties);
                        };
    
                        /**
                         * Encodes the specified Snapshot message. Does not implicitly {@link google.bigtable.admin.v2.Snapshot.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshot} message Snapshot message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Snapshot.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                $root.google.bigtable.admin.v2.Table.encode(message.sourceTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.dataSizeBytes != null && message.hasOwnProperty("dataSizeBytes"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.dataSizeBytes);
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.deleteTime != null && message.hasOwnProperty("deleteTime"))
                                $root.google.protobuf.Timestamp.encode(message.deleteTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.state);
                            if (message.description != null && message.hasOwnProperty("description"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.description);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Snapshot message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.Snapshot.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @static
                         * @param {google.bigtable.admin.v2.ISnapshot} message Snapshot message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Snapshot.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Snapshot message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.Snapshot} Snapshot
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Snapshot.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.Snapshot();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.sourceTable = $root.google.bigtable.admin.v2.Table.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.dataSizeBytes = reader.int64();
                                    break;
                                case 4:
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.deleteTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.state = reader.int32();
                                    break;
                                case 7:
                                    message.description = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Snapshot message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.Snapshot} Snapshot
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Snapshot.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Snapshot message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Snapshot.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable")) {
                                var error = $root.google.bigtable.admin.v2.Table.verify(message.sourceTable);
                                if (error)
                                    return "sourceTable." + error;
                            }
                            if (message.dataSizeBytes != null && message.hasOwnProperty("dataSizeBytes"))
                                if (!$util.isInteger(message.dataSizeBytes) && !(message.dataSizeBytes && $util.isInteger(message.dataSizeBytes.low) && $util.isInteger(message.dataSizeBytes.high)))
                                    return "dataSizeBytes: integer|Long expected";
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.deleteTime != null && message.hasOwnProperty("deleteTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.deleteTime);
                                if (error)
                                    return "deleteTime." + error;
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Snapshot message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.Snapshot} Snapshot
                         */
                        Snapshot.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.Snapshot)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.Snapshot();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.sourceTable != null) {
                                if (typeof object.sourceTable !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Snapshot.sourceTable: object expected");
                                message.sourceTable = $root.google.bigtable.admin.v2.Table.fromObject(object.sourceTable);
                            }
                            if (object.dataSizeBytes != null)
                                if ($util.Long)
                                    (message.dataSizeBytes = $util.Long.fromValue(object.dataSizeBytes)).unsigned = false;
                                else if (typeof object.dataSizeBytes === "string")
                                    message.dataSizeBytes = parseInt(object.dataSizeBytes, 10);
                                else if (typeof object.dataSizeBytes === "number")
                                    message.dataSizeBytes = object.dataSizeBytes;
                                else if (typeof object.dataSizeBytes === "object")
                                    message.dataSizeBytes = new $util.LongBits(object.dataSizeBytes.low >>> 0, object.dataSizeBytes.high >>> 0).toNumber();
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Snapshot.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.deleteTime != null) {
                                if (typeof object.deleteTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Snapshot.deleteTime: object expected");
                                message.deleteTime = $root.google.protobuf.Timestamp.fromObject(object.deleteTime);
                            }
                            switch (object.state) {
                            case "STATE_NOT_KNOWN":
                            case 0:
                                message.state = 0;
                                break;
                            case "READY":
                            case 1:
                                message.state = 1;
                                break;
                            case "CREATING":
                            case 2:
                                message.state = 2;
                                break;
                            }
                            if (object.description != null)
                                message.description = String(object.description);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Snapshot message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @static
                         * @param {google.bigtable.admin.v2.Snapshot} message Snapshot
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Snapshot.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.sourceTable = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.dataSizeBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.dataSizeBytes = options.longs === String ? "0" : 0;
                                object.createTime = null;
                                object.deleteTime = null;
                                object.state = options.enums === String ? "STATE_NOT_KNOWN" : 0;
                                object.description = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                object.sourceTable = $root.google.bigtable.admin.v2.Table.toObject(message.sourceTable, options);
                            if (message.dataSizeBytes != null && message.hasOwnProperty("dataSizeBytes"))
                                if (typeof message.dataSizeBytes === "number")
                                    object.dataSizeBytes = options.longs === String ? String(message.dataSizeBytes) : message.dataSizeBytes;
                                else
                                    object.dataSizeBytes = options.longs === String ? $util.Long.prototype.toString.call(message.dataSizeBytes) : options.longs === Number ? new $util.LongBits(message.dataSizeBytes.low >>> 0, message.dataSizeBytes.high >>> 0).toNumber() : message.dataSizeBytes;
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.deleteTime != null && message.hasOwnProperty("deleteTime"))
                                object.deleteTime = $root.google.protobuf.Timestamp.toObject(message.deleteTime, options);
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.bigtable.admin.v2.Snapshot.State[message.state] : message.state;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            return object;
                        };
    
                        /**
                         * Converts this Snapshot to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.Snapshot
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Snapshot.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * State enum.
                         * @name google.bigtable.admin.v2.Snapshot.State
                         * @enum {string}
                         * @property {number} STATE_NOT_KNOWN=0 STATE_NOT_KNOWN value
                         * @property {number} READY=1 READY value
                         * @property {number} CREATING=2 CREATING value
                         */
                        Snapshot.State = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATE_NOT_KNOWN"] = 0;
                            values[valuesById[1] = "READY"] = 1;
                            values[valuesById[2] = "CREATING"] = 2;
                            return values;
                        })();
    
                        return Snapshot;
                    })();
    
                    v2.Backup = (function() {
    
                        /**
                         * Properties of a Backup.
                         * @memberof google.bigtable.admin.v2
                         * @interface IBackup
                         * @property {string|null} [name] Backup name
                         * @property {string|null} [sourceTable] Backup sourceTable
                         * @property {google.protobuf.ITimestamp|null} [expireTime] Backup expireTime
                         * @property {google.protobuf.ITimestamp|null} [startTime] Backup startTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] Backup endTime
                         * @property {number|Long|null} [sizeBytes] Backup sizeBytes
                         * @property {google.bigtable.admin.v2.Backup.State|null} [state] Backup state
                         */
    
                        /**
                         * Constructs a new Backup.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a Backup.
                         * @implements IBackup
                         * @constructor
                         * @param {google.bigtable.admin.v2.IBackup=} [properties] Properties to set
                         */
                        function Backup(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Backup name.
                         * @member {string} name
                         * @memberof google.bigtable.admin.v2.Backup
                         * @instance
                         */
                        Backup.prototype.name = "";
    
                        /**
                         * Backup sourceTable.
                         * @member {string} sourceTable
                         * @memberof google.bigtable.admin.v2.Backup
                         * @instance
                         */
                        Backup.prototype.sourceTable = "";
    
                        /**
                         * Backup expireTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} expireTime
                         * @memberof google.bigtable.admin.v2.Backup
                         * @instance
                         */
                        Backup.prototype.expireTime = null;
    
                        /**
                         * Backup startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.bigtable.admin.v2.Backup
                         * @instance
                         */
                        Backup.prototype.startTime = null;
    
                        /**
                         * Backup endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.bigtable.admin.v2.Backup
                         * @instance
                         */
                        Backup.prototype.endTime = null;
    
                        /**
                         * Backup sizeBytes.
                         * @member {number|Long} sizeBytes
                         * @memberof google.bigtable.admin.v2.Backup
                         * @instance
                         */
                        Backup.prototype.sizeBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Backup state.
                         * @member {google.bigtable.admin.v2.Backup.State} state
                         * @memberof google.bigtable.admin.v2.Backup
                         * @instance
                         */
                        Backup.prototype.state = 0;
    
                        /**
                         * Creates a new Backup instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.Backup
                         * @static
                         * @param {google.bigtable.admin.v2.IBackup=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.Backup} Backup instance
                         */
                        Backup.create = function create(properties) {
                            return new Backup(properties);
                        };
    
                        /**
                         * Encodes the specified Backup message. Does not implicitly {@link google.bigtable.admin.v2.Backup.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.Backup
                         * @static
                         * @param {google.bigtable.admin.v2.IBackup} message Backup message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Backup.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceTable);
                            if (message.expireTime != null && message.hasOwnProperty("expireTime"))
                                $root.google.protobuf.Timestamp.encode(message.expireTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.sizeBytes != null && message.hasOwnProperty("sizeBytes"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.sizeBytes);
                            if (message.state != null && message.hasOwnProperty("state"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.state);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Backup message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.Backup.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.Backup
                         * @static
                         * @param {google.bigtable.admin.v2.IBackup} message Backup message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Backup.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Backup message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.Backup
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.Backup} Backup
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Backup.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.Backup();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.sourceTable = reader.string();
                                    break;
                                case 3:
                                    message.expireTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.sizeBytes = reader.int64();
                                    break;
                                case 7:
                                    message.state = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Backup message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.Backup
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.Backup} Backup
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Backup.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Backup message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.Backup
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Backup.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                if (!$util.isString(message.sourceTable))
                                    return "sourceTable: string expected";
                            if (message.expireTime != null && message.hasOwnProperty("expireTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.expireTime);
                                if (error)
                                    return "expireTime." + error;
                            }
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.sizeBytes != null && message.hasOwnProperty("sizeBytes"))
                                if (!$util.isInteger(message.sizeBytes) && !(message.sizeBytes && $util.isInteger(message.sizeBytes.low) && $util.isInteger(message.sizeBytes.high)))
                                    return "sizeBytes: integer|Long expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a Backup message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.Backup
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.Backup} Backup
                         */
                        Backup.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.Backup)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.Backup();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.sourceTable != null)
                                message.sourceTable = String(object.sourceTable);
                            if (object.expireTime != null) {
                                if (typeof object.expireTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Backup.expireTime: object expected");
                                message.expireTime = $root.google.protobuf.Timestamp.fromObject(object.expireTime);
                            }
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Backup.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.Backup.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            if (object.sizeBytes != null)
                                if ($util.Long)
                                    (message.sizeBytes = $util.Long.fromValue(object.sizeBytes)).unsigned = false;
                                else if (typeof object.sizeBytes === "string")
                                    message.sizeBytes = parseInt(object.sizeBytes, 10);
                                else if (typeof object.sizeBytes === "number")
                                    message.sizeBytes = object.sizeBytes;
                                else if (typeof object.sizeBytes === "object")
                                    message.sizeBytes = new $util.LongBits(object.sizeBytes.low >>> 0, object.sizeBytes.high >>> 0).toNumber();
                            switch (object.state) {
                            case "STATE_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "CREATING":
                            case 1:
                                message.state = 1;
                                break;
                            case "READY":
                            case 2:
                                message.state = 2;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Backup message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.Backup
                         * @static
                         * @param {google.bigtable.admin.v2.Backup} message Backup
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Backup.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.sourceTable = "";
                                object.expireTime = null;
                                object.startTime = null;
                                object.endTime = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.sizeBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.sizeBytes = options.longs === String ? "0" : 0;
                                object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                object.sourceTable = message.sourceTable;
                            if (message.expireTime != null && message.hasOwnProperty("expireTime"))
                                object.expireTime = $root.google.protobuf.Timestamp.toObject(message.expireTime, options);
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            if (message.sizeBytes != null && message.hasOwnProperty("sizeBytes"))
                                if (typeof message.sizeBytes === "number")
                                    object.sizeBytes = options.longs === String ? String(message.sizeBytes) : message.sizeBytes;
                                else
                                    object.sizeBytes = options.longs === String ? $util.Long.prototype.toString.call(message.sizeBytes) : options.longs === Number ? new $util.LongBits(message.sizeBytes.low >>> 0, message.sizeBytes.high >>> 0).toNumber() : message.sizeBytes;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.bigtable.admin.v2.Backup.State[message.state] : message.state;
                            return object;
                        };
    
                        /**
                         * Converts this Backup to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.Backup
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Backup.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * State enum.
                         * @name google.bigtable.admin.v2.Backup.State
                         * @enum {string}
                         * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                         * @property {number} CREATING=1 CREATING value
                         * @property {number} READY=2 READY value
                         */
                        Backup.State = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "CREATING"] = 1;
                            values[valuesById[2] = "READY"] = 2;
                            return values;
                        })();
    
                        return Backup;
                    })();
    
                    v2.BackupInfo = (function() {
    
                        /**
                         * Properties of a BackupInfo.
                         * @memberof google.bigtable.admin.v2
                         * @interface IBackupInfo
                         * @property {string|null} [backup] BackupInfo backup
                         * @property {google.protobuf.ITimestamp|null} [startTime] BackupInfo startTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] BackupInfo endTime
                         * @property {string|null} [sourceTable] BackupInfo sourceTable
                         */
    
                        /**
                         * Constructs a new BackupInfo.
                         * @memberof google.bigtable.admin.v2
                         * @classdesc Represents a BackupInfo.
                         * @implements IBackupInfo
                         * @constructor
                         * @param {google.bigtable.admin.v2.IBackupInfo=} [properties] Properties to set
                         */
                        function BackupInfo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * BackupInfo backup.
                         * @member {string} backup
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @instance
                         */
                        BackupInfo.prototype.backup = "";
    
                        /**
                         * BackupInfo startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @instance
                         */
                        BackupInfo.prototype.startTime = null;
    
                        /**
                         * BackupInfo endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @instance
                         */
                        BackupInfo.prototype.endTime = null;
    
                        /**
                         * BackupInfo sourceTable.
                         * @member {string} sourceTable
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @instance
                         */
                        BackupInfo.prototype.sourceTable = "";
    
                        /**
                         * Creates a new BackupInfo instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @static
                         * @param {google.bigtable.admin.v2.IBackupInfo=} [properties] Properties to set
                         * @returns {google.bigtable.admin.v2.BackupInfo} BackupInfo instance
                         */
                        BackupInfo.create = function create(properties) {
                            return new BackupInfo(properties);
                        };
    
                        /**
                         * Encodes the specified BackupInfo message. Does not implicitly {@link google.bigtable.admin.v2.BackupInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @static
                         * @param {google.bigtable.admin.v2.IBackupInfo} message BackupInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BackupInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.backup);
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.sourceTable);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified BackupInfo message, length delimited. Does not implicitly {@link google.bigtable.admin.v2.BackupInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @static
                         * @param {google.bigtable.admin.v2.IBackupInfo} message BackupInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BackupInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a BackupInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.admin.v2.BackupInfo} BackupInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BackupInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.admin.v2.BackupInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.backup = reader.string();
                                    break;
                                case 2:
                                    message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.sourceTable = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a BackupInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.admin.v2.BackupInfo} BackupInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BackupInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a BackupInfo message.
                         * @function verify
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BackupInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                if (!$util.isString(message.backup))
                                    return "backup: string expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                if (!$util.isString(message.sourceTable))
                                    return "sourceTable: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a BackupInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.admin.v2.BackupInfo} BackupInfo
                         */
                        BackupInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.admin.v2.BackupInfo)
                                return object;
                            var message = new $root.google.bigtable.admin.v2.BackupInfo();
                            if (object.backup != null)
                                message.backup = String(object.backup);
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.BackupInfo.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.bigtable.admin.v2.BackupInfo.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            if (object.sourceTable != null)
                                message.sourceTable = String(object.sourceTable);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a BackupInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @static
                         * @param {google.bigtable.admin.v2.BackupInfo} message BackupInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BackupInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.backup = "";
                                object.startTime = null;
                                object.endTime = null;
                                object.sourceTable = "";
                            }
                            if (message.backup != null && message.hasOwnProperty("backup"))
                                object.backup = message.backup;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            if (message.sourceTable != null && message.hasOwnProperty("sourceTable"))
                                object.sourceTable = message.sourceTable;
                            return object;
                        };
    
                        /**
                         * Converts this BackupInfo to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.admin.v2.BackupInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BackupInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return BackupInfo;
                    })();
    
                    return v2;
                })();
    
                return admin;
            })();
    
            bigtable.v2 = (function() {
    
                /**
                 * Namespace v2.
                 * @memberof google.bigtable
                 * @namespace
                 */
                var v2 = {};
    
                v2.Bigtable = (function() {
    
                    /**
                     * Constructs a new Bigtable service.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a Bigtable
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Bigtable(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Bigtable.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Bigtable;
    
                    /**
                     * Creates new Bigtable service using the specified rpc implementation.
                     * @function create
                     * @memberof google.bigtable.v2.Bigtable
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Bigtable} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Bigtable.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.bigtable.v2.Bigtable#readRows}.
                     * @memberof google.bigtable.v2.Bigtable
                     * @typedef ReadRowsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.bigtable.v2.ReadRowsResponse} [response] ReadRowsResponse
                     */
    
                    /**
                     * Calls ReadRows.
                     * @function readRows
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.IReadRowsRequest} request ReadRowsRequest message or plain object
                     * @param {google.bigtable.v2.Bigtable.ReadRowsCallback} callback Node-style callback called with the error, if any, and ReadRowsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Bigtable.prototype.readRows = function readRows(request, callback) {
                        return this.rpcCall(readRows, $root.google.bigtable.v2.ReadRowsRequest, $root.google.bigtable.v2.ReadRowsResponse, request, callback);
                    }, "name", { value: "ReadRows" });
    
                    /**
                     * Calls ReadRows.
                     * @function readRows
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.IReadRowsRequest} request ReadRowsRequest message or plain object
                     * @returns {Promise<google.bigtable.v2.ReadRowsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.bigtable.v2.Bigtable#sampleRowKeys}.
                     * @memberof google.bigtable.v2.Bigtable
                     * @typedef SampleRowKeysCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.bigtable.v2.SampleRowKeysResponse} [response] SampleRowKeysResponse
                     */
    
                    /**
                     * Calls SampleRowKeys.
                     * @function sampleRowKeys
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.ISampleRowKeysRequest} request SampleRowKeysRequest message or plain object
                     * @param {google.bigtable.v2.Bigtable.SampleRowKeysCallback} callback Node-style callback called with the error, if any, and SampleRowKeysResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Bigtable.prototype.sampleRowKeys = function sampleRowKeys(request, callback) {
                        return this.rpcCall(sampleRowKeys, $root.google.bigtable.v2.SampleRowKeysRequest, $root.google.bigtable.v2.SampleRowKeysResponse, request, callback);
                    }, "name", { value: "SampleRowKeys" });
    
                    /**
                     * Calls SampleRowKeys.
                     * @function sampleRowKeys
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.ISampleRowKeysRequest} request SampleRowKeysRequest message or plain object
                     * @returns {Promise<google.bigtable.v2.SampleRowKeysResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.bigtable.v2.Bigtable#mutateRow}.
                     * @memberof google.bigtable.v2.Bigtable
                     * @typedef MutateRowCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.bigtable.v2.MutateRowResponse} [response] MutateRowResponse
                     */
    
                    /**
                     * Calls MutateRow.
                     * @function mutateRow
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.IMutateRowRequest} request MutateRowRequest message or plain object
                     * @param {google.bigtable.v2.Bigtable.MutateRowCallback} callback Node-style callback called with the error, if any, and MutateRowResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Bigtable.prototype.mutateRow = function mutateRow(request, callback) {
                        return this.rpcCall(mutateRow, $root.google.bigtable.v2.MutateRowRequest, $root.google.bigtable.v2.MutateRowResponse, request, callback);
                    }, "name", { value: "MutateRow" });
    
                    /**
                     * Calls MutateRow.
                     * @function mutateRow
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.IMutateRowRequest} request MutateRowRequest message or plain object
                     * @returns {Promise<google.bigtable.v2.MutateRowResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.bigtable.v2.Bigtable#mutateRows}.
                     * @memberof google.bigtable.v2.Bigtable
                     * @typedef MutateRowsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.bigtable.v2.MutateRowsResponse} [response] MutateRowsResponse
                     */
    
                    /**
                     * Calls MutateRows.
                     * @function mutateRows
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.IMutateRowsRequest} request MutateRowsRequest message or plain object
                     * @param {google.bigtable.v2.Bigtable.MutateRowsCallback} callback Node-style callback called with the error, if any, and MutateRowsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Bigtable.prototype.mutateRows = function mutateRows(request, callback) {
                        return this.rpcCall(mutateRows, $root.google.bigtable.v2.MutateRowsRequest, $root.google.bigtable.v2.MutateRowsResponse, request, callback);
                    }, "name", { value: "MutateRows" });
    
                    /**
                     * Calls MutateRows.
                     * @function mutateRows
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.IMutateRowsRequest} request MutateRowsRequest message or plain object
                     * @returns {Promise<google.bigtable.v2.MutateRowsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.bigtable.v2.Bigtable#checkAndMutateRow}.
                     * @memberof google.bigtable.v2.Bigtable
                     * @typedef CheckAndMutateRowCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.bigtable.v2.CheckAndMutateRowResponse} [response] CheckAndMutateRowResponse
                     */
    
                    /**
                     * Calls CheckAndMutateRow.
                     * @function checkAndMutateRow
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.ICheckAndMutateRowRequest} request CheckAndMutateRowRequest message or plain object
                     * @param {google.bigtable.v2.Bigtable.CheckAndMutateRowCallback} callback Node-style callback called with the error, if any, and CheckAndMutateRowResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Bigtable.prototype.checkAndMutateRow = function checkAndMutateRow(request, callback) {
                        return this.rpcCall(checkAndMutateRow, $root.google.bigtable.v2.CheckAndMutateRowRequest, $root.google.bigtable.v2.CheckAndMutateRowResponse, request, callback);
                    }, "name", { value: "CheckAndMutateRow" });
    
                    /**
                     * Calls CheckAndMutateRow.
                     * @function checkAndMutateRow
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.ICheckAndMutateRowRequest} request CheckAndMutateRowRequest message or plain object
                     * @returns {Promise<google.bigtable.v2.CheckAndMutateRowResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.bigtable.v2.Bigtable#readModifyWriteRow}.
                     * @memberof google.bigtable.v2.Bigtable
                     * @typedef ReadModifyWriteRowCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.bigtable.v2.ReadModifyWriteRowResponse} [response] ReadModifyWriteRowResponse
                     */
    
                    /**
                     * Calls ReadModifyWriteRow.
                     * @function readModifyWriteRow
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.IReadModifyWriteRowRequest} request ReadModifyWriteRowRequest message or plain object
                     * @param {google.bigtable.v2.Bigtable.ReadModifyWriteRowCallback} callback Node-style callback called with the error, if any, and ReadModifyWriteRowResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Bigtable.prototype.readModifyWriteRow = function readModifyWriteRow(request, callback) {
                        return this.rpcCall(readModifyWriteRow, $root.google.bigtable.v2.ReadModifyWriteRowRequest, $root.google.bigtable.v2.ReadModifyWriteRowResponse, request, callback);
                    }, "name", { value: "ReadModifyWriteRow" });
    
                    /**
                     * Calls ReadModifyWriteRow.
                     * @function readModifyWriteRow
                     * @memberof google.bigtable.v2.Bigtable
                     * @instance
                     * @param {google.bigtable.v2.IReadModifyWriteRowRequest} request ReadModifyWriteRowRequest message or plain object
                     * @returns {Promise<google.bigtable.v2.ReadModifyWriteRowResponse>} Promise
                     * @variation 2
                     */
    
                    return Bigtable;
                })();
    
                v2.ReadRowsRequest = (function() {
    
                    /**
                     * Properties of a ReadRowsRequest.
                     * @memberof google.bigtable.v2
                     * @interface IReadRowsRequest
                     * @property {string|null} [tableName] ReadRowsRequest tableName
                     * @property {string|null} [appProfileId] ReadRowsRequest appProfileId
                     * @property {google.bigtable.v2.IRowSet|null} [rows] ReadRowsRequest rows
                     * @property {google.bigtable.v2.IRowFilter|null} [filter] ReadRowsRequest filter
                     * @property {number|Long|null} [rowsLimit] ReadRowsRequest rowsLimit
                     */
    
                    /**
                     * Constructs a new ReadRowsRequest.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a ReadRowsRequest.
                     * @implements IReadRowsRequest
                     * @constructor
                     * @param {google.bigtable.v2.IReadRowsRequest=} [properties] Properties to set
                     */
                    function ReadRowsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReadRowsRequest tableName.
                     * @member {string} tableName
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @instance
                     */
                    ReadRowsRequest.prototype.tableName = "";
    
                    /**
                     * ReadRowsRequest appProfileId.
                     * @member {string} appProfileId
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @instance
                     */
                    ReadRowsRequest.prototype.appProfileId = "";
    
                    /**
                     * ReadRowsRequest rows.
                     * @member {google.bigtable.v2.IRowSet|null|undefined} rows
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @instance
                     */
                    ReadRowsRequest.prototype.rows = null;
    
                    /**
                     * ReadRowsRequest filter.
                     * @member {google.bigtable.v2.IRowFilter|null|undefined} filter
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @instance
                     */
                    ReadRowsRequest.prototype.filter = null;
    
                    /**
                     * ReadRowsRequest rowsLimit.
                     * @member {number|Long} rowsLimit
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @instance
                     */
                    ReadRowsRequest.prototype.rowsLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new ReadRowsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @static
                     * @param {google.bigtable.v2.IReadRowsRequest=} [properties] Properties to set
                     * @returns {google.bigtable.v2.ReadRowsRequest} ReadRowsRequest instance
                     */
                    ReadRowsRequest.create = function create(properties) {
                        return new ReadRowsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ReadRowsRequest message. Does not implicitly {@link google.bigtable.v2.ReadRowsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @static
                     * @param {google.bigtable.v2.IReadRowsRequest} message ReadRowsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadRowsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tableName);
                        if (message.rows != null && message.hasOwnProperty("rows"))
                            $root.google.bigtable.v2.RowSet.encode(message.rows, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            $root.google.bigtable.v2.RowFilter.encode(message.filter, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.rowsLimit != null && message.hasOwnProperty("rowsLimit"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.rowsLimit);
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.appProfileId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadRowsRequest message, length delimited. Does not implicitly {@link google.bigtable.v2.ReadRowsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @static
                     * @param {google.bigtable.v2.IReadRowsRequest} message ReadRowsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadRowsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadRowsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.ReadRowsRequest} ReadRowsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadRowsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.ReadRowsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tableName = reader.string();
                                break;
                            case 5:
                                message.appProfileId = reader.string();
                                break;
                            case 2:
                                message.rows = $root.google.bigtable.v2.RowSet.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.filter = $root.google.bigtable.v2.RowFilter.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.rowsLimit = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadRowsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.ReadRowsRequest} ReadRowsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadRowsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadRowsRequest message.
                     * @function verify
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadRowsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            if (!$util.isString(message.tableName))
                                return "tableName: string expected";
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            if (!$util.isString(message.appProfileId))
                                return "appProfileId: string expected";
                        if (message.rows != null && message.hasOwnProperty("rows")) {
                            var error = $root.google.bigtable.v2.RowSet.verify(message.rows);
                            if (error)
                                return "rows." + error;
                        }
                        if (message.filter != null && message.hasOwnProperty("filter")) {
                            var error = $root.google.bigtable.v2.RowFilter.verify(message.filter);
                            if (error)
                                return "filter." + error;
                        }
                        if (message.rowsLimit != null && message.hasOwnProperty("rowsLimit"))
                            if (!$util.isInteger(message.rowsLimit) && !(message.rowsLimit && $util.isInteger(message.rowsLimit.low) && $util.isInteger(message.rowsLimit.high)))
                                return "rowsLimit: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReadRowsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.ReadRowsRequest} ReadRowsRequest
                     */
                    ReadRowsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.ReadRowsRequest)
                            return object;
                        var message = new $root.google.bigtable.v2.ReadRowsRequest();
                        if (object.tableName != null)
                            message.tableName = String(object.tableName);
                        if (object.appProfileId != null)
                            message.appProfileId = String(object.appProfileId);
                        if (object.rows != null) {
                            if (typeof object.rows !== "object")
                                throw TypeError(".google.bigtable.v2.ReadRowsRequest.rows: object expected");
                            message.rows = $root.google.bigtable.v2.RowSet.fromObject(object.rows);
                        }
                        if (object.filter != null) {
                            if (typeof object.filter !== "object")
                                throw TypeError(".google.bigtable.v2.ReadRowsRequest.filter: object expected");
                            message.filter = $root.google.bigtable.v2.RowFilter.fromObject(object.filter);
                        }
                        if (object.rowsLimit != null)
                            if ($util.Long)
                                (message.rowsLimit = $util.Long.fromValue(object.rowsLimit)).unsigned = false;
                            else if (typeof object.rowsLimit === "string")
                                message.rowsLimit = parseInt(object.rowsLimit, 10);
                            else if (typeof object.rowsLimit === "number")
                                message.rowsLimit = object.rowsLimit;
                            else if (typeof object.rowsLimit === "object")
                                message.rowsLimit = new $util.LongBits(object.rowsLimit.low >>> 0, object.rowsLimit.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReadRowsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @static
                     * @param {google.bigtable.v2.ReadRowsRequest} message ReadRowsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadRowsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.tableName = "";
                            object.rows = null;
                            object.filter = null;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.rowsLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.rowsLimit = options.longs === String ? "0" : 0;
                            object.appProfileId = "";
                        }
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            object.tableName = message.tableName;
                        if (message.rows != null && message.hasOwnProperty("rows"))
                            object.rows = $root.google.bigtable.v2.RowSet.toObject(message.rows, options);
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            object.filter = $root.google.bigtable.v2.RowFilter.toObject(message.filter, options);
                        if (message.rowsLimit != null && message.hasOwnProperty("rowsLimit"))
                            if (typeof message.rowsLimit === "number")
                                object.rowsLimit = options.longs === String ? String(message.rowsLimit) : message.rowsLimit;
                            else
                                object.rowsLimit = options.longs === String ? $util.Long.prototype.toString.call(message.rowsLimit) : options.longs === Number ? new $util.LongBits(message.rowsLimit.low >>> 0, message.rowsLimit.high >>> 0).toNumber() : message.rowsLimit;
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            object.appProfileId = message.appProfileId;
                        return object;
                    };
    
                    /**
                     * Converts this ReadRowsRequest to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.ReadRowsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadRowsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReadRowsRequest;
                })();
    
                v2.ReadRowsResponse = (function() {
    
                    /**
                     * Properties of a ReadRowsResponse.
                     * @memberof google.bigtable.v2
                     * @interface IReadRowsResponse
                     * @property {Array.<google.bigtable.v2.ReadRowsResponse.ICellChunk>|null} [chunks] ReadRowsResponse chunks
                     * @property {Uint8Array|null} [lastScannedRowKey] ReadRowsResponse lastScannedRowKey
                     */
    
                    /**
                     * Constructs a new ReadRowsResponse.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a ReadRowsResponse.
                     * @implements IReadRowsResponse
                     * @constructor
                     * @param {google.bigtable.v2.IReadRowsResponse=} [properties] Properties to set
                     */
                    function ReadRowsResponse(properties) {
                        this.chunks = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReadRowsResponse chunks.
                     * @member {Array.<google.bigtable.v2.ReadRowsResponse.ICellChunk>} chunks
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @instance
                     */
                    ReadRowsResponse.prototype.chunks = $util.emptyArray;
    
                    /**
                     * ReadRowsResponse lastScannedRowKey.
                     * @member {Uint8Array} lastScannedRowKey
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @instance
                     */
                    ReadRowsResponse.prototype.lastScannedRowKey = $util.newBuffer([]);
    
                    /**
                     * Creates a new ReadRowsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @static
                     * @param {google.bigtable.v2.IReadRowsResponse=} [properties] Properties to set
                     * @returns {google.bigtable.v2.ReadRowsResponse} ReadRowsResponse instance
                     */
                    ReadRowsResponse.create = function create(properties) {
                        return new ReadRowsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ReadRowsResponse message. Does not implicitly {@link google.bigtable.v2.ReadRowsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @static
                     * @param {google.bigtable.v2.IReadRowsResponse} message ReadRowsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadRowsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.chunks != null && message.chunks.length)
                            for (var i = 0; i < message.chunks.length; ++i)
                                $root.google.bigtable.v2.ReadRowsResponse.CellChunk.encode(message.chunks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.lastScannedRowKey != null && message.hasOwnProperty("lastScannedRowKey"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.lastScannedRowKey);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadRowsResponse message, length delimited. Does not implicitly {@link google.bigtable.v2.ReadRowsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @static
                     * @param {google.bigtable.v2.IReadRowsResponse} message ReadRowsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadRowsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadRowsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.ReadRowsResponse} ReadRowsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadRowsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.ReadRowsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.chunks && message.chunks.length))
                                    message.chunks = [];
                                message.chunks.push($root.google.bigtable.v2.ReadRowsResponse.CellChunk.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.lastScannedRowKey = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadRowsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.ReadRowsResponse} ReadRowsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadRowsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadRowsResponse message.
                     * @function verify
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadRowsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.chunks != null && message.hasOwnProperty("chunks")) {
                            if (!Array.isArray(message.chunks))
                                return "chunks: array expected";
                            for (var i = 0; i < message.chunks.length; ++i) {
                                var error = $root.google.bigtable.v2.ReadRowsResponse.CellChunk.verify(message.chunks[i]);
                                if (error)
                                    return "chunks." + error;
                            }
                        }
                        if (message.lastScannedRowKey != null && message.hasOwnProperty("lastScannedRowKey"))
                            if (!(message.lastScannedRowKey && typeof message.lastScannedRowKey.length === "number" || $util.isString(message.lastScannedRowKey)))
                                return "lastScannedRowKey: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReadRowsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.ReadRowsResponse} ReadRowsResponse
                     */
                    ReadRowsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.ReadRowsResponse)
                            return object;
                        var message = new $root.google.bigtable.v2.ReadRowsResponse();
                        if (object.chunks) {
                            if (!Array.isArray(object.chunks))
                                throw TypeError(".google.bigtable.v2.ReadRowsResponse.chunks: array expected");
                            message.chunks = [];
                            for (var i = 0; i < object.chunks.length; ++i) {
                                if (typeof object.chunks[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.ReadRowsResponse.chunks: object expected");
                                message.chunks[i] = $root.google.bigtable.v2.ReadRowsResponse.CellChunk.fromObject(object.chunks[i]);
                            }
                        }
                        if (object.lastScannedRowKey != null)
                            if (typeof object.lastScannedRowKey === "string")
                                $util.base64.decode(object.lastScannedRowKey, message.lastScannedRowKey = $util.newBuffer($util.base64.length(object.lastScannedRowKey)), 0);
                            else if (object.lastScannedRowKey.length)
                                message.lastScannedRowKey = object.lastScannedRowKey;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReadRowsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @static
                     * @param {google.bigtable.v2.ReadRowsResponse} message ReadRowsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadRowsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.chunks = [];
                        if (options.defaults)
                            if (options.bytes === String)
                                object.lastScannedRowKey = "";
                            else {
                                object.lastScannedRowKey = [];
                                if (options.bytes !== Array)
                                    object.lastScannedRowKey = $util.newBuffer(object.lastScannedRowKey);
                            }
                        if (message.chunks && message.chunks.length) {
                            object.chunks = [];
                            for (var j = 0; j < message.chunks.length; ++j)
                                object.chunks[j] = $root.google.bigtable.v2.ReadRowsResponse.CellChunk.toObject(message.chunks[j], options);
                        }
                        if (message.lastScannedRowKey != null && message.hasOwnProperty("lastScannedRowKey"))
                            object.lastScannedRowKey = options.bytes === String ? $util.base64.encode(message.lastScannedRowKey, 0, message.lastScannedRowKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.lastScannedRowKey) : message.lastScannedRowKey;
                        return object;
                    };
    
                    /**
                     * Converts this ReadRowsResponse to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.ReadRowsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadRowsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    ReadRowsResponse.CellChunk = (function() {
    
                        /**
                         * Properties of a CellChunk.
                         * @memberof google.bigtable.v2.ReadRowsResponse
                         * @interface ICellChunk
                         * @property {Uint8Array|null} [rowKey] CellChunk rowKey
                         * @property {google.protobuf.IStringValue|null} [familyName] CellChunk familyName
                         * @property {google.protobuf.IBytesValue|null} [qualifier] CellChunk qualifier
                         * @property {number|Long|null} [timestampMicros] CellChunk timestampMicros
                         * @property {Array.<string>|null} [labels] CellChunk labels
                         * @property {Uint8Array|null} [value] CellChunk value
                         * @property {number|null} [valueSize] CellChunk valueSize
                         * @property {boolean|null} [resetRow] CellChunk resetRow
                         * @property {boolean|null} [commitRow] CellChunk commitRow
                         */
    
                        /**
                         * Constructs a new CellChunk.
                         * @memberof google.bigtable.v2.ReadRowsResponse
                         * @classdesc Represents a CellChunk.
                         * @implements ICellChunk
                         * @constructor
                         * @param {google.bigtable.v2.ReadRowsResponse.ICellChunk=} [properties] Properties to set
                         */
                        function CellChunk(properties) {
                            this.labels = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CellChunk rowKey.
                         * @member {Uint8Array} rowKey
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.rowKey = $util.newBuffer([]);
    
                        /**
                         * CellChunk familyName.
                         * @member {google.protobuf.IStringValue|null|undefined} familyName
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.familyName = null;
    
                        /**
                         * CellChunk qualifier.
                         * @member {google.protobuf.IBytesValue|null|undefined} qualifier
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.qualifier = null;
    
                        /**
                         * CellChunk timestampMicros.
                         * @member {number|Long} timestampMicros
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.timestampMicros = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * CellChunk labels.
                         * @member {Array.<string>} labels
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.labels = $util.emptyArray;
    
                        /**
                         * CellChunk value.
                         * @member {Uint8Array} value
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.value = $util.newBuffer([]);
    
                        /**
                         * CellChunk valueSize.
                         * @member {number} valueSize
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.valueSize = 0;
    
                        /**
                         * CellChunk resetRow.
                         * @member {boolean} resetRow
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.resetRow = false;
    
                        /**
                         * CellChunk commitRow.
                         * @member {boolean} commitRow
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        CellChunk.prototype.commitRow = false;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * CellChunk rowStatus.
                         * @member {"resetRow"|"commitRow"|undefined} rowStatus
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         */
                        Object.defineProperty(CellChunk.prototype, "rowStatus", {
                            get: $util.oneOfGetter($oneOfFields = ["resetRow", "commitRow"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new CellChunk instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @static
                         * @param {google.bigtable.v2.ReadRowsResponse.ICellChunk=} [properties] Properties to set
                         * @returns {google.bigtable.v2.ReadRowsResponse.CellChunk} CellChunk instance
                         */
                        CellChunk.create = function create(properties) {
                            return new CellChunk(properties);
                        };
    
                        /**
                         * Encodes the specified CellChunk message. Does not implicitly {@link google.bigtable.v2.ReadRowsResponse.CellChunk.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @static
                         * @param {google.bigtable.v2.ReadRowsResponse.ICellChunk} message CellChunk message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CellChunk.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.rowKey);
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                $root.google.protobuf.StringValue.encode(message.familyName, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.qualifier != null && message.hasOwnProperty("qualifier"))
                                $root.google.protobuf.BytesValue.encode(message.qualifier, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.timestampMicros);
                            if (message.labels != null && message.labels.length)
                                for (var i = 0; i < message.labels.length; ++i)
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.labels[i]);
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.value);
                            if (message.valueSize != null && message.hasOwnProperty("valueSize"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.valueSize);
                            if (message.resetRow != null && message.hasOwnProperty("resetRow"))
                                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.resetRow);
                            if (message.commitRow != null && message.hasOwnProperty("commitRow"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.commitRow);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CellChunk message, length delimited. Does not implicitly {@link google.bigtable.v2.ReadRowsResponse.CellChunk.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @static
                         * @param {google.bigtable.v2.ReadRowsResponse.ICellChunk} message CellChunk message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CellChunk.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CellChunk message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.ReadRowsResponse.CellChunk} CellChunk
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CellChunk.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.ReadRowsResponse.CellChunk();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.rowKey = reader.bytes();
                                    break;
                                case 2:
                                    message.familyName = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.qualifier = $root.google.protobuf.BytesValue.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.timestampMicros = reader.int64();
                                    break;
                                case 5:
                                    if (!(message.labels && message.labels.length))
                                        message.labels = [];
                                    message.labels.push(reader.string());
                                    break;
                                case 6:
                                    message.value = reader.bytes();
                                    break;
                                case 7:
                                    message.valueSize = reader.int32();
                                    break;
                                case 8:
                                    message.resetRow = reader.bool();
                                    break;
                                case 9:
                                    message.commitRow = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CellChunk message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.ReadRowsResponse.CellChunk} CellChunk
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CellChunk.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CellChunk message.
                         * @function verify
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CellChunk.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                                if (!(message.rowKey && typeof message.rowKey.length === "number" || $util.isString(message.rowKey)))
                                    return "rowKey: buffer expected";
                            if (message.familyName != null && message.hasOwnProperty("familyName")) {
                                var error = $root.google.protobuf.StringValue.verify(message.familyName);
                                if (error)
                                    return "familyName." + error;
                            }
                            if (message.qualifier != null && message.hasOwnProperty("qualifier")) {
                                var error = $root.google.protobuf.BytesValue.verify(message.qualifier);
                                if (error)
                                    return "qualifier." + error;
                            }
                            if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                                if (!$util.isInteger(message.timestampMicros) && !(message.timestampMicros && $util.isInteger(message.timestampMicros.low) && $util.isInteger(message.timestampMicros.high)))
                                    return "timestampMicros: integer|Long expected";
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!Array.isArray(message.labels))
                                    return "labels: array expected";
                                for (var i = 0; i < message.labels.length; ++i)
                                    if (!$util.isString(message.labels[i]))
                                        return "labels: string[] expected";
                            }
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                                    return "value: buffer expected";
                            if (message.valueSize != null && message.hasOwnProperty("valueSize"))
                                if (!$util.isInteger(message.valueSize))
                                    return "valueSize: integer expected";
                            if (message.resetRow != null && message.hasOwnProperty("resetRow")) {
                                properties.rowStatus = 1;
                                if (typeof message.resetRow !== "boolean")
                                    return "resetRow: boolean expected";
                            }
                            if (message.commitRow != null && message.hasOwnProperty("commitRow")) {
                                if (properties.rowStatus === 1)
                                    return "rowStatus: multiple values";
                                properties.rowStatus = 1;
                                if (typeof message.commitRow !== "boolean")
                                    return "commitRow: boolean expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CellChunk message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.ReadRowsResponse.CellChunk} CellChunk
                         */
                        CellChunk.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.ReadRowsResponse.CellChunk)
                                return object;
                            var message = new $root.google.bigtable.v2.ReadRowsResponse.CellChunk();
                            if (object.rowKey != null)
                                if (typeof object.rowKey === "string")
                                    $util.base64.decode(object.rowKey, message.rowKey = $util.newBuffer($util.base64.length(object.rowKey)), 0);
                                else if (object.rowKey.length)
                                    message.rowKey = object.rowKey;
                            if (object.familyName != null) {
                                if (typeof object.familyName !== "object")
                                    throw TypeError(".google.bigtable.v2.ReadRowsResponse.CellChunk.familyName: object expected");
                                message.familyName = $root.google.protobuf.StringValue.fromObject(object.familyName);
                            }
                            if (object.qualifier != null) {
                                if (typeof object.qualifier !== "object")
                                    throw TypeError(".google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier: object expected");
                                message.qualifier = $root.google.protobuf.BytesValue.fromObject(object.qualifier);
                            }
                            if (object.timestampMicros != null)
                                if ($util.Long)
                                    (message.timestampMicros = $util.Long.fromValue(object.timestampMicros)).unsigned = false;
                                else if (typeof object.timestampMicros === "string")
                                    message.timestampMicros = parseInt(object.timestampMicros, 10);
                                else if (typeof object.timestampMicros === "number")
                                    message.timestampMicros = object.timestampMicros;
                                else if (typeof object.timestampMicros === "object")
                                    message.timestampMicros = new $util.LongBits(object.timestampMicros.low >>> 0, object.timestampMicros.high >>> 0).toNumber();
                            if (object.labels) {
                                if (!Array.isArray(object.labels))
                                    throw TypeError(".google.bigtable.v2.ReadRowsResponse.CellChunk.labels: array expected");
                                message.labels = [];
                                for (var i = 0; i < object.labels.length; ++i)
                                    message.labels[i] = String(object.labels[i]);
                            }
                            if (object.value != null)
                                if (typeof object.value === "string")
                                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                                else if (object.value.length)
                                    message.value = object.value;
                            if (object.valueSize != null)
                                message.valueSize = object.valueSize | 0;
                            if (object.resetRow != null)
                                message.resetRow = Boolean(object.resetRow);
                            if (object.commitRow != null)
                                message.commitRow = Boolean(object.commitRow);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CellChunk message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @static
                         * @param {google.bigtable.v2.ReadRowsResponse.CellChunk} message CellChunk
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CellChunk.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.labels = [];
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.rowKey = "";
                                else {
                                    object.rowKey = [];
                                    if (options.bytes !== Array)
                                        object.rowKey = $util.newBuffer(object.rowKey);
                                }
                                object.familyName = null;
                                object.qualifier = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.timestampMicros = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.timestampMicros = options.longs === String ? "0" : 0;
                                if (options.bytes === String)
                                    object.value = "";
                                else {
                                    object.value = [];
                                    if (options.bytes !== Array)
                                        object.value = $util.newBuffer(object.value);
                                }
                                object.valueSize = 0;
                            }
                            if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                                object.rowKey = options.bytes === String ? $util.base64.encode(message.rowKey, 0, message.rowKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKey) : message.rowKey;
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                object.familyName = $root.google.protobuf.StringValue.toObject(message.familyName, options);
                            if (message.qualifier != null && message.hasOwnProperty("qualifier"))
                                object.qualifier = $root.google.protobuf.BytesValue.toObject(message.qualifier, options);
                            if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                                if (typeof message.timestampMicros === "number")
                                    object.timestampMicros = options.longs === String ? String(message.timestampMicros) : message.timestampMicros;
                                else
                                    object.timestampMicros = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMicros) : options.longs === Number ? new $util.LongBits(message.timestampMicros.low >>> 0, message.timestampMicros.high >>> 0).toNumber() : message.timestampMicros;
                            if (message.labels && message.labels.length) {
                                object.labels = [];
                                for (var j = 0; j < message.labels.length; ++j)
                                    object.labels[j] = message.labels[j];
                            }
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                            if (message.valueSize != null && message.hasOwnProperty("valueSize"))
                                object.valueSize = message.valueSize;
                            if (message.resetRow != null && message.hasOwnProperty("resetRow")) {
                                object.resetRow = message.resetRow;
                                if (options.oneofs)
                                    object.rowStatus = "resetRow";
                            }
                            if (message.commitRow != null && message.hasOwnProperty("commitRow")) {
                                object.commitRow = message.commitRow;
                                if (options.oneofs)
                                    object.rowStatus = "commitRow";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CellChunk to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.ReadRowsResponse.CellChunk
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CellChunk.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return CellChunk;
                    })();
    
                    return ReadRowsResponse;
                })();
    
                v2.SampleRowKeysRequest = (function() {
    
                    /**
                     * Properties of a SampleRowKeysRequest.
                     * @memberof google.bigtable.v2
                     * @interface ISampleRowKeysRequest
                     * @property {string|null} [tableName] SampleRowKeysRequest tableName
                     * @property {string|null} [appProfileId] SampleRowKeysRequest appProfileId
                     */
    
                    /**
                     * Constructs a new SampleRowKeysRequest.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a SampleRowKeysRequest.
                     * @implements ISampleRowKeysRequest
                     * @constructor
                     * @param {google.bigtable.v2.ISampleRowKeysRequest=} [properties] Properties to set
                     */
                    function SampleRowKeysRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SampleRowKeysRequest tableName.
                     * @member {string} tableName
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @instance
                     */
                    SampleRowKeysRequest.prototype.tableName = "";
    
                    /**
                     * SampleRowKeysRequest appProfileId.
                     * @member {string} appProfileId
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @instance
                     */
                    SampleRowKeysRequest.prototype.appProfileId = "";
    
                    /**
                     * Creates a new SampleRowKeysRequest instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @static
                     * @param {google.bigtable.v2.ISampleRowKeysRequest=} [properties] Properties to set
                     * @returns {google.bigtable.v2.SampleRowKeysRequest} SampleRowKeysRequest instance
                     */
                    SampleRowKeysRequest.create = function create(properties) {
                        return new SampleRowKeysRequest(properties);
                    };
    
                    /**
                     * Encodes the specified SampleRowKeysRequest message. Does not implicitly {@link google.bigtable.v2.SampleRowKeysRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @static
                     * @param {google.bigtable.v2.ISampleRowKeysRequest} message SampleRowKeysRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SampleRowKeysRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tableName);
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.appProfileId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SampleRowKeysRequest message, length delimited. Does not implicitly {@link google.bigtable.v2.SampleRowKeysRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @static
                     * @param {google.bigtable.v2.ISampleRowKeysRequest} message SampleRowKeysRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SampleRowKeysRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SampleRowKeysRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.SampleRowKeysRequest} SampleRowKeysRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SampleRowKeysRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.SampleRowKeysRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tableName = reader.string();
                                break;
                            case 2:
                                message.appProfileId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SampleRowKeysRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.SampleRowKeysRequest} SampleRowKeysRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SampleRowKeysRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SampleRowKeysRequest message.
                     * @function verify
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SampleRowKeysRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            if (!$util.isString(message.tableName))
                                return "tableName: string expected";
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            if (!$util.isString(message.appProfileId))
                                return "appProfileId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a SampleRowKeysRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.SampleRowKeysRequest} SampleRowKeysRequest
                     */
                    SampleRowKeysRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.SampleRowKeysRequest)
                            return object;
                        var message = new $root.google.bigtable.v2.SampleRowKeysRequest();
                        if (object.tableName != null)
                            message.tableName = String(object.tableName);
                        if (object.appProfileId != null)
                            message.appProfileId = String(object.appProfileId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SampleRowKeysRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @static
                     * @param {google.bigtable.v2.SampleRowKeysRequest} message SampleRowKeysRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SampleRowKeysRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.tableName = "";
                            object.appProfileId = "";
                        }
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            object.tableName = message.tableName;
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            object.appProfileId = message.appProfileId;
                        return object;
                    };
    
                    /**
                     * Converts this SampleRowKeysRequest to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.SampleRowKeysRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SampleRowKeysRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SampleRowKeysRequest;
                })();
    
                v2.SampleRowKeysResponse = (function() {
    
                    /**
                     * Properties of a SampleRowKeysResponse.
                     * @memberof google.bigtable.v2
                     * @interface ISampleRowKeysResponse
                     * @property {Uint8Array|null} [rowKey] SampleRowKeysResponse rowKey
                     * @property {number|Long|null} [offsetBytes] SampleRowKeysResponse offsetBytes
                     */
    
                    /**
                     * Constructs a new SampleRowKeysResponse.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a SampleRowKeysResponse.
                     * @implements ISampleRowKeysResponse
                     * @constructor
                     * @param {google.bigtable.v2.ISampleRowKeysResponse=} [properties] Properties to set
                     */
                    function SampleRowKeysResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SampleRowKeysResponse rowKey.
                     * @member {Uint8Array} rowKey
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @instance
                     */
                    SampleRowKeysResponse.prototype.rowKey = $util.newBuffer([]);
    
                    /**
                     * SampleRowKeysResponse offsetBytes.
                     * @member {number|Long} offsetBytes
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @instance
                     */
                    SampleRowKeysResponse.prototype.offsetBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new SampleRowKeysResponse instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @static
                     * @param {google.bigtable.v2.ISampleRowKeysResponse=} [properties] Properties to set
                     * @returns {google.bigtable.v2.SampleRowKeysResponse} SampleRowKeysResponse instance
                     */
                    SampleRowKeysResponse.create = function create(properties) {
                        return new SampleRowKeysResponse(properties);
                    };
    
                    /**
                     * Encodes the specified SampleRowKeysResponse message. Does not implicitly {@link google.bigtable.v2.SampleRowKeysResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @static
                     * @param {google.bigtable.v2.ISampleRowKeysResponse} message SampleRowKeysResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SampleRowKeysResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.rowKey);
                        if (message.offsetBytes != null && message.hasOwnProperty("offsetBytes"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.offsetBytes);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SampleRowKeysResponse message, length delimited. Does not implicitly {@link google.bigtable.v2.SampleRowKeysResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @static
                     * @param {google.bigtable.v2.ISampleRowKeysResponse} message SampleRowKeysResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SampleRowKeysResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SampleRowKeysResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.SampleRowKeysResponse} SampleRowKeysResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SampleRowKeysResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.SampleRowKeysResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.rowKey = reader.bytes();
                                break;
                            case 2:
                                message.offsetBytes = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SampleRowKeysResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.SampleRowKeysResponse} SampleRowKeysResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SampleRowKeysResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SampleRowKeysResponse message.
                     * @function verify
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SampleRowKeysResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            if (!(message.rowKey && typeof message.rowKey.length === "number" || $util.isString(message.rowKey)))
                                return "rowKey: buffer expected";
                        if (message.offsetBytes != null && message.hasOwnProperty("offsetBytes"))
                            if (!$util.isInteger(message.offsetBytes) && !(message.offsetBytes && $util.isInteger(message.offsetBytes.low) && $util.isInteger(message.offsetBytes.high)))
                                return "offsetBytes: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a SampleRowKeysResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.SampleRowKeysResponse} SampleRowKeysResponse
                     */
                    SampleRowKeysResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.SampleRowKeysResponse)
                            return object;
                        var message = new $root.google.bigtable.v2.SampleRowKeysResponse();
                        if (object.rowKey != null)
                            if (typeof object.rowKey === "string")
                                $util.base64.decode(object.rowKey, message.rowKey = $util.newBuffer($util.base64.length(object.rowKey)), 0);
                            else if (object.rowKey.length)
                                message.rowKey = object.rowKey;
                        if (object.offsetBytes != null)
                            if ($util.Long)
                                (message.offsetBytes = $util.Long.fromValue(object.offsetBytes)).unsigned = false;
                            else if (typeof object.offsetBytes === "string")
                                message.offsetBytes = parseInt(object.offsetBytes, 10);
                            else if (typeof object.offsetBytes === "number")
                                message.offsetBytes = object.offsetBytes;
                            else if (typeof object.offsetBytes === "object")
                                message.offsetBytes = new $util.LongBits(object.offsetBytes.low >>> 0, object.offsetBytes.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SampleRowKeysResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @static
                     * @param {google.bigtable.v2.SampleRowKeysResponse} message SampleRowKeysResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SampleRowKeysResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.rowKey = "";
                            else {
                                object.rowKey = [];
                                if (options.bytes !== Array)
                                    object.rowKey = $util.newBuffer(object.rowKey);
                            }
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.offsetBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.offsetBytes = options.longs === String ? "0" : 0;
                        }
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            object.rowKey = options.bytes === String ? $util.base64.encode(message.rowKey, 0, message.rowKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKey) : message.rowKey;
                        if (message.offsetBytes != null && message.hasOwnProperty("offsetBytes"))
                            if (typeof message.offsetBytes === "number")
                                object.offsetBytes = options.longs === String ? String(message.offsetBytes) : message.offsetBytes;
                            else
                                object.offsetBytes = options.longs === String ? $util.Long.prototype.toString.call(message.offsetBytes) : options.longs === Number ? new $util.LongBits(message.offsetBytes.low >>> 0, message.offsetBytes.high >>> 0).toNumber() : message.offsetBytes;
                        return object;
                    };
    
                    /**
                     * Converts this SampleRowKeysResponse to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.SampleRowKeysResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SampleRowKeysResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SampleRowKeysResponse;
                })();
    
                v2.MutateRowRequest = (function() {
    
                    /**
                     * Properties of a MutateRowRequest.
                     * @memberof google.bigtable.v2
                     * @interface IMutateRowRequest
                     * @property {string|null} [tableName] MutateRowRequest tableName
                     * @property {string|null} [appProfileId] MutateRowRequest appProfileId
                     * @property {Uint8Array|null} [rowKey] MutateRowRequest rowKey
                     * @property {Array.<google.bigtable.v2.IMutation>|null} [mutations] MutateRowRequest mutations
                     */
    
                    /**
                     * Constructs a new MutateRowRequest.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a MutateRowRequest.
                     * @implements IMutateRowRequest
                     * @constructor
                     * @param {google.bigtable.v2.IMutateRowRequest=} [properties] Properties to set
                     */
                    function MutateRowRequest(properties) {
                        this.mutations = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MutateRowRequest tableName.
                     * @member {string} tableName
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @instance
                     */
                    MutateRowRequest.prototype.tableName = "";
    
                    /**
                     * MutateRowRequest appProfileId.
                     * @member {string} appProfileId
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @instance
                     */
                    MutateRowRequest.prototype.appProfileId = "";
    
                    /**
                     * MutateRowRequest rowKey.
                     * @member {Uint8Array} rowKey
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @instance
                     */
                    MutateRowRequest.prototype.rowKey = $util.newBuffer([]);
    
                    /**
                     * MutateRowRequest mutations.
                     * @member {Array.<google.bigtable.v2.IMutation>} mutations
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @instance
                     */
                    MutateRowRequest.prototype.mutations = $util.emptyArray;
    
                    /**
                     * Creates a new MutateRowRequest instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @static
                     * @param {google.bigtable.v2.IMutateRowRequest=} [properties] Properties to set
                     * @returns {google.bigtable.v2.MutateRowRequest} MutateRowRequest instance
                     */
                    MutateRowRequest.create = function create(properties) {
                        return new MutateRowRequest(properties);
                    };
    
                    /**
                     * Encodes the specified MutateRowRequest message. Does not implicitly {@link google.bigtable.v2.MutateRowRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @static
                     * @param {google.bigtable.v2.IMutateRowRequest} message MutateRowRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRowRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tableName);
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.rowKey);
                        if (message.mutations != null && message.mutations.length)
                            for (var i = 0; i < message.mutations.length; ++i)
                                $root.google.bigtable.v2.Mutation.encode(message.mutations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.appProfileId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MutateRowRequest message, length delimited. Does not implicitly {@link google.bigtable.v2.MutateRowRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @static
                     * @param {google.bigtable.v2.IMutateRowRequest} message MutateRowRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRowRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MutateRowRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.MutateRowRequest} MutateRowRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRowRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.MutateRowRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tableName = reader.string();
                                break;
                            case 4:
                                message.appProfileId = reader.string();
                                break;
                            case 2:
                                message.rowKey = reader.bytes();
                                break;
                            case 3:
                                if (!(message.mutations && message.mutations.length))
                                    message.mutations = [];
                                message.mutations.push($root.google.bigtable.v2.Mutation.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MutateRowRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.MutateRowRequest} MutateRowRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRowRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MutateRowRequest message.
                     * @function verify
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MutateRowRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            if (!$util.isString(message.tableName))
                                return "tableName: string expected";
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            if (!$util.isString(message.appProfileId))
                                return "appProfileId: string expected";
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            if (!(message.rowKey && typeof message.rowKey.length === "number" || $util.isString(message.rowKey)))
                                return "rowKey: buffer expected";
                        if (message.mutations != null && message.hasOwnProperty("mutations")) {
                            if (!Array.isArray(message.mutations))
                                return "mutations: array expected";
                            for (var i = 0; i < message.mutations.length; ++i) {
                                var error = $root.google.bigtable.v2.Mutation.verify(message.mutations[i]);
                                if (error)
                                    return "mutations." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MutateRowRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.MutateRowRequest} MutateRowRequest
                     */
                    MutateRowRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.MutateRowRequest)
                            return object;
                        var message = new $root.google.bigtable.v2.MutateRowRequest();
                        if (object.tableName != null)
                            message.tableName = String(object.tableName);
                        if (object.appProfileId != null)
                            message.appProfileId = String(object.appProfileId);
                        if (object.rowKey != null)
                            if (typeof object.rowKey === "string")
                                $util.base64.decode(object.rowKey, message.rowKey = $util.newBuffer($util.base64.length(object.rowKey)), 0);
                            else if (object.rowKey.length)
                                message.rowKey = object.rowKey;
                        if (object.mutations) {
                            if (!Array.isArray(object.mutations))
                                throw TypeError(".google.bigtable.v2.MutateRowRequest.mutations: array expected");
                            message.mutations = [];
                            for (var i = 0; i < object.mutations.length; ++i) {
                                if (typeof object.mutations[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.MutateRowRequest.mutations: object expected");
                                message.mutations[i] = $root.google.bigtable.v2.Mutation.fromObject(object.mutations[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MutateRowRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @static
                     * @param {google.bigtable.v2.MutateRowRequest} message MutateRowRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MutateRowRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.mutations = [];
                        if (options.defaults) {
                            object.tableName = "";
                            if (options.bytes === String)
                                object.rowKey = "";
                            else {
                                object.rowKey = [];
                                if (options.bytes !== Array)
                                    object.rowKey = $util.newBuffer(object.rowKey);
                            }
                            object.appProfileId = "";
                        }
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            object.tableName = message.tableName;
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            object.rowKey = options.bytes === String ? $util.base64.encode(message.rowKey, 0, message.rowKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKey) : message.rowKey;
                        if (message.mutations && message.mutations.length) {
                            object.mutations = [];
                            for (var j = 0; j < message.mutations.length; ++j)
                                object.mutations[j] = $root.google.bigtable.v2.Mutation.toObject(message.mutations[j], options);
                        }
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            object.appProfileId = message.appProfileId;
                        return object;
                    };
    
                    /**
                     * Converts this MutateRowRequest to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.MutateRowRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MutateRowRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MutateRowRequest;
                })();
    
                v2.MutateRowResponse = (function() {
    
                    /**
                     * Properties of a MutateRowResponse.
                     * @memberof google.bigtable.v2
                     * @interface IMutateRowResponse
                     */
    
                    /**
                     * Constructs a new MutateRowResponse.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a MutateRowResponse.
                     * @implements IMutateRowResponse
                     * @constructor
                     * @param {google.bigtable.v2.IMutateRowResponse=} [properties] Properties to set
                     */
                    function MutateRowResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new MutateRowResponse instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @static
                     * @param {google.bigtable.v2.IMutateRowResponse=} [properties] Properties to set
                     * @returns {google.bigtable.v2.MutateRowResponse} MutateRowResponse instance
                     */
                    MutateRowResponse.create = function create(properties) {
                        return new MutateRowResponse(properties);
                    };
    
                    /**
                     * Encodes the specified MutateRowResponse message. Does not implicitly {@link google.bigtable.v2.MutateRowResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @static
                     * @param {google.bigtable.v2.IMutateRowResponse} message MutateRowResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRowResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MutateRowResponse message, length delimited. Does not implicitly {@link google.bigtable.v2.MutateRowResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @static
                     * @param {google.bigtable.v2.IMutateRowResponse} message MutateRowResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRowResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MutateRowResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.MutateRowResponse} MutateRowResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRowResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.MutateRowResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MutateRowResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.MutateRowResponse} MutateRowResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRowResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MutateRowResponse message.
                     * @function verify
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MutateRowResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MutateRowResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.MutateRowResponse} MutateRowResponse
                     */
                    MutateRowResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.MutateRowResponse)
                            return object;
                        return new $root.google.bigtable.v2.MutateRowResponse();
                    };
    
                    /**
                     * Creates a plain object from a MutateRowResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @static
                     * @param {google.bigtable.v2.MutateRowResponse} message MutateRowResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MutateRowResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MutateRowResponse to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.MutateRowResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MutateRowResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MutateRowResponse;
                })();
    
                v2.MutateRowsRequest = (function() {
    
                    /**
                     * Properties of a MutateRowsRequest.
                     * @memberof google.bigtable.v2
                     * @interface IMutateRowsRequest
                     * @property {string|null} [tableName] MutateRowsRequest tableName
                     * @property {string|null} [appProfileId] MutateRowsRequest appProfileId
                     * @property {Array.<google.bigtable.v2.MutateRowsRequest.IEntry>|null} [entries] MutateRowsRequest entries
                     */
    
                    /**
                     * Constructs a new MutateRowsRequest.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a MutateRowsRequest.
                     * @implements IMutateRowsRequest
                     * @constructor
                     * @param {google.bigtable.v2.IMutateRowsRequest=} [properties] Properties to set
                     */
                    function MutateRowsRequest(properties) {
                        this.entries = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MutateRowsRequest tableName.
                     * @member {string} tableName
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @instance
                     */
                    MutateRowsRequest.prototype.tableName = "";
    
                    /**
                     * MutateRowsRequest appProfileId.
                     * @member {string} appProfileId
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @instance
                     */
                    MutateRowsRequest.prototype.appProfileId = "";
    
                    /**
                     * MutateRowsRequest entries.
                     * @member {Array.<google.bigtable.v2.MutateRowsRequest.IEntry>} entries
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @instance
                     */
                    MutateRowsRequest.prototype.entries = $util.emptyArray;
    
                    /**
                     * Creates a new MutateRowsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @static
                     * @param {google.bigtable.v2.IMutateRowsRequest=} [properties] Properties to set
                     * @returns {google.bigtable.v2.MutateRowsRequest} MutateRowsRequest instance
                     */
                    MutateRowsRequest.create = function create(properties) {
                        return new MutateRowsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified MutateRowsRequest message. Does not implicitly {@link google.bigtable.v2.MutateRowsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @static
                     * @param {google.bigtable.v2.IMutateRowsRequest} message MutateRowsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRowsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tableName);
                        if (message.entries != null && message.entries.length)
                            for (var i = 0; i < message.entries.length; ++i)
                                $root.google.bigtable.v2.MutateRowsRequest.Entry.encode(message.entries[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.appProfileId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MutateRowsRequest message, length delimited. Does not implicitly {@link google.bigtable.v2.MutateRowsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @static
                     * @param {google.bigtable.v2.IMutateRowsRequest} message MutateRowsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRowsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MutateRowsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.MutateRowsRequest} MutateRowsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRowsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.MutateRowsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tableName = reader.string();
                                break;
                            case 3:
                                message.appProfileId = reader.string();
                                break;
                            case 2:
                                if (!(message.entries && message.entries.length))
                                    message.entries = [];
                                message.entries.push($root.google.bigtable.v2.MutateRowsRequest.Entry.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MutateRowsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.MutateRowsRequest} MutateRowsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRowsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MutateRowsRequest message.
                     * @function verify
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MutateRowsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            if (!$util.isString(message.tableName))
                                return "tableName: string expected";
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            if (!$util.isString(message.appProfileId))
                                return "appProfileId: string expected";
                        if (message.entries != null && message.hasOwnProperty("entries")) {
                            if (!Array.isArray(message.entries))
                                return "entries: array expected";
                            for (var i = 0; i < message.entries.length; ++i) {
                                var error = $root.google.bigtable.v2.MutateRowsRequest.Entry.verify(message.entries[i]);
                                if (error)
                                    return "entries." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MutateRowsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.MutateRowsRequest} MutateRowsRequest
                     */
                    MutateRowsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.MutateRowsRequest)
                            return object;
                        var message = new $root.google.bigtable.v2.MutateRowsRequest();
                        if (object.tableName != null)
                            message.tableName = String(object.tableName);
                        if (object.appProfileId != null)
                            message.appProfileId = String(object.appProfileId);
                        if (object.entries) {
                            if (!Array.isArray(object.entries))
                                throw TypeError(".google.bigtable.v2.MutateRowsRequest.entries: array expected");
                            message.entries = [];
                            for (var i = 0; i < object.entries.length; ++i) {
                                if (typeof object.entries[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.MutateRowsRequest.entries: object expected");
                                message.entries[i] = $root.google.bigtable.v2.MutateRowsRequest.Entry.fromObject(object.entries[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MutateRowsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @static
                     * @param {google.bigtable.v2.MutateRowsRequest} message MutateRowsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MutateRowsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.entries = [];
                        if (options.defaults) {
                            object.tableName = "";
                            object.appProfileId = "";
                        }
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            object.tableName = message.tableName;
                        if (message.entries && message.entries.length) {
                            object.entries = [];
                            for (var j = 0; j < message.entries.length; ++j)
                                object.entries[j] = $root.google.bigtable.v2.MutateRowsRequest.Entry.toObject(message.entries[j], options);
                        }
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            object.appProfileId = message.appProfileId;
                        return object;
                    };
    
                    /**
                     * Converts this MutateRowsRequest to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.MutateRowsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MutateRowsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    MutateRowsRequest.Entry = (function() {
    
                        /**
                         * Properties of an Entry.
                         * @memberof google.bigtable.v2.MutateRowsRequest
                         * @interface IEntry
                         * @property {Uint8Array|null} [rowKey] Entry rowKey
                         * @property {Array.<google.bigtable.v2.IMutation>|null} [mutations] Entry mutations
                         */
    
                        /**
                         * Constructs a new Entry.
                         * @memberof google.bigtable.v2.MutateRowsRequest
                         * @classdesc Represents an Entry.
                         * @implements IEntry
                         * @constructor
                         * @param {google.bigtable.v2.MutateRowsRequest.IEntry=} [properties] Properties to set
                         */
                        function Entry(properties) {
                            this.mutations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entry rowKey.
                         * @member {Uint8Array} rowKey
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @instance
                         */
                        Entry.prototype.rowKey = $util.newBuffer([]);
    
                        /**
                         * Entry mutations.
                         * @member {Array.<google.bigtable.v2.IMutation>} mutations
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @instance
                         */
                        Entry.prototype.mutations = $util.emptyArray;
    
                        /**
                         * Creates a new Entry instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @static
                         * @param {google.bigtable.v2.MutateRowsRequest.IEntry=} [properties] Properties to set
                         * @returns {google.bigtable.v2.MutateRowsRequest.Entry} Entry instance
                         */
                        Entry.create = function create(properties) {
                            return new Entry(properties);
                        };
    
                        /**
                         * Encodes the specified Entry message. Does not implicitly {@link google.bigtable.v2.MutateRowsRequest.Entry.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @static
                         * @param {google.bigtable.v2.MutateRowsRequest.IEntry} message Entry message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entry.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.rowKey);
                            if (message.mutations != null && message.mutations.length)
                                for (var i = 0; i < message.mutations.length; ++i)
                                    $root.google.bigtable.v2.Mutation.encode(message.mutations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entry message, length delimited. Does not implicitly {@link google.bigtable.v2.MutateRowsRequest.Entry.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @static
                         * @param {google.bigtable.v2.MutateRowsRequest.IEntry} message Entry message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entry.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entry message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.MutateRowsRequest.Entry} Entry
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entry.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.MutateRowsRequest.Entry();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.rowKey = reader.bytes();
                                    break;
                                case 2:
                                    if (!(message.mutations && message.mutations.length))
                                        message.mutations = [];
                                    message.mutations.push($root.google.bigtable.v2.Mutation.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entry message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.MutateRowsRequest.Entry} Entry
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entry.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entry message.
                         * @function verify
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entry.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                                if (!(message.rowKey && typeof message.rowKey.length === "number" || $util.isString(message.rowKey)))
                                    return "rowKey: buffer expected";
                            if (message.mutations != null && message.hasOwnProperty("mutations")) {
                                if (!Array.isArray(message.mutations))
                                    return "mutations: array expected";
                                for (var i = 0; i < message.mutations.length; ++i) {
                                    var error = $root.google.bigtable.v2.Mutation.verify(message.mutations[i]);
                                    if (error)
                                        return "mutations." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.MutateRowsRequest.Entry} Entry
                         */
                        Entry.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.MutateRowsRequest.Entry)
                                return object;
                            var message = new $root.google.bigtable.v2.MutateRowsRequest.Entry();
                            if (object.rowKey != null)
                                if (typeof object.rowKey === "string")
                                    $util.base64.decode(object.rowKey, message.rowKey = $util.newBuffer($util.base64.length(object.rowKey)), 0);
                                else if (object.rowKey.length)
                                    message.rowKey = object.rowKey;
                            if (object.mutations) {
                                if (!Array.isArray(object.mutations))
                                    throw TypeError(".google.bigtable.v2.MutateRowsRequest.Entry.mutations: array expected");
                                message.mutations = [];
                                for (var i = 0; i < object.mutations.length; ++i) {
                                    if (typeof object.mutations[i] !== "object")
                                        throw TypeError(".google.bigtable.v2.MutateRowsRequest.Entry.mutations: object expected");
                                    message.mutations[i] = $root.google.bigtable.v2.Mutation.fromObject(object.mutations[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entry message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @static
                         * @param {google.bigtable.v2.MutateRowsRequest.Entry} message Entry
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entry.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.mutations = [];
                            if (options.defaults)
                                if (options.bytes === String)
                                    object.rowKey = "";
                                else {
                                    object.rowKey = [];
                                    if (options.bytes !== Array)
                                        object.rowKey = $util.newBuffer(object.rowKey);
                                }
                            if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                                object.rowKey = options.bytes === String ? $util.base64.encode(message.rowKey, 0, message.rowKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKey) : message.rowKey;
                            if (message.mutations && message.mutations.length) {
                                object.mutations = [];
                                for (var j = 0; j < message.mutations.length; ++j)
                                    object.mutations[j] = $root.google.bigtable.v2.Mutation.toObject(message.mutations[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Entry to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.MutateRowsRequest.Entry
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entry.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Entry;
                    })();
    
                    return MutateRowsRequest;
                })();
    
                v2.MutateRowsResponse = (function() {
    
                    /**
                     * Properties of a MutateRowsResponse.
                     * @memberof google.bigtable.v2
                     * @interface IMutateRowsResponse
                     * @property {Array.<google.bigtable.v2.MutateRowsResponse.IEntry>|null} [entries] MutateRowsResponse entries
                     */
    
                    /**
                     * Constructs a new MutateRowsResponse.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a MutateRowsResponse.
                     * @implements IMutateRowsResponse
                     * @constructor
                     * @param {google.bigtable.v2.IMutateRowsResponse=} [properties] Properties to set
                     */
                    function MutateRowsResponse(properties) {
                        this.entries = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MutateRowsResponse entries.
                     * @member {Array.<google.bigtable.v2.MutateRowsResponse.IEntry>} entries
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @instance
                     */
                    MutateRowsResponse.prototype.entries = $util.emptyArray;
    
                    /**
                     * Creates a new MutateRowsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @static
                     * @param {google.bigtable.v2.IMutateRowsResponse=} [properties] Properties to set
                     * @returns {google.bigtable.v2.MutateRowsResponse} MutateRowsResponse instance
                     */
                    MutateRowsResponse.create = function create(properties) {
                        return new MutateRowsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified MutateRowsResponse message. Does not implicitly {@link google.bigtable.v2.MutateRowsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @static
                     * @param {google.bigtable.v2.IMutateRowsResponse} message MutateRowsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRowsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.entries != null && message.entries.length)
                            for (var i = 0; i < message.entries.length; ++i)
                                $root.google.bigtable.v2.MutateRowsResponse.Entry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MutateRowsResponse message, length delimited. Does not implicitly {@link google.bigtable.v2.MutateRowsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @static
                     * @param {google.bigtable.v2.IMutateRowsResponse} message MutateRowsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRowsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MutateRowsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.MutateRowsResponse} MutateRowsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRowsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.MutateRowsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.entries && message.entries.length))
                                    message.entries = [];
                                message.entries.push($root.google.bigtable.v2.MutateRowsResponse.Entry.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MutateRowsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.MutateRowsResponse} MutateRowsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRowsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MutateRowsResponse message.
                     * @function verify
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MutateRowsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.entries != null && message.hasOwnProperty("entries")) {
                            if (!Array.isArray(message.entries))
                                return "entries: array expected";
                            for (var i = 0; i < message.entries.length; ++i) {
                                var error = $root.google.bigtable.v2.MutateRowsResponse.Entry.verify(message.entries[i]);
                                if (error)
                                    return "entries." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MutateRowsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.MutateRowsResponse} MutateRowsResponse
                     */
                    MutateRowsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.MutateRowsResponse)
                            return object;
                        var message = new $root.google.bigtable.v2.MutateRowsResponse();
                        if (object.entries) {
                            if (!Array.isArray(object.entries))
                                throw TypeError(".google.bigtable.v2.MutateRowsResponse.entries: array expected");
                            message.entries = [];
                            for (var i = 0; i < object.entries.length; ++i) {
                                if (typeof object.entries[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.MutateRowsResponse.entries: object expected");
                                message.entries[i] = $root.google.bigtable.v2.MutateRowsResponse.Entry.fromObject(object.entries[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MutateRowsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @static
                     * @param {google.bigtable.v2.MutateRowsResponse} message MutateRowsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MutateRowsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.entries = [];
                        if (message.entries && message.entries.length) {
                            object.entries = [];
                            for (var j = 0; j < message.entries.length; ++j)
                                object.entries[j] = $root.google.bigtable.v2.MutateRowsResponse.Entry.toObject(message.entries[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this MutateRowsResponse to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.MutateRowsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MutateRowsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    MutateRowsResponse.Entry = (function() {
    
                        /**
                         * Properties of an Entry.
                         * @memberof google.bigtable.v2.MutateRowsResponse
                         * @interface IEntry
                         * @property {number|Long|null} [index] Entry index
                         * @property {google.rpc.IStatus|null} [status] Entry status
                         */
    
                        /**
                         * Constructs a new Entry.
                         * @memberof google.bigtable.v2.MutateRowsResponse
                         * @classdesc Represents an Entry.
                         * @implements IEntry
                         * @constructor
                         * @param {google.bigtable.v2.MutateRowsResponse.IEntry=} [properties] Properties to set
                         */
                        function Entry(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entry index.
                         * @member {number|Long} index
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @instance
                         */
                        Entry.prototype.index = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Entry status.
                         * @member {google.rpc.IStatus|null|undefined} status
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @instance
                         */
                        Entry.prototype.status = null;
    
                        /**
                         * Creates a new Entry instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @static
                         * @param {google.bigtable.v2.MutateRowsResponse.IEntry=} [properties] Properties to set
                         * @returns {google.bigtable.v2.MutateRowsResponse.Entry} Entry instance
                         */
                        Entry.create = function create(properties) {
                            return new Entry(properties);
                        };
    
                        /**
                         * Encodes the specified Entry message. Does not implicitly {@link google.bigtable.v2.MutateRowsResponse.Entry.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @static
                         * @param {google.bigtable.v2.MutateRowsResponse.IEntry} message Entry message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entry.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.index != null && message.hasOwnProperty("index"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.index);
                            if (message.status != null && message.hasOwnProperty("status"))
                                $root.google.rpc.Status.encode(message.status, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entry message, length delimited. Does not implicitly {@link google.bigtable.v2.MutateRowsResponse.Entry.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @static
                         * @param {google.bigtable.v2.MutateRowsResponse.IEntry} message Entry message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entry.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entry message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.MutateRowsResponse.Entry} Entry
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entry.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.MutateRowsResponse.Entry();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.index = reader.int64();
                                    break;
                                case 2:
                                    message.status = $root.google.rpc.Status.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entry message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.MutateRowsResponse.Entry} Entry
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entry.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entry message.
                         * @function verify
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entry.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.index != null && message.hasOwnProperty("index"))
                                if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                                    return "index: integer|Long expected";
                            if (message.status != null && message.hasOwnProperty("status")) {
                                var error = $root.google.rpc.Status.verify(message.status);
                                if (error)
                                    return "status." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.MutateRowsResponse.Entry} Entry
                         */
                        Entry.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.MutateRowsResponse.Entry)
                                return object;
                            var message = new $root.google.bigtable.v2.MutateRowsResponse.Entry();
                            if (object.index != null)
                                if ($util.Long)
                                    (message.index = $util.Long.fromValue(object.index)).unsigned = false;
                                else if (typeof object.index === "string")
                                    message.index = parseInt(object.index, 10);
                                else if (typeof object.index === "number")
                                    message.index = object.index;
                                else if (typeof object.index === "object")
                                    message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber();
                            if (object.status != null) {
                                if (typeof object.status !== "object")
                                    throw TypeError(".google.bigtable.v2.MutateRowsResponse.Entry.status: object expected");
                                message.status = $root.google.rpc.Status.fromObject(object.status);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entry message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @static
                         * @param {google.bigtable.v2.MutateRowsResponse.Entry} message Entry
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entry.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.index = options.longs === String ? "0" : 0;
                                object.status = null;
                            }
                            if (message.index != null && message.hasOwnProperty("index"))
                                if (typeof message.index === "number")
                                    object.index = options.longs === String ? String(message.index) : message.index;
                                else
                                    object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber() : message.index;
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = $root.google.rpc.Status.toObject(message.status, options);
                            return object;
                        };
    
                        /**
                         * Converts this Entry to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.MutateRowsResponse.Entry
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entry.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Entry;
                    })();
    
                    return MutateRowsResponse;
                })();
    
                v2.CheckAndMutateRowRequest = (function() {
    
                    /**
                     * Properties of a CheckAndMutateRowRequest.
                     * @memberof google.bigtable.v2
                     * @interface ICheckAndMutateRowRequest
                     * @property {string|null} [tableName] CheckAndMutateRowRequest tableName
                     * @property {string|null} [appProfileId] CheckAndMutateRowRequest appProfileId
                     * @property {Uint8Array|null} [rowKey] CheckAndMutateRowRequest rowKey
                     * @property {google.bigtable.v2.IRowFilter|null} [predicateFilter] CheckAndMutateRowRequest predicateFilter
                     * @property {Array.<google.bigtable.v2.IMutation>|null} [trueMutations] CheckAndMutateRowRequest trueMutations
                     * @property {Array.<google.bigtable.v2.IMutation>|null} [falseMutations] CheckAndMutateRowRequest falseMutations
                     */
    
                    /**
                     * Constructs a new CheckAndMutateRowRequest.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a CheckAndMutateRowRequest.
                     * @implements ICheckAndMutateRowRequest
                     * @constructor
                     * @param {google.bigtable.v2.ICheckAndMutateRowRequest=} [properties] Properties to set
                     */
                    function CheckAndMutateRowRequest(properties) {
                        this.trueMutations = [];
                        this.falseMutations = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CheckAndMutateRowRequest tableName.
                     * @member {string} tableName
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @instance
                     */
                    CheckAndMutateRowRequest.prototype.tableName = "";
    
                    /**
                     * CheckAndMutateRowRequest appProfileId.
                     * @member {string} appProfileId
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @instance
                     */
                    CheckAndMutateRowRequest.prototype.appProfileId = "";
    
                    /**
                     * CheckAndMutateRowRequest rowKey.
                     * @member {Uint8Array} rowKey
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @instance
                     */
                    CheckAndMutateRowRequest.prototype.rowKey = $util.newBuffer([]);
    
                    /**
                     * CheckAndMutateRowRequest predicateFilter.
                     * @member {google.bigtable.v2.IRowFilter|null|undefined} predicateFilter
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @instance
                     */
                    CheckAndMutateRowRequest.prototype.predicateFilter = null;
    
                    /**
                     * CheckAndMutateRowRequest trueMutations.
                     * @member {Array.<google.bigtable.v2.IMutation>} trueMutations
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @instance
                     */
                    CheckAndMutateRowRequest.prototype.trueMutations = $util.emptyArray;
    
                    /**
                     * CheckAndMutateRowRequest falseMutations.
                     * @member {Array.<google.bigtable.v2.IMutation>} falseMutations
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @instance
                     */
                    CheckAndMutateRowRequest.prototype.falseMutations = $util.emptyArray;
    
                    /**
                     * Creates a new CheckAndMutateRowRequest instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @static
                     * @param {google.bigtable.v2.ICheckAndMutateRowRequest=} [properties] Properties to set
                     * @returns {google.bigtable.v2.CheckAndMutateRowRequest} CheckAndMutateRowRequest instance
                     */
                    CheckAndMutateRowRequest.create = function create(properties) {
                        return new CheckAndMutateRowRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CheckAndMutateRowRequest message. Does not implicitly {@link google.bigtable.v2.CheckAndMutateRowRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @static
                     * @param {google.bigtable.v2.ICheckAndMutateRowRequest} message CheckAndMutateRowRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CheckAndMutateRowRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tableName);
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.rowKey);
                        if (message.trueMutations != null && message.trueMutations.length)
                            for (var i = 0; i < message.trueMutations.length; ++i)
                                $root.google.bigtable.v2.Mutation.encode(message.trueMutations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.falseMutations != null && message.falseMutations.length)
                            for (var i = 0; i < message.falseMutations.length; ++i)
                                $root.google.bigtable.v2.Mutation.encode(message.falseMutations[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.predicateFilter != null && message.hasOwnProperty("predicateFilter"))
                            $root.google.bigtable.v2.RowFilter.encode(message.predicateFilter, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.appProfileId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CheckAndMutateRowRequest message, length delimited. Does not implicitly {@link google.bigtable.v2.CheckAndMutateRowRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @static
                     * @param {google.bigtable.v2.ICheckAndMutateRowRequest} message CheckAndMutateRowRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CheckAndMutateRowRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CheckAndMutateRowRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.CheckAndMutateRowRequest} CheckAndMutateRowRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CheckAndMutateRowRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.CheckAndMutateRowRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tableName = reader.string();
                                break;
                            case 7:
                                message.appProfileId = reader.string();
                                break;
                            case 2:
                                message.rowKey = reader.bytes();
                                break;
                            case 6:
                                message.predicateFilter = $root.google.bigtable.v2.RowFilter.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.trueMutations && message.trueMutations.length))
                                    message.trueMutations = [];
                                message.trueMutations.push($root.google.bigtable.v2.Mutation.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                if (!(message.falseMutations && message.falseMutations.length))
                                    message.falseMutations = [];
                                message.falseMutations.push($root.google.bigtable.v2.Mutation.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CheckAndMutateRowRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.CheckAndMutateRowRequest} CheckAndMutateRowRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CheckAndMutateRowRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CheckAndMutateRowRequest message.
                     * @function verify
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CheckAndMutateRowRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            if (!$util.isString(message.tableName))
                                return "tableName: string expected";
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            if (!$util.isString(message.appProfileId))
                                return "appProfileId: string expected";
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            if (!(message.rowKey && typeof message.rowKey.length === "number" || $util.isString(message.rowKey)))
                                return "rowKey: buffer expected";
                        if (message.predicateFilter != null && message.hasOwnProperty("predicateFilter")) {
                            var error = $root.google.bigtable.v2.RowFilter.verify(message.predicateFilter);
                            if (error)
                                return "predicateFilter." + error;
                        }
                        if (message.trueMutations != null && message.hasOwnProperty("trueMutations")) {
                            if (!Array.isArray(message.trueMutations))
                                return "trueMutations: array expected";
                            for (var i = 0; i < message.trueMutations.length; ++i) {
                                var error = $root.google.bigtable.v2.Mutation.verify(message.trueMutations[i]);
                                if (error)
                                    return "trueMutations." + error;
                            }
                        }
                        if (message.falseMutations != null && message.hasOwnProperty("falseMutations")) {
                            if (!Array.isArray(message.falseMutations))
                                return "falseMutations: array expected";
                            for (var i = 0; i < message.falseMutations.length; ++i) {
                                var error = $root.google.bigtable.v2.Mutation.verify(message.falseMutations[i]);
                                if (error)
                                    return "falseMutations." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CheckAndMutateRowRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.CheckAndMutateRowRequest} CheckAndMutateRowRequest
                     */
                    CheckAndMutateRowRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.CheckAndMutateRowRequest)
                            return object;
                        var message = new $root.google.bigtable.v2.CheckAndMutateRowRequest();
                        if (object.tableName != null)
                            message.tableName = String(object.tableName);
                        if (object.appProfileId != null)
                            message.appProfileId = String(object.appProfileId);
                        if (object.rowKey != null)
                            if (typeof object.rowKey === "string")
                                $util.base64.decode(object.rowKey, message.rowKey = $util.newBuffer($util.base64.length(object.rowKey)), 0);
                            else if (object.rowKey.length)
                                message.rowKey = object.rowKey;
                        if (object.predicateFilter != null) {
                            if (typeof object.predicateFilter !== "object")
                                throw TypeError(".google.bigtable.v2.CheckAndMutateRowRequest.predicateFilter: object expected");
                            message.predicateFilter = $root.google.bigtable.v2.RowFilter.fromObject(object.predicateFilter);
                        }
                        if (object.trueMutations) {
                            if (!Array.isArray(object.trueMutations))
                                throw TypeError(".google.bigtable.v2.CheckAndMutateRowRequest.trueMutations: array expected");
                            message.trueMutations = [];
                            for (var i = 0; i < object.trueMutations.length; ++i) {
                                if (typeof object.trueMutations[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.CheckAndMutateRowRequest.trueMutations: object expected");
                                message.trueMutations[i] = $root.google.bigtable.v2.Mutation.fromObject(object.trueMutations[i]);
                            }
                        }
                        if (object.falseMutations) {
                            if (!Array.isArray(object.falseMutations))
                                throw TypeError(".google.bigtable.v2.CheckAndMutateRowRequest.falseMutations: array expected");
                            message.falseMutations = [];
                            for (var i = 0; i < object.falseMutations.length; ++i) {
                                if (typeof object.falseMutations[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.CheckAndMutateRowRequest.falseMutations: object expected");
                                message.falseMutations[i] = $root.google.bigtable.v2.Mutation.fromObject(object.falseMutations[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CheckAndMutateRowRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @static
                     * @param {google.bigtable.v2.CheckAndMutateRowRequest} message CheckAndMutateRowRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CheckAndMutateRowRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.trueMutations = [];
                            object.falseMutations = [];
                        }
                        if (options.defaults) {
                            object.tableName = "";
                            if (options.bytes === String)
                                object.rowKey = "";
                            else {
                                object.rowKey = [];
                                if (options.bytes !== Array)
                                    object.rowKey = $util.newBuffer(object.rowKey);
                            }
                            object.predicateFilter = null;
                            object.appProfileId = "";
                        }
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            object.tableName = message.tableName;
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            object.rowKey = options.bytes === String ? $util.base64.encode(message.rowKey, 0, message.rowKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKey) : message.rowKey;
                        if (message.trueMutations && message.trueMutations.length) {
                            object.trueMutations = [];
                            for (var j = 0; j < message.trueMutations.length; ++j)
                                object.trueMutations[j] = $root.google.bigtable.v2.Mutation.toObject(message.trueMutations[j], options);
                        }
                        if (message.falseMutations && message.falseMutations.length) {
                            object.falseMutations = [];
                            for (var j = 0; j < message.falseMutations.length; ++j)
                                object.falseMutations[j] = $root.google.bigtable.v2.Mutation.toObject(message.falseMutations[j], options);
                        }
                        if (message.predicateFilter != null && message.hasOwnProperty("predicateFilter"))
                            object.predicateFilter = $root.google.bigtable.v2.RowFilter.toObject(message.predicateFilter, options);
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            object.appProfileId = message.appProfileId;
                        return object;
                    };
    
                    /**
                     * Converts this CheckAndMutateRowRequest to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.CheckAndMutateRowRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CheckAndMutateRowRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CheckAndMutateRowRequest;
                })();
    
                v2.CheckAndMutateRowResponse = (function() {
    
                    /**
                     * Properties of a CheckAndMutateRowResponse.
                     * @memberof google.bigtable.v2
                     * @interface ICheckAndMutateRowResponse
                     * @property {boolean|null} [predicateMatched] CheckAndMutateRowResponse predicateMatched
                     */
    
                    /**
                     * Constructs a new CheckAndMutateRowResponse.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a CheckAndMutateRowResponse.
                     * @implements ICheckAndMutateRowResponse
                     * @constructor
                     * @param {google.bigtable.v2.ICheckAndMutateRowResponse=} [properties] Properties to set
                     */
                    function CheckAndMutateRowResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CheckAndMutateRowResponse predicateMatched.
                     * @member {boolean} predicateMatched
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @instance
                     */
                    CheckAndMutateRowResponse.prototype.predicateMatched = false;
    
                    /**
                     * Creates a new CheckAndMutateRowResponse instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @static
                     * @param {google.bigtable.v2.ICheckAndMutateRowResponse=} [properties] Properties to set
                     * @returns {google.bigtable.v2.CheckAndMutateRowResponse} CheckAndMutateRowResponse instance
                     */
                    CheckAndMutateRowResponse.create = function create(properties) {
                        return new CheckAndMutateRowResponse(properties);
                    };
    
                    /**
                     * Encodes the specified CheckAndMutateRowResponse message. Does not implicitly {@link google.bigtable.v2.CheckAndMutateRowResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @static
                     * @param {google.bigtable.v2.ICheckAndMutateRowResponse} message CheckAndMutateRowResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CheckAndMutateRowResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.predicateMatched != null && message.hasOwnProperty("predicateMatched"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.predicateMatched);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CheckAndMutateRowResponse message, length delimited. Does not implicitly {@link google.bigtable.v2.CheckAndMutateRowResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @static
                     * @param {google.bigtable.v2.ICheckAndMutateRowResponse} message CheckAndMutateRowResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CheckAndMutateRowResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CheckAndMutateRowResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.CheckAndMutateRowResponse} CheckAndMutateRowResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CheckAndMutateRowResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.CheckAndMutateRowResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.predicateMatched = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CheckAndMutateRowResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.CheckAndMutateRowResponse} CheckAndMutateRowResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CheckAndMutateRowResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CheckAndMutateRowResponse message.
                     * @function verify
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CheckAndMutateRowResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.predicateMatched != null && message.hasOwnProperty("predicateMatched"))
                            if (typeof message.predicateMatched !== "boolean")
                                return "predicateMatched: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a CheckAndMutateRowResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.CheckAndMutateRowResponse} CheckAndMutateRowResponse
                     */
                    CheckAndMutateRowResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.CheckAndMutateRowResponse)
                            return object;
                        var message = new $root.google.bigtable.v2.CheckAndMutateRowResponse();
                        if (object.predicateMatched != null)
                            message.predicateMatched = Boolean(object.predicateMatched);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CheckAndMutateRowResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @static
                     * @param {google.bigtable.v2.CheckAndMutateRowResponse} message CheckAndMutateRowResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CheckAndMutateRowResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.predicateMatched = false;
                        if (message.predicateMatched != null && message.hasOwnProperty("predicateMatched"))
                            object.predicateMatched = message.predicateMatched;
                        return object;
                    };
    
                    /**
                     * Converts this CheckAndMutateRowResponse to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.CheckAndMutateRowResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CheckAndMutateRowResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CheckAndMutateRowResponse;
                })();
    
                v2.ReadModifyWriteRowRequest = (function() {
    
                    /**
                     * Properties of a ReadModifyWriteRowRequest.
                     * @memberof google.bigtable.v2
                     * @interface IReadModifyWriteRowRequest
                     * @property {string|null} [tableName] ReadModifyWriteRowRequest tableName
                     * @property {string|null} [appProfileId] ReadModifyWriteRowRequest appProfileId
                     * @property {Uint8Array|null} [rowKey] ReadModifyWriteRowRequest rowKey
                     * @property {Array.<google.bigtable.v2.IReadModifyWriteRule>|null} [rules] ReadModifyWriteRowRequest rules
                     */
    
                    /**
                     * Constructs a new ReadModifyWriteRowRequest.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a ReadModifyWriteRowRequest.
                     * @implements IReadModifyWriteRowRequest
                     * @constructor
                     * @param {google.bigtable.v2.IReadModifyWriteRowRequest=} [properties] Properties to set
                     */
                    function ReadModifyWriteRowRequest(properties) {
                        this.rules = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReadModifyWriteRowRequest tableName.
                     * @member {string} tableName
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @instance
                     */
                    ReadModifyWriteRowRequest.prototype.tableName = "";
    
                    /**
                     * ReadModifyWriteRowRequest appProfileId.
                     * @member {string} appProfileId
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @instance
                     */
                    ReadModifyWriteRowRequest.prototype.appProfileId = "";
    
                    /**
                     * ReadModifyWriteRowRequest rowKey.
                     * @member {Uint8Array} rowKey
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @instance
                     */
                    ReadModifyWriteRowRequest.prototype.rowKey = $util.newBuffer([]);
    
                    /**
                     * ReadModifyWriteRowRequest rules.
                     * @member {Array.<google.bigtable.v2.IReadModifyWriteRule>} rules
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @instance
                     */
                    ReadModifyWriteRowRequest.prototype.rules = $util.emptyArray;
    
                    /**
                     * Creates a new ReadModifyWriteRowRequest instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRowRequest=} [properties] Properties to set
                     * @returns {google.bigtable.v2.ReadModifyWriteRowRequest} ReadModifyWriteRowRequest instance
                     */
                    ReadModifyWriteRowRequest.create = function create(properties) {
                        return new ReadModifyWriteRowRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ReadModifyWriteRowRequest message. Does not implicitly {@link google.bigtable.v2.ReadModifyWriteRowRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRowRequest} message ReadModifyWriteRowRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadModifyWriteRowRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tableName);
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.rowKey);
                        if (message.rules != null && message.rules.length)
                            for (var i = 0; i < message.rules.length; ++i)
                                $root.google.bigtable.v2.ReadModifyWriteRule.encode(message.rules[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.appProfileId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadModifyWriteRowRequest message, length delimited. Does not implicitly {@link google.bigtable.v2.ReadModifyWriteRowRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRowRequest} message ReadModifyWriteRowRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadModifyWriteRowRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadModifyWriteRowRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.ReadModifyWriteRowRequest} ReadModifyWriteRowRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadModifyWriteRowRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.ReadModifyWriteRowRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tableName = reader.string();
                                break;
                            case 4:
                                message.appProfileId = reader.string();
                                break;
                            case 2:
                                message.rowKey = reader.bytes();
                                break;
                            case 3:
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.bigtable.v2.ReadModifyWriteRule.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadModifyWriteRowRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.ReadModifyWriteRowRequest} ReadModifyWriteRowRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadModifyWriteRowRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadModifyWriteRowRequest message.
                     * @function verify
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadModifyWriteRowRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            if (!$util.isString(message.tableName))
                                return "tableName: string expected";
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            if (!$util.isString(message.appProfileId))
                                return "appProfileId: string expected";
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            if (!(message.rowKey && typeof message.rowKey.length === "number" || $util.isString(message.rowKey)))
                                return "rowKey: buffer expected";
                        if (message.rules != null && message.hasOwnProperty("rules")) {
                            if (!Array.isArray(message.rules))
                                return "rules: array expected";
                            for (var i = 0; i < message.rules.length; ++i) {
                                var error = $root.google.bigtable.v2.ReadModifyWriteRule.verify(message.rules[i]);
                                if (error)
                                    return "rules." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ReadModifyWriteRowRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.ReadModifyWriteRowRequest} ReadModifyWriteRowRequest
                     */
                    ReadModifyWriteRowRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.ReadModifyWriteRowRequest)
                            return object;
                        var message = new $root.google.bigtable.v2.ReadModifyWriteRowRequest();
                        if (object.tableName != null)
                            message.tableName = String(object.tableName);
                        if (object.appProfileId != null)
                            message.appProfileId = String(object.appProfileId);
                        if (object.rowKey != null)
                            if (typeof object.rowKey === "string")
                                $util.base64.decode(object.rowKey, message.rowKey = $util.newBuffer($util.base64.length(object.rowKey)), 0);
                            else if (object.rowKey.length)
                                message.rowKey = object.rowKey;
                        if (object.rules) {
                            if (!Array.isArray(object.rules))
                                throw TypeError(".google.bigtable.v2.ReadModifyWriteRowRequest.rules: array expected");
                            message.rules = [];
                            for (var i = 0; i < object.rules.length; ++i) {
                                if (typeof object.rules[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.ReadModifyWriteRowRequest.rules: object expected");
                                message.rules[i] = $root.google.bigtable.v2.ReadModifyWriteRule.fromObject(object.rules[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReadModifyWriteRowRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @static
                     * @param {google.bigtable.v2.ReadModifyWriteRowRequest} message ReadModifyWriteRowRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadModifyWriteRowRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.rules = [];
                        if (options.defaults) {
                            object.tableName = "";
                            if (options.bytes === String)
                                object.rowKey = "";
                            else {
                                object.rowKey = [];
                                if (options.bytes !== Array)
                                    object.rowKey = $util.newBuffer(object.rowKey);
                            }
                            object.appProfileId = "";
                        }
                        if (message.tableName != null && message.hasOwnProperty("tableName"))
                            object.tableName = message.tableName;
                        if (message.rowKey != null && message.hasOwnProperty("rowKey"))
                            object.rowKey = options.bytes === String ? $util.base64.encode(message.rowKey, 0, message.rowKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKey) : message.rowKey;
                        if (message.rules && message.rules.length) {
                            object.rules = [];
                            for (var j = 0; j < message.rules.length; ++j)
                                object.rules[j] = $root.google.bigtable.v2.ReadModifyWriteRule.toObject(message.rules[j], options);
                        }
                        if (message.appProfileId != null && message.hasOwnProperty("appProfileId"))
                            object.appProfileId = message.appProfileId;
                        return object;
                    };
    
                    /**
                     * Converts this ReadModifyWriteRowRequest to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.ReadModifyWriteRowRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadModifyWriteRowRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReadModifyWriteRowRequest;
                })();
    
                v2.ReadModifyWriteRowResponse = (function() {
    
                    /**
                     * Properties of a ReadModifyWriteRowResponse.
                     * @memberof google.bigtable.v2
                     * @interface IReadModifyWriteRowResponse
                     * @property {google.bigtable.v2.IRow|null} [row] ReadModifyWriteRowResponse row
                     */
    
                    /**
                     * Constructs a new ReadModifyWriteRowResponse.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a ReadModifyWriteRowResponse.
                     * @implements IReadModifyWriteRowResponse
                     * @constructor
                     * @param {google.bigtable.v2.IReadModifyWriteRowResponse=} [properties] Properties to set
                     */
                    function ReadModifyWriteRowResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReadModifyWriteRowResponse row.
                     * @member {google.bigtable.v2.IRow|null|undefined} row
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @instance
                     */
                    ReadModifyWriteRowResponse.prototype.row = null;
    
                    /**
                     * Creates a new ReadModifyWriteRowResponse instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRowResponse=} [properties] Properties to set
                     * @returns {google.bigtable.v2.ReadModifyWriteRowResponse} ReadModifyWriteRowResponse instance
                     */
                    ReadModifyWriteRowResponse.create = function create(properties) {
                        return new ReadModifyWriteRowResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ReadModifyWriteRowResponse message. Does not implicitly {@link google.bigtable.v2.ReadModifyWriteRowResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRowResponse} message ReadModifyWriteRowResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadModifyWriteRowResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.row != null && message.hasOwnProperty("row"))
                            $root.google.bigtable.v2.Row.encode(message.row, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadModifyWriteRowResponse message, length delimited. Does not implicitly {@link google.bigtable.v2.ReadModifyWriteRowResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRowResponse} message ReadModifyWriteRowResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadModifyWriteRowResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadModifyWriteRowResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.ReadModifyWriteRowResponse} ReadModifyWriteRowResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadModifyWriteRowResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.ReadModifyWriteRowResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.row = $root.google.bigtable.v2.Row.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadModifyWriteRowResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.ReadModifyWriteRowResponse} ReadModifyWriteRowResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadModifyWriteRowResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadModifyWriteRowResponse message.
                     * @function verify
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadModifyWriteRowResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.row != null && message.hasOwnProperty("row")) {
                            var error = $root.google.bigtable.v2.Row.verify(message.row);
                            if (error)
                                return "row." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ReadModifyWriteRowResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.ReadModifyWriteRowResponse} ReadModifyWriteRowResponse
                     */
                    ReadModifyWriteRowResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.ReadModifyWriteRowResponse)
                            return object;
                        var message = new $root.google.bigtable.v2.ReadModifyWriteRowResponse();
                        if (object.row != null) {
                            if (typeof object.row !== "object")
                                throw TypeError(".google.bigtable.v2.ReadModifyWriteRowResponse.row: object expected");
                            message.row = $root.google.bigtable.v2.Row.fromObject(object.row);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReadModifyWriteRowResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @static
                     * @param {google.bigtable.v2.ReadModifyWriteRowResponse} message ReadModifyWriteRowResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadModifyWriteRowResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.row = null;
                        if (message.row != null && message.hasOwnProperty("row"))
                            object.row = $root.google.bigtable.v2.Row.toObject(message.row, options);
                        return object;
                    };
    
                    /**
                     * Converts this ReadModifyWriteRowResponse to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.ReadModifyWriteRowResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadModifyWriteRowResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReadModifyWriteRowResponse;
                })();
    
                v2.Row = (function() {
    
                    /**
                     * Properties of a Row.
                     * @memberof google.bigtable.v2
                     * @interface IRow
                     * @property {Uint8Array|null} [key] Row key
                     * @property {Array.<google.bigtable.v2.IFamily>|null} [families] Row families
                     */
    
                    /**
                     * Constructs a new Row.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a Row.
                     * @implements IRow
                     * @constructor
                     * @param {google.bigtable.v2.IRow=} [properties] Properties to set
                     */
                    function Row(properties) {
                        this.families = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Row key.
                     * @member {Uint8Array} key
                     * @memberof google.bigtable.v2.Row
                     * @instance
                     */
                    Row.prototype.key = $util.newBuffer([]);
    
                    /**
                     * Row families.
                     * @member {Array.<google.bigtable.v2.IFamily>} families
                     * @memberof google.bigtable.v2.Row
                     * @instance
                     */
                    Row.prototype.families = $util.emptyArray;
    
                    /**
                     * Creates a new Row instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.Row
                     * @static
                     * @param {google.bigtable.v2.IRow=} [properties] Properties to set
                     * @returns {google.bigtable.v2.Row} Row instance
                     */
                    Row.create = function create(properties) {
                        return new Row(properties);
                    };
    
                    /**
                     * Encodes the specified Row message. Does not implicitly {@link google.bigtable.v2.Row.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.Row
                     * @static
                     * @param {google.bigtable.v2.IRow} message Row message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Row.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && message.hasOwnProperty("key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        if (message.families != null && message.families.length)
                            for (var i = 0; i < message.families.length; ++i)
                                $root.google.bigtable.v2.Family.encode(message.families[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Row message, length delimited. Does not implicitly {@link google.bigtable.v2.Row.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.Row
                     * @static
                     * @param {google.bigtable.v2.IRow} message Row message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Row.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Row message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.Row
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.Row} Row
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Row.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Row();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            case 2:
                                if (!(message.families && message.families.length))
                                    message.families = [];
                                message.families.push($root.google.bigtable.v2.Family.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Row message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.Row
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.Row} Row
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Row.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Row message.
                     * @function verify
                     * @memberof google.bigtable.v2.Row
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Row.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        if (message.families != null && message.hasOwnProperty("families")) {
                            if (!Array.isArray(message.families))
                                return "families: array expected";
                            for (var i = 0; i < message.families.length; ++i) {
                                var error = $root.google.bigtable.v2.Family.verify(message.families[i]);
                                if (error)
                                    return "families." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Row message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.Row
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.Row} Row
                     */
                    Row.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.Row)
                            return object;
                        var message = new $root.google.bigtable.v2.Row();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        if (object.families) {
                            if (!Array.isArray(object.families))
                                throw TypeError(".google.bigtable.v2.Row.families: array expected");
                            message.families = [];
                            for (var i = 0; i < object.families.length; ++i) {
                                if (typeof object.families[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.Row.families: object expected");
                                message.families[i] = $root.google.bigtable.v2.Family.fromObject(object.families[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Row message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.Row
                     * @static
                     * @param {google.bigtable.v2.Row} message Row
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Row.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.families = [];
                        if (options.defaults)
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        if (message.families && message.families.length) {
                            object.families = [];
                            for (var j = 0; j < message.families.length; ++j)
                                object.families[j] = $root.google.bigtable.v2.Family.toObject(message.families[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Row to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.Row
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Row.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Row;
                })();
    
                v2.Family = (function() {
    
                    /**
                     * Properties of a Family.
                     * @memberof google.bigtable.v2
                     * @interface IFamily
                     * @property {string|null} [name] Family name
                     * @property {Array.<google.bigtable.v2.IColumn>|null} [columns] Family columns
                     */
    
                    /**
                     * Constructs a new Family.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a Family.
                     * @implements IFamily
                     * @constructor
                     * @param {google.bigtable.v2.IFamily=} [properties] Properties to set
                     */
                    function Family(properties) {
                        this.columns = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Family name.
                     * @member {string} name
                     * @memberof google.bigtable.v2.Family
                     * @instance
                     */
                    Family.prototype.name = "";
    
                    /**
                     * Family columns.
                     * @member {Array.<google.bigtable.v2.IColumn>} columns
                     * @memberof google.bigtable.v2.Family
                     * @instance
                     */
                    Family.prototype.columns = $util.emptyArray;
    
                    /**
                     * Creates a new Family instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.Family
                     * @static
                     * @param {google.bigtable.v2.IFamily=} [properties] Properties to set
                     * @returns {google.bigtable.v2.Family} Family instance
                     */
                    Family.create = function create(properties) {
                        return new Family(properties);
                    };
    
                    /**
                     * Encodes the specified Family message. Does not implicitly {@link google.bigtable.v2.Family.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.Family
                     * @static
                     * @param {google.bigtable.v2.IFamily} message Family message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Family.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && message.hasOwnProperty("name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.columns != null && message.columns.length)
                            for (var i = 0; i < message.columns.length; ++i)
                                $root.google.bigtable.v2.Column.encode(message.columns[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Family message, length delimited. Does not implicitly {@link google.bigtable.v2.Family.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.Family
                     * @static
                     * @param {google.bigtable.v2.IFamily} message Family message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Family.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Family message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.Family
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.Family} Family
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Family.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Family();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                if (!(message.columns && message.columns.length))
                                    message.columns = [];
                                message.columns.push($root.google.bigtable.v2.Column.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Family message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.Family
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.Family} Family
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Family.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Family message.
                     * @function verify
                     * @memberof google.bigtable.v2.Family
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Family.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.columns != null && message.hasOwnProperty("columns")) {
                            if (!Array.isArray(message.columns))
                                return "columns: array expected";
                            for (var i = 0; i < message.columns.length; ++i) {
                                var error = $root.google.bigtable.v2.Column.verify(message.columns[i]);
                                if (error)
                                    return "columns." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Family message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.Family
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.Family} Family
                     */
                    Family.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.Family)
                            return object;
                        var message = new $root.google.bigtable.v2.Family();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.columns) {
                            if (!Array.isArray(object.columns))
                                throw TypeError(".google.bigtable.v2.Family.columns: array expected");
                            message.columns = [];
                            for (var i = 0; i < object.columns.length; ++i) {
                                if (typeof object.columns[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.Family.columns: object expected");
                                message.columns[i] = $root.google.bigtable.v2.Column.fromObject(object.columns[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Family message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.Family
                     * @static
                     * @param {google.bigtable.v2.Family} message Family
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Family.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.columns = [];
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.columns && message.columns.length) {
                            object.columns = [];
                            for (var j = 0; j < message.columns.length; ++j)
                                object.columns[j] = $root.google.bigtable.v2.Column.toObject(message.columns[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Family to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.Family
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Family.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Family;
                })();
    
                v2.Column = (function() {
    
                    /**
                     * Properties of a Column.
                     * @memberof google.bigtable.v2
                     * @interface IColumn
                     * @property {Uint8Array|null} [qualifier] Column qualifier
                     * @property {Array.<google.bigtable.v2.ICell>|null} [cells] Column cells
                     */
    
                    /**
                     * Constructs a new Column.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a Column.
                     * @implements IColumn
                     * @constructor
                     * @param {google.bigtable.v2.IColumn=} [properties] Properties to set
                     */
                    function Column(properties) {
                        this.cells = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Column qualifier.
                     * @member {Uint8Array} qualifier
                     * @memberof google.bigtable.v2.Column
                     * @instance
                     */
                    Column.prototype.qualifier = $util.newBuffer([]);
    
                    /**
                     * Column cells.
                     * @member {Array.<google.bigtable.v2.ICell>} cells
                     * @memberof google.bigtable.v2.Column
                     * @instance
                     */
                    Column.prototype.cells = $util.emptyArray;
    
                    /**
                     * Creates a new Column instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.Column
                     * @static
                     * @param {google.bigtable.v2.IColumn=} [properties] Properties to set
                     * @returns {google.bigtable.v2.Column} Column instance
                     */
                    Column.create = function create(properties) {
                        return new Column(properties);
                    };
    
                    /**
                     * Encodes the specified Column message. Does not implicitly {@link google.bigtable.v2.Column.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.Column
                     * @static
                     * @param {google.bigtable.v2.IColumn} message Column message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Column.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.qualifier != null && message.hasOwnProperty("qualifier"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.qualifier);
                        if (message.cells != null && message.cells.length)
                            for (var i = 0; i < message.cells.length; ++i)
                                $root.google.bigtable.v2.Cell.encode(message.cells[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Column message, length delimited. Does not implicitly {@link google.bigtable.v2.Column.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.Column
                     * @static
                     * @param {google.bigtable.v2.IColumn} message Column message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Column.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Column message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.Column
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.Column} Column
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Column.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Column();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.qualifier = reader.bytes();
                                break;
                            case 2:
                                if (!(message.cells && message.cells.length))
                                    message.cells = [];
                                message.cells.push($root.google.bigtable.v2.Cell.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Column message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.Column
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.Column} Column
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Column.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Column message.
                     * @function verify
                     * @memberof google.bigtable.v2.Column
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Column.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.qualifier != null && message.hasOwnProperty("qualifier"))
                            if (!(message.qualifier && typeof message.qualifier.length === "number" || $util.isString(message.qualifier)))
                                return "qualifier: buffer expected";
                        if (message.cells != null && message.hasOwnProperty("cells")) {
                            if (!Array.isArray(message.cells))
                                return "cells: array expected";
                            for (var i = 0; i < message.cells.length; ++i) {
                                var error = $root.google.bigtable.v2.Cell.verify(message.cells[i]);
                                if (error)
                                    return "cells." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Column message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.Column
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.Column} Column
                     */
                    Column.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.Column)
                            return object;
                        var message = new $root.google.bigtable.v2.Column();
                        if (object.qualifier != null)
                            if (typeof object.qualifier === "string")
                                $util.base64.decode(object.qualifier, message.qualifier = $util.newBuffer($util.base64.length(object.qualifier)), 0);
                            else if (object.qualifier.length)
                                message.qualifier = object.qualifier;
                        if (object.cells) {
                            if (!Array.isArray(object.cells))
                                throw TypeError(".google.bigtable.v2.Column.cells: array expected");
                            message.cells = [];
                            for (var i = 0; i < object.cells.length; ++i) {
                                if (typeof object.cells[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.Column.cells: object expected");
                                message.cells[i] = $root.google.bigtable.v2.Cell.fromObject(object.cells[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Column message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.Column
                     * @static
                     * @param {google.bigtable.v2.Column} message Column
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Column.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.cells = [];
                        if (options.defaults)
                            if (options.bytes === String)
                                object.qualifier = "";
                            else {
                                object.qualifier = [];
                                if (options.bytes !== Array)
                                    object.qualifier = $util.newBuffer(object.qualifier);
                            }
                        if (message.qualifier != null && message.hasOwnProperty("qualifier"))
                            object.qualifier = options.bytes === String ? $util.base64.encode(message.qualifier, 0, message.qualifier.length) : options.bytes === Array ? Array.prototype.slice.call(message.qualifier) : message.qualifier;
                        if (message.cells && message.cells.length) {
                            object.cells = [];
                            for (var j = 0; j < message.cells.length; ++j)
                                object.cells[j] = $root.google.bigtable.v2.Cell.toObject(message.cells[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Column to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.Column
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Column.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Column;
                })();
    
                v2.Cell = (function() {
    
                    /**
                     * Properties of a Cell.
                     * @memberof google.bigtable.v2
                     * @interface ICell
                     * @property {number|Long|null} [timestampMicros] Cell timestampMicros
                     * @property {Uint8Array|null} [value] Cell value
                     * @property {Array.<string>|null} [labels] Cell labels
                     */
    
                    /**
                     * Constructs a new Cell.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a Cell.
                     * @implements ICell
                     * @constructor
                     * @param {google.bigtable.v2.ICell=} [properties] Properties to set
                     */
                    function Cell(properties) {
                        this.labels = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Cell timestampMicros.
                     * @member {number|Long} timestampMicros
                     * @memberof google.bigtable.v2.Cell
                     * @instance
                     */
                    Cell.prototype.timestampMicros = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Cell value.
                     * @member {Uint8Array} value
                     * @memberof google.bigtable.v2.Cell
                     * @instance
                     */
                    Cell.prototype.value = $util.newBuffer([]);
    
                    /**
                     * Cell labels.
                     * @member {Array.<string>} labels
                     * @memberof google.bigtable.v2.Cell
                     * @instance
                     */
                    Cell.prototype.labels = $util.emptyArray;
    
                    /**
                     * Creates a new Cell instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.Cell
                     * @static
                     * @param {google.bigtable.v2.ICell=} [properties] Properties to set
                     * @returns {google.bigtable.v2.Cell} Cell instance
                     */
                    Cell.create = function create(properties) {
                        return new Cell(properties);
                    };
    
                    /**
                     * Encodes the specified Cell message. Does not implicitly {@link google.bigtable.v2.Cell.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.Cell
                     * @static
                     * @param {google.bigtable.v2.ICell} message Cell message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Cell.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.timestampMicros);
                        if (message.value != null && message.hasOwnProperty("value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                        if (message.labels != null && message.labels.length)
                            for (var i = 0; i < message.labels.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.labels[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Cell message, length delimited. Does not implicitly {@link google.bigtable.v2.Cell.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.Cell
                     * @static
                     * @param {google.bigtable.v2.ICell} message Cell message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Cell.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Cell message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.Cell
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.Cell} Cell
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Cell.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Cell();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.timestampMicros = reader.int64();
                                break;
                            case 2:
                                message.value = reader.bytes();
                                break;
                            case 3:
                                if (!(message.labels && message.labels.length))
                                    message.labels = [];
                                message.labels.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Cell message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.Cell
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.Cell} Cell
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Cell.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Cell message.
                     * @function verify
                     * @memberof google.bigtable.v2.Cell
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Cell.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                            if (!$util.isInteger(message.timestampMicros) && !(message.timestampMicros && $util.isInteger(message.timestampMicros.low) && $util.isInteger(message.timestampMicros.high)))
                                return "timestampMicros: integer|Long expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                                return "value: buffer expected";
                        if (message.labels != null && message.hasOwnProperty("labels")) {
                            if (!Array.isArray(message.labels))
                                return "labels: array expected";
                            for (var i = 0; i < message.labels.length; ++i)
                                if (!$util.isString(message.labels[i]))
                                    return "labels: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Cell message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.Cell
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.Cell} Cell
                     */
                    Cell.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.Cell)
                            return object;
                        var message = new $root.google.bigtable.v2.Cell();
                        if (object.timestampMicros != null)
                            if ($util.Long)
                                (message.timestampMicros = $util.Long.fromValue(object.timestampMicros)).unsigned = false;
                            else if (typeof object.timestampMicros === "string")
                                message.timestampMicros = parseInt(object.timestampMicros, 10);
                            else if (typeof object.timestampMicros === "number")
                                message.timestampMicros = object.timestampMicros;
                            else if (typeof object.timestampMicros === "object")
                                message.timestampMicros = new $util.LongBits(object.timestampMicros.low >>> 0, object.timestampMicros.high >>> 0).toNumber();
                        if (object.value != null)
                            if (typeof object.value === "string")
                                $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                            else if (object.value.length)
                                message.value = object.value;
                        if (object.labels) {
                            if (!Array.isArray(object.labels))
                                throw TypeError(".google.bigtable.v2.Cell.labels: array expected");
                            message.labels = [];
                            for (var i = 0; i < object.labels.length; ++i)
                                message.labels[i] = String(object.labels[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Cell message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.Cell
                     * @static
                     * @param {google.bigtable.v2.Cell} message Cell
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Cell.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.labels = [];
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.timestampMicros = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestampMicros = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.value = "";
                            else {
                                object.value = [];
                                if (options.bytes !== Array)
                                    object.value = $util.newBuffer(object.value);
                            }
                        }
                        if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                            if (typeof message.timestampMicros === "number")
                                object.timestampMicros = options.longs === String ? String(message.timestampMicros) : message.timestampMicros;
                            else
                                object.timestampMicros = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMicros) : options.longs === Number ? new $util.LongBits(message.timestampMicros.low >>> 0, message.timestampMicros.high >>> 0).toNumber() : message.timestampMicros;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                        if (message.labels && message.labels.length) {
                            object.labels = [];
                            for (var j = 0; j < message.labels.length; ++j)
                                object.labels[j] = message.labels[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Cell to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.Cell
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Cell.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Cell;
                })();
    
                v2.RowRange = (function() {
    
                    /**
                     * Properties of a RowRange.
                     * @memberof google.bigtable.v2
                     * @interface IRowRange
                     * @property {Uint8Array|null} [startKeyClosed] RowRange startKeyClosed
                     * @property {Uint8Array|null} [startKeyOpen] RowRange startKeyOpen
                     * @property {Uint8Array|null} [endKeyOpen] RowRange endKeyOpen
                     * @property {Uint8Array|null} [endKeyClosed] RowRange endKeyClosed
                     */
    
                    /**
                     * Constructs a new RowRange.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a RowRange.
                     * @implements IRowRange
                     * @constructor
                     * @param {google.bigtable.v2.IRowRange=} [properties] Properties to set
                     */
                    function RowRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RowRange startKeyClosed.
                     * @member {Uint8Array} startKeyClosed
                     * @memberof google.bigtable.v2.RowRange
                     * @instance
                     */
                    RowRange.prototype.startKeyClosed = $util.newBuffer([]);
    
                    /**
                     * RowRange startKeyOpen.
                     * @member {Uint8Array} startKeyOpen
                     * @memberof google.bigtable.v2.RowRange
                     * @instance
                     */
                    RowRange.prototype.startKeyOpen = $util.newBuffer([]);
    
                    /**
                     * RowRange endKeyOpen.
                     * @member {Uint8Array} endKeyOpen
                     * @memberof google.bigtable.v2.RowRange
                     * @instance
                     */
                    RowRange.prototype.endKeyOpen = $util.newBuffer([]);
    
                    /**
                     * RowRange endKeyClosed.
                     * @member {Uint8Array} endKeyClosed
                     * @memberof google.bigtable.v2.RowRange
                     * @instance
                     */
                    RowRange.prototype.endKeyClosed = $util.newBuffer([]);
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * RowRange startKey.
                     * @member {"startKeyClosed"|"startKeyOpen"|undefined} startKey
                     * @memberof google.bigtable.v2.RowRange
                     * @instance
                     */
                    Object.defineProperty(RowRange.prototype, "startKey", {
                        get: $util.oneOfGetter($oneOfFields = ["startKeyClosed", "startKeyOpen"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * RowRange endKey.
                     * @member {"endKeyOpen"|"endKeyClosed"|undefined} endKey
                     * @memberof google.bigtable.v2.RowRange
                     * @instance
                     */
                    Object.defineProperty(RowRange.prototype, "endKey", {
                        get: $util.oneOfGetter($oneOfFields = ["endKeyOpen", "endKeyClosed"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new RowRange instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.RowRange
                     * @static
                     * @param {google.bigtable.v2.IRowRange=} [properties] Properties to set
                     * @returns {google.bigtable.v2.RowRange} RowRange instance
                     */
                    RowRange.create = function create(properties) {
                        return new RowRange(properties);
                    };
    
                    /**
                     * Encodes the specified RowRange message. Does not implicitly {@link google.bigtable.v2.RowRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.RowRange
                     * @static
                     * @param {google.bigtable.v2.IRowRange} message RowRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RowRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.startKeyClosed != null && message.hasOwnProperty("startKeyClosed"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.startKeyClosed);
                        if (message.startKeyOpen != null && message.hasOwnProperty("startKeyOpen"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.startKeyOpen);
                        if (message.endKeyOpen != null && message.hasOwnProperty("endKeyOpen"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.endKeyOpen);
                        if (message.endKeyClosed != null && message.hasOwnProperty("endKeyClosed"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.endKeyClosed);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RowRange message, length delimited. Does not implicitly {@link google.bigtable.v2.RowRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.RowRange
                     * @static
                     * @param {google.bigtable.v2.IRowRange} message RowRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RowRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RowRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.RowRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.RowRange} RowRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RowRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.RowRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.startKeyClosed = reader.bytes();
                                break;
                            case 2:
                                message.startKeyOpen = reader.bytes();
                                break;
                            case 3:
                                message.endKeyOpen = reader.bytes();
                                break;
                            case 4:
                                message.endKeyClosed = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RowRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.RowRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.RowRange} RowRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RowRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RowRange message.
                     * @function verify
                     * @memberof google.bigtable.v2.RowRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RowRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.startKeyClosed != null && message.hasOwnProperty("startKeyClosed")) {
                            properties.startKey = 1;
                            if (!(message.startKeyClosed && typeof message.startKeyClosed.length === "number" || $util.isString(message.startKeyClosed)))
                                return "startKeyClosed: buffer expected";
                        }
                        if (message.startKeyOpen != null && message.hasOwnProperty("startKeyOpen")) {
                            if (properties.startKey === 1)
                                return "startKey: multiple values";
                            properties.startKey = 1;
                            if (!(message.startKeyOpen && typeof message.startKeyOpen.length === "number" || $util.isString(message.startKeyOpen)))
                                return "startKeyOpen: buffer expected";
                        }
                        if (message.endKeyOpen != null && message.hasOwnProperty("endKeyOpen")) {
                            properties.endKey = 1;
                            if (!(message.endKeyOpen && typeof message.endKeyOpen.length === "number" || $util.isString(message.endKeyOpen)))
                                return "endKeyOpen: buffer expected";
                        }
                        if (message.endKeyClosed != null && message.hasOwnProperty("endKeyClosed")) {
                            if (properties.endKey === 1)
                                return "endKey: multiple values";
                            properties.endKey = 1;
                            if (!(message.endKeyClosed && typeof message.endKeyClosed.length === "number" || $util.isString(message.endKeyClosed)))
                                return "endKeyClosed: buffer expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a RowRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.RowRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.RowRange} RowRange
                     */
                    RowRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.RowRange)
                            return object;
                        var message = new $root.google.bigtable.v2.RowRange();
                        if (object.startKeyClosed != null)
                            if (typeof object.startKeyClosed === "string")
                                $util.base64.decode(object.startKeyClosed, message.startKeyClosed = $util.newBuffer($util.base64.length(object.startKeyClosed)), 0);
                            else if (object.startKeyClosed.length)
                                message.startKeyClosed = object.startKeyClosed;
                        if (object.startKeyOpen != null)
                            if (typeof object.startKeyOpen === "string")
                                $util.base64.decode(object.startKeyOpen, message.startKeyOpen = $util.newBuffer($util.base64.length(object.startKeyOpen)), 0);
                            else if (object.startKeyOpen.length)
                                message.startKeyOpen = object.startKeyOpen;
                        if (object.endKeyOpen != null)
                            if (typeof object.endKeyOpen === "string")
                                $util.base64.decode(object.endKeyOpen, message.endKeyOpen = $util.newBuffer($util.base64.length(object.endKeyOpen)), 0);
                            else if (object.endKeyOpen.length)
                                message.endKeyOpen = object.endKeyOpen;
                        if (object.endKeyClosed != null)
                            if (typeof object.endKeyClosed === "string")
                                $util.base64.decode(object.endKeyClosed, message.endKeyClosed = $util.newBuffer($util.base64.length(object.endKeyClosed)), 0);
                            else if (object.endKeyClosed.length)
                                message.endKeyClosed = object.endKeyClosed;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RowRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.RowRange
                     * @static
                     * @param {google.bigtable.v2.RowRange} message RowRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RowRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.startKeyClosed != null && message.hasOwnProperty("startKeyClosed")) {
                            object.startKeyClosed = options.bytes === String ? $util.base64.encode(message.startKeyClosed, 0, message.startKeyClosed.length) : options.bytes === Array ? Array.prototype.slice.call(message.startKeyClosed) : message.startKeyClosed;
                            if (options.oneofs)
                                object.startKey = "startKeyClosed";
                        }
                        if (message.startKeyOpen != null && message.hasOwnProperty("startKeyOpen")) {
                            object.startKeyOpen = options.bytes === String ? $util.base64.encode(message.startKeyOpen, 0, message.startKeyOpen.length) : options.bytes === Array ? Array.prototype.slice.call(message.startKeyOpen) : message.startKeyOpen;
                            if (options.oneofs)
                                object.startKey = "startKeyOpen";
                        }
                        if (message.endKeyOpen != null && message.hasOwnProperty("endKeyOpen")) {
                            object.endKeyOpen = options.bytes === String ? $util.base64.encode(message.endKeyOpen, 0, message.endKeyOpen.length) : options.bytes === Array ? Array.prototype.slice.call(message.endKeyOpen) : message.endKeyOpen;
                            if (options.oneofs)
                                object.endKey = "endKeyOpen";
                        }
                        if (message.endKeyClosed != null && message.hasOwnProperty("endKeyClosed")) {
                            object.endKeyClosed = options.bytes === String ? $util.base64.encode(message.endKeyClosed, 0, message.endKeyClosed.length) : options.bytes === Array ? Array.prototype.slice.call(message.endKeyClosed) : message.endKeyClosed;
                            if (options.oneofs)
                                object.endKey = "endKeyClosed";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this RowRange to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.RowRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RowRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return RowRange;
                })();
    
                v2.RowSet = (function() {
    
                    /**
                     * Properties of a RowSet.
                     * @memberof google.bigtable.v2
                     * @interface IRowSet
                     * @property {Array.<Uint8Array>|null} [rowKeys] RowSet rowKeys
                     * @property {Array.<google.bigtable.v2.IRowRange>|null} [rowRanges] RowSet rowRanges
                     */
    
                    /**
                     * Constructs a new RowSet.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a RowSet.
                     * @implements IRowSet
                     * @constructor
                     * @param {google.bigtable.v2.IRowSet=} [properties] Properties to set
                     */
                    function RowSet(properties) {
                        this.rowKeys = [];
                        this.rowRanges = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RowSet rowKeys.
                     * @member {Array.<Uint8Array>} rowKeys
                     * @memberof google.bigtable.v2.RowSet
                     * @instance
                     */
                    RowSet.prototype.rowKeys = $util.emptyArray;
    
                    /**
                     * RowSet rowRanges.
                     * @member {Array.<google.bigtable.v2.IRowRange>} rowRanges
                     * @memberof google.bigtable.v2.RowSet
                     * @instance
                     */
                    RowSet.prototype.rowRanges = $util.emptyArray;
    
                    /**
                     * Creates a new RowSet instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.RowSet
                     * @static
                     * @param {google.bigtable.v2.IRowSet=} [properties] Properties to set
                     * @returns {google.bigtable.v2.RowSet} RowSet instance
                     */
                    RowSet.create = function create(properties) {
                        return new RowSet(properties);
                    };
    
                    /**
                     * Encodes the specified RowSet message. Does not implicitly {@link google.bigtable.v2.RowSet.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.RowSet
                     * @static
                     * @param {google.bigtable.v2.IRowSet} message RowSet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RowSet.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.rowKeys != null && message.rowKeys.length)
                            for (var i = 0; i < message.rowKeys.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.rowKeys[i]);
                        if (message.rowRanges != null && message.rowRanges.length)
                            for (var i = 0; i < message.rowRanges.length; ++i)
                                $root.google.bigtable.v2.RowRange.encode(message.rowRanges[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RowSet message, length delimited. Does not implicitly {@link google.bigtable.v2.RowSet.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.RowSet
                     * @static
                     * @param {google.bigtable.v2.IRowSet} message RowSet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RowSet.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RowSet message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.RowSet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.RowSet} RowSet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RowSet.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.RowSet();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.rowKeys && message.rowKeys.length))
                                    message.rowKeys = [];
                                message.rowKeys.push(reader.bytes());
                                break;
                            case 2:
                                if (!(message.rowRanges && message.rowRanges.length))
                                    message.rowRanges = [];
                                message.rowRanges.push($root.google.bigtable.v2.RowRange.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RowSet message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.RowSet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.RowSet} RowSet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RowSet.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RowSet message.
                     * @function verify
                     * @memberof google.bigtable.v2.RowSet
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RowSet.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.rowKeys != null && message.hasOwnProperty("rowKeys")) {
                            if (!Array.isArray(message.rowKeys))
                                return "rowKeys: array expected";
                            for (var i = 0; i < message.rowKeys.length; ++i)
                                if (!(message.rowKeys[i] && typeof message.rowKeys[i].length === "number" || $util.isString(message.rowKeys[i])))
                                    return "rowKeys: buffer[] expected";
                        }
                        if (message.rowRanges != null && message.hasOwnProperty("rowRanges")) {
                            if (!Array.isArray(message.rowRanges))
                                return "rowRanges: array expected";
                            for (var i = 0; i < message.rowRanges.length; ++i) {
                                var error = $root.google.bigtable.v2.RowRange.verify(message.rowRanges[i]);
                                if (error)
                                    return "rowRanges." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a RowSet message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.RowSet
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.RowSet} RowSet
                     */
                    RowSet.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.RowSet)
                            return object;
                        var message = new $root.google.bigtable.v2.RowSet();
                        if (object.rowKeys) {
                            if (!Array.isArray(object.rowKeys))
                                throw TypeError(".google.bigtable.v2.RowSet.rowKeys: array expected");
                            message.rowKeys = [];
                            for (var i = 0; i < object.rowKeys.length; ++i)
                                if (typeof object.rowKeys[i] === "string")
                                    $util.base64.decode(object.rowKeys[i], message.rowKeys[i] = $util.newBuffer($util.base64.length(object.rowKeys[i])), 0);
                                else if (object.rowKeys[i].length)
                                    message.rowKeys[i] = object.rowKeys[i];
                        }
                        if (object.rowRanges) {
                            if (!Array.isArray(object.rowRanges))
                                throw TypeError(".google.bigtable.v2.RowSet.rowRanges: array expected");
                            message.rowRanges = [];
                            for (var i = 0; i < object.rowRanges.length; ++i) {
                                if (typeof object.rowRanges[i] !== "object")
                                    throw TypeError(".google.bigtable.v2.RowSet.rowRanges: object expected");
                                message.rowRanges[i] = $root.google.bigtable.v2.RowRange.fromObject(object.rowRanges[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RowSet message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.RowSet
                     * @static
                     * @param {google.bigtable.v2.RowSet} message RowSet
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RowSet.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.rowKeys = [];
                            object.rowRanges = [];
                        }
                        if (message.rowKeys && message.rowKeys.length) {
                            object.rowKeys = [];
                            for (var j = 0; j < message.rowKeys.length; ++j)
                                object.rowKeys[j] = options.bytes === String ? $util.base64.encode(message.rowKeys[j], 0, message.rowKeys[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKeys[j]) : message.rowKeys[j];
                        }
                        if (message.rowRanges && message.rowRanges.length) {
                            object.rowRanges = [];
                            for (var j = 0; j < message.rowRanges.length; ++j)
                                object.rowRanges[j] = $root.google.bigtable.v2.RowRange.toObject(message.rowRanges[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this RowSet to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.RowSet
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RowSet.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return RowSet;
                })();
    
                v2.ColumnRange = (function() {
    
                    /**
                     * Properties of a ColumnRange.
                     * @memberof google.bigtable.v2
                     * @interface IColumnRange
                     * @property {string|null} [familyName] ColumnRange familyName
                     * @property {Uint8Array|null} [startQualifierClosed] ColumnRange startQualifierClosed
                     * @property {Uint8Array|null} [startQualifierOpen] ColumnRange startQualifierOpen
                     * @property {Uint8Array|null} [endQualifierClosed] ColumnRange endQualifierClosed
                     * @property {Uint8Array|null} [endQualifierOpen] ColumnRange endQualifierOpen
                     */
    
                    /**
                     * Constructs a new ColumnRange.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a ColumnRange.
                     * @implements IColumnRange
                     * @constructor
                     * @param {google.bigtable.v2.IColumnRange=} [properties] Properties to set
                     */
                    function ColumnRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ColumnRange familyName.
                     * @member {string} familyName
                     * @memberof google.bigtable.v2.ColumnRange
                     * @instance
                     */
                    ColumnRange.prototype.familyName = "";
    
                    /**
                     * ColumnRange startQualifierClosed.
                     * @member {Uint8Array} startQualifierClosed
                     * @memberof google.bigtable.v2.ColumnRange
                     * @instance
                     */
                    ColumnRange.prototype.startQualifierClosed = $util.newBuffer([]);
    
                    /**
                     * ColumnRange startQualifierOpen.
                     * @member {Uint8Array} startQualifierOpen
                     * @memberof google.bigtable.v2.ColumnRange
                     * @instance
                     */
                    ColumnRange.prototype.startQualifierOpen = $util.newBuffer([]);
    
                    /**
                     * ColumnRange endQualifierClosed.
                     * @member {Uint8Array} endQualifierClosed
                     * @memberof google.bigtable.v2.ColumnRange
                     * @instance
                     */
                    ColumnRange.prototype.endQualifierClosed = $util.newBuffer([]);
    
                    /**
                     * ColumnRange endQualifierOpen.
                     * @member {Uint8Array} endQualifierOpen
                     * @memberof google.bigtable.v2.ColumnRange
                     * @instance
                     */
                    ColumnRange.prototype.endQualifierOpen = $util.newBuffer([]);
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * ColumnRange startQualifier.
                     * @member {"startQualifierClosed"|"startQualifierOpen"|undefined} startQualifier
                     * @memberof google.bigtable.v2.ColumnRange
                     * @instance
                     */
                    Object.defineProperty(ColumnRange.prototype, "startQualifier", {
                        get: $util.oneOfGetter($oneOfFields = ["startQualifierClosed", "startQualifierOpen"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * ColumnRange endQualifier.
                     * @member {"endQualifierClosed"|"endQualifierOpen"|undefined} endQualifier
                     * @memberof google.bigtable.v2.ColumnRange
                     * @instance
                     */
                    Object.defineProperty(ColumnRange.prototype, "endQualifier", {
                        get: $util.oneOfGetter($oneOfFields = ["endQualifierClosed", "endQualifierOpen"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new ColumnRange instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.ColumnRange
                     * @static
                     * @param {google.bigtable.v2.IColumnRange=} [properties] Properties to set
                     * @returns {google.bigtable.v2.ColumnRange} ColumnRange instance
                     */
                    ColumnRange.create = function create(properties) {
                        return new ColumnRange(properties);
                    };
    
                    /**
                     * Encodes the specified ColumnRange message. Does not implicitly {@link google.bigtable.v2.ColumnRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.ColumnRange
                     * @static
                     * @param {google.bigtable.v2.IColumnRange} message ColumnRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ColumnRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.familyName != null && message.hasOwnProperty("familyName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.familyName);
                        if (message.startQualifierClosed != null && message.hasOwnProperty("startQualifierClosed"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.startQualifierClosed);
                        if (message.startQualifierOpen != null && message.hasOwnProperty("startQualifierOpen"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.startQualifierOpen);
                        if (message.endQualifierClosed != null && message.hasOwnProperty("endQualifierClosed"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.endQualifierClosed);
                        if (message.endQualifierOpen != null && message.hasOwnProperty("endQualifierOpen"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.endQualifierOpen);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ColumnRange message, length delimited. Does not implicitly {@link google.bigtable.v2.ColumnRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.ColumnRange
                     * @static
                     * @param {google.bigtable.v2.IColumnRange} message ColumnRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ColumnRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ColumnRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.ColumnRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.ColumnRange} ColumnRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ColumnRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.ColumnRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.familyName = reader.string();
                                break;
                            case 2:
                                message.startQualifierClosed = reader.bytes();
                                break;
                            case 3:
                                message.startQualifierOpen = reader.bytes();
                                break;
                            case 4:
                                message.endQualifierClosed = reader.bytes();
                                break;
                            case 5:
                                message.endQualifierOpen = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ColumnRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.ColumnRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.ColumnRange} ColumnRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ColumnRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ColumnRange message.
                     * @function verify
                     * @memberof google.bigtable.v2.ColumnRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ColumnRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.familyName != null && message.hasOwnProperty("familyName"))
                            if (!$util.isString(message.familyName))
                                return "familyName: string expected";
                        if (message.startQualifierClosed != null && message.hasOwnProperty("startQualifierClosed")) {
                            properties.startQualifier = 1;
                            if (!(message.startQualifierClosed && typeof message.startQualifierClosed.length === "number" || $util.isString(message.startQualifierClosed)))
                                return "startQualifierClosed: buffer expected";
                        }
                        if (message.startQualifierOpen != null && message.hasOwnProperty("startQualifierOpen")) {
                            if (properties.startQualifier === 1)
                                return "startQualifier: multiple values";
                            properties.startQualifier = 1;
                            if (!(message.startQualifierOpen && typeof message.startQualifierOpen.length === "number" || $util.isString(message.startQualifierOpen)))
                                return "startQualifierOpen: buffer expected";
                        }
                        if (message.endQualifierClosed != null && message.hasOwnProperty("endQualifierClosed")) {
                            properties.endQualifier = 1;
                            if (!(message.endQualifierClosed && typeof message.endQualifierClosed.length === "number" || $util.isString(message.endQualifierClosed)))
                                return "endQualifierClosed: buffer expected";
                        }
                        if (message.endQualifierOpen != null && message.hasOwnProperty("endQualifierOpen")) {
                            if (properties.endQualifier === 1)
                                return "endQualifier: multiple values";
                            properties.endQualifier = 1;
                            if (!(message.endQualifierOpen && typeof message.endQualifierOpen.length === "number" || $util.isString(message.endQualifierOpen)))
                                return "endQualifierOpen: buffer expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ColumnRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.ColumnRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.ColumnRange} ColumnRange
                     */
                    ColumnRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.ColumnRange)
                            return object;
                        var message = new $root.google.bigtable.v2.ColumnRange();
                        if (object.familyName != null)
                            message.familyName = String(object.familyName);
                        if (object.startQualifierClosed != null)
                            if (typeof object.startQualifierClosed === "string")
                                $util.base64.decode(object.startQualifierClosed, message.startQualifierClosed = $util.newBuffer($util.base64.length(object.startQualifierClosed)), 0);
                            else if (object.startQualifierClosed.length)
                                message.startQualifierClosed = object.startQualifierClosed;
                        if (object.startQualifierOpen != null)
                            if (typeof object.startQualifierOpen === "string")
                                $util.base64.decode(object.startQualifierOpen, message.startQualifierOpen = $util.newBuffer($util.base64.length(object.startQualifierOpen)), 0);
                            else if (object.startQualifierOpen.length)
                                message.startQualifierOpen = object.startQualifierOpen;
                        if (object.endQualifierClosed != null)
                            if (typeof object.endQualifierClosed === "string")
                                $util.base64.decode(object.endQualifierClosed, message.endQualifierClosed = $util.newBuffer($util.base64.length(object.endQualifierClosed)), 0);
                            else if (object.endQualifierClosed.length)
                                message.endQualifierClosed = object.endQualifierClosed;
                        if (object.endQualifierOpen != null)
                            if (typeof object.endQualifierOpen === "string")
                                $util.base64.decode(object.endQualifierOpen, message.endQualifierOpen = $util.newBuffer($util.base64.length(object.endQualifierOpen)), 0);
                            else if (object.endQualifierOpen.length)
                                message.endQualifierOpen = object.endQualifierOpen;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ColumnRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.ColumnRange
                     * @static
                     * @param {google.bigtable.v2.ColumnRange} message ColumnRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ColumnRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.familyName = "";
                        if (message.familyName != null && message.hasOwnProperty("familyName"))
                            object.familyName = message.familyName;
                        if (message.startQualifierClosed != null && message.hasOwnProperty("startQualifierClosed")) {
                            object.startQualifierClosed = options.bytes === String ? $util.base64.encode(message.startQualifierClosed, 0, message.startQualifierClosed.length) : options.bytes === Array ? Array.prototype.slice.call(message.startQualifierClosed) : message.startQualifierClosed;
                            if (options.oneofs)
                                object.startQualifier = "startQualifierClosed";
                        }
                        if (message.startQualifierOpen != null && message.hasOwnProperty("startQualifierOpen")) {
                            object.startQualifierOpen = options.bytes === String ? $util.base64.encode(message.startQualifierOpen, 0, message.startQualifierOpen.length) : options.bytes === Array ? Array.prototype.slice.call(message.startQualifierOpen) : message.startQualifierOpen;
                            if (options.oneofs)
                                object.startQualifier = "startQualifierOpen";
                        }
                        if (message.endQualifierClosed != null && message.hasOwnProperty("endQualifierClosed")) {
                            object.endQualifierClosed = options.bytes === String ? $util.base64.encode(message.endQualifierClosed, 0, message.endQualifierClosed.length) : options.bytes === Array ? Array.prototype.slice.call(message.endQualifierClosed) : message.endQualifierClosed;
                            if (options.oneofs)
                                object.endQualifier = "endQualifierClosed";
                        }
                        if (message.endQualifierOpen != null && message.hasOwnProperty("endQualifierOpen")) {
                            object.endQualifierOpen = options.bytes === String ? $util.base64.encode(message.endQualifierOpen, 0, message.endQualifierOpen.length) : options.bytes === Array ? Array.prototype.slice.call(message.endQualifierOpen) : message.endQualifierOpen;
                            if (options.oneofs)
                                object.endQualifier = "endQualifierOpen";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ColumnRange to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.ColumnRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ColumnRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ColumnRange;
                })();
    
                v2.TimestampRange = (function() {
    
                    /**
                     * Properties of a TimestampRange.
                     * @memberof google.bigtable.v2
                     * @interface ITimestampRange
                     * @property {number|Long|null} [startTimestampMicros] TimestampRange startTimestampMicros
                     * @property {number|Long|null} [endTimestampMicros] TimestampRange endTimestampMicros
                     */
    
                    /**
                     * Constructs a new TimestampRange.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a TimestampRange.
                     * @implements ITimestampRange
                     * @constructor
                     * @param {google.bigtable.v2.ITimestampRange=} [properties] Properties to set
                     */
                    function TimestampRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TimestampRange startTimestampMicros.
                     * @member {number|Long} startTimestampMicros
                     * @memberof google.bigtable.v2.TimestampRange
                     * @instance
                     */
                    TimestampRange.prototype.startTimestampMicros = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * TimestampRange endTimestampMicros.
                     * @member {number|Long} endTimestampMicros
                     * @memberof google.bigtable.v2.TimestampRange
                     * @instance
                     */
                    TimestampRange.prototype.endTimestampMicros = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new TimestampRange instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.TimestampRange
                     * @static
                     * @param {google.bigtable.v2.ITimestampRange=} [properties] Properties to set
                     * @returns {google.bigtable.v2.TimestampRange} TimestampRange instance
                     */
                    TimestampRange.create = function create(properties) {
                        return new TimestampRange(properties);
                    };
    
                    /**
                     * Encodes the specified TimestampRange message. Does not implicitly {@link google.bigtable.v2.TimestampRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.TimestampRange
                     * @static
                     * @param {google.bigtable.v2.ITimestampRange} message TimestampRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.startTimestampMicros != null && message.hasOwnProperty("startTimestampMicros"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.startTimestampMicros);
                        if (message.endTimestampMicros != null && message.hasOwnProperty("endTimestampMicros"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.endTimestampMicros);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TimestampRange message, length delimited. Does not implicitly {@link google.bigtable.v2.TimestampRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.TimestampRange
                     * @static
                     * @param {google.bigtable.v2.ITimestampRange} message TimestampRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TimestampRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.TimestampRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.TimestampRange} TimestampRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.TimestampRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.startTimestampMicros = reader.int64();
                                break;
                            case 2:
                                message.endTimestampMicros = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TimestampRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.TimestampRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.TimestampRange} TimestampRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TimestampRange message.
                     * @function verify
                     * @memberof google.bigtable.v2.TimestampRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TimestampRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.startTimestampMicros != null && message.hasOwnProperty("startTimestampMicros"))
                            if (!$util.isInteger(message.startTimestampMicros) && !(message.startTimestampMicros && $util.isInteger(message.startTimestampMicros.low) && $util.isInteger(message.startTimestampMicros.high)))
                                return "startTimestampMicros: integer|Long expected";
                        if (message.endTimestampMicros != null && message.hasOwnProperty("endTimestampMicros"))
                            if (!$util.isInteger(message.endTimestampMicros) && !(message.endTimestampMicros && $util.isInteger(message.endTimestampMicros.low) && $util.isInteger(message.endTimestampMicros.high)))
                                return "endTimestampMicros: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a TimestampRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.TimestampRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.TimestampRange} TimestampRange
                     */
                    TimestampRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.TimestampRange)
                            return object;
                        var message = new $root.google.bigtable.v2.TimestampRange();
                        if (object.startTimestampMicros != null)
                            if ($util.Long)
                                (message.startTimestampMicros = $util.Long.fromValue(object.startTimestampMicros)).unsigned = false;
                            else if (typeof object.startTimestampMicros === "string")
                                message.startTimestampMicros = parseInt(object.startTimestampMicros, 10);
                            else if (typeof object.startTimestampMicros === "number")
                                message.startTimestampMicros = object.startTimestampMicros;
                            else if (typeof object.startTimestampMicros === "object")
                                message.startTimestampMicros = new $util.LongBits(object.startTimestampMicros.low >>> 0, object.startTimestampMicros.high >>> 0).toNumber();
                        if (object.endTimestampMicros != null)
                            if ($util.Long)
                                (message.endTimestampMicros = $util.Long.fromValue(object.endTimestampMicros)).unsigned = false;
                            else if (typeof object.endTimestampMicros === "string")
                                message.endTimestampMicros = parseInt(object.endTimestampMicros, 10);
                            else if (typeof object.endTimestampMicros === "number")
                                message.endTimestampMicros = object.endTimestampMicros;
                            else if (typeof object.endTimestampMicros === "object")
                                message.endTimestampMicros = new $util.LongBits(object.endTimestampMicros.low >>> 0, object.endTimestampMicros.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TimestampRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.TimestampRange
                     * @static
                     * @param {google.bigtable.v2.TimestampRange} message TimestampRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TimestampRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.startTimestampMicros = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.startTimestampMicros = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.endTimestampMicros = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.endTimestampMicros = options.longs === String ? "0" : 0;
                        }
                        if (message.startTimestampMicros != null && message.hasOwnProperty("startTimestampMicros"))
                            if (typeof message.startTimestampMicros === "number")
                                object.startTimestampMicros = options.longs === String ? String(message.startTimestampMicros) : message.startTimestampMicros;
                            else
                                object.startTimestampMicros = options.longs === String ? $util.Long.prototype.toString.call(message.startTimestampMicros) : options.longs === Number ? new $util.LongBits(message.startTimestampMicros.low >>> 0, message.startTimestampMicros.high >>> 0).toNumber() : message.startTimestampMicros;
                        if (message.endTimestampMicros != null && message.hasOwnProperty("endTimestampMicros"))
                            if (typeof message.endTimestampMicros === "number")
                                object.endTimestampMicros = options.longs === String ? String(message.endTimestampMicros) : message.endTimestampMicros;
                            else
                                object.endTimestampMicros = options.longs === String ? $util.Long.prototype.toString.call(message.endTimestampMicros) : options.longs === Number ? new $util.LongBits(message.endTimestampMicros.low >>> 0, message.endTimestampMicros.high >>> 0).toNumber() : message.endTimestampMicros;
                        return object;
                    };
    
                    /**
                     * Converts this TimestampRange to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.TimestampRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TimestampRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TimestampRange;
                })();
    
                v2.ValueRange = (function() {
    
                    /**
                     * Properties of a ValueRange.
                     * @memberof google.bigtable.v2
                     * @interface IValueRange
                     * @property {Uint8Array|null} [startValueClosed] ValueRange startValueClosed
                     * @property {Uint8Array|null} [startValueOpen] ValueRange startValueOpen
                     * @property {Uint8Array|null} [endValueClosed] ValueRange endValueClosed
                     * @property {Uint8Array|null} [endValueOpen] ValueRange endValueOpen
                     */
    
                    /**
                     * Constructs a new ValueRange.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a ValueRange.
                     * @implements IValueRange
                     * @constructor
                     * @param {google.bigtable.v2.IValueRange=} [properties] Properties to set
                     */
                    function ValueRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ValueRange startValueClosed.
                     * @member {Uint8Array} startValueClosed
                     * @memberof google.bigtable.v2.ValueRange
                     * @instance
                     */
                    ValueRange.prototype.startValueClosed = $util.newBuffer([]);
    
                    /**
                     * ValueRange startValueOpen.
                     * @member {Uint8Array} startValueOpen
                     * @memberof google.bigtable.v2.ValueRange
                     * @instance
                     */
                    ValueRange.prototype.startValueOpen = $util.newBuffer([]);
    
                    /**
                     * ValueRange endValueClosed.
                     * @member {Uint8Array} endValueClosed
                     * @memberof google.bigtable.v2.ValueRange
                     * @instance
                     */
                    ValueRange.prototype.endValueClosed = $util.newBuffer([]);
    
                    /**
                     * ValueRange endValueOpen.
                     * @member {Uint8Array} endValueOpen
                     * @memberof google.bigtable.v2.ValueRange
                     * @instance
                     */
                    ValueRange.prototype.endValueOpen = $util.newBuffer([]);
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * ValueRange startValue.
                     * @member {"startValueClosed"|"startValueOpen"|undefined} startValue
                     * @memberof google.bigtable.v2.ValueRange
                     * @instance
                     */
                    Object.defineProperty(ValueRange.prototype, "startValue", {
                        get: $util.oneOfGetter($oneOfFields = ["startValueClosed", "startValueOpen"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * ValueRange endValue.
                     * @member {"endValueClosed"|"endValueOpen"|undefined} endValue
                     * @memberof google.bigtable.v2.ValueRange
                     * @instance
                     */
                    Object.defineProperty(ValueRange.prototype, "endValue", {
                        get: $util.oneOfGetter($oneOfFields = ["endValueClosed", "endValueOpen"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new ValueRange instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.ValueRange
                     * @static
                     * @param {google.bigtable.v2.IValueRange=} [properties] Properties to set
                     * @returns {google.bigtable.v2.ValueRange} ValueRange instance
                     */
                    ValueRange.create = function create(properties) {
                        return new ValueRange(properties);
                    };
    
                    /**
                     * Encodes the specified ValueRange message. Does not implicitly {@link google.bigtable.v2.ValueRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.ValueRange
                     * @static
                     * @param {google.bigtable.v2.IValueRange} message ValueRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ValueRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.startValueClosed != null && message.hasOwnProperty("startValueClosed"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.startValueClosed);
                        if (message.startValueOpen != null && message.hasOwnProperty("startValueOpen"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.startValueOpen);
                        if (message.endValueClosed != null && message.hasOwnProperty("endValueClosed"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.endValueClosed);
                        if (message.endValueOpen != null && message.hasOwnProperty("endValueOpen"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.endValueOpen);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ValueRange message, length delimited. Does not implicitly {@link google.bigtable.v2.ValueRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.ValueRange
                     * @static
                     * @param {google.bigtable.v2.IValueRange} message ValueRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ValueRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ValueRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.ValueRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.ValueRange} ValueRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ValueRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.ValueRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.startValueClosed = reader.bytes();
                                break;
                            case 2:
                                message.startValueOpen = reader.bytes();
                                break;
                            case 3:
                                message.endValueClosed = reader.bytes();
                                break;
                            case 4:
                                message.endValueOpen = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ValueRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.ValueRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.ValueRange} ValueRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ValueRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ValueRange message.
                     * @function verify
                     * @memberof google.bigtable.v2.ValueRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ValueRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.startValueClosed != null && message.hasOwnProperty("startValueClosed")) {
                            properties.startValue = 1;
                            if (!(message.startValueClosed && typeof message.startValueClosed.length === "number" || $util.isString(message.startValueClosed)))
                                return "startValueClosed: buffer expected";
                        }
                        if (message.startValueOpen != null && message.hasOwnProperty("startValueOpen")) {
                            if (properties.startValue === 1)
                                return "startValue: multiple values";
                            properties.startValue = 1;
                            if (!(message.startValueOpen && typeof message.startValueOpen.length === "number" || $util.isString(message.startValueOpen)))
                                return "startValueOpen: buffer expected";
                        }
                        if (message.endValueClosed != null && message.hasOwnProperty("endValueClosed")) {
                            properties.endValue = 1;
                            if (!(message.endValueClosed && typeof message.endValueClosed.length === "number" || $util.isString(message.endValueClosed)))
                                return "endValueClosed: buffer expected";
                        }
                        if (message.endValueOpen != null && message.hasOwnProperty("endValueOpen")) {
                            if (properties.endValue === 1)
                                return "endValue: multiple values";
                            properties.endValue = 1;
                            if (!(message.endValueOpen && typeof message.endValueOpen.length === "number" || $util.isString(message.endValueOpen)))
                                return "endValueOpen: buffer expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ValueRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.ValueRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.ValueRange} ValueRange
                     */
                    ValueRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.ValueRange)
                            return object;
                        var message = new $root.google.bigtable.v2.ValueRange();
                        if (object.startValueClosed != null)
                            if (typeof object.startValueClosed === "string")
                                $util.base64.decode(object.startValueClosed, message.startValueClosed = $util.newBuffer($util.base64.length(object.startValueClosed)), 0);
                            else if (object.startValueClosed.length)
                                message.startValueClosed = object.startValueClosed;
                        if (object.startValueOpen != null)
                            if (typeof object.startValueOpen === "string")
                                $util.base64.decode(object.startValueOpen, message.startValueOpen = $util.newBuffer($util.base64.length(object.startValueOpen)), 0);
                            else if (object.startValueOpen.length)
                                message.startValueOpen = object.startValueOpen;
                        if (object.endValueClosed != null)
                            if (typeof object.endValueClosed === "string")
                                $util.base64.decode(object.endValueClosed, message.endValueClosed = $util.newBuffer($util.base64.length(object.endValueClosed)), 0);
                            else if (object.endValueClosed.length)
                                message.endValueClosed = object.endValueClosed;
                        if (object.endValueOpen != null)
                            if (typeof object.endValueOpen === "string")
                                $util.base64.decode(object.endValueOpen, message.endValueOpen = $util.newBuffer($util.base64.length(object.endValueOpen)), 0);
                            else if (object.endValueOpen.length)
                                message.endValueOpen = object.endValueOpen;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ValueRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.ValueRange
                     * @static
                     * @param {google.bigtable.v2.ValueRange} message ValueRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ValueRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.startValueClosed != null && message.hasOwnProperty("startValueClosed")) {
                            object.startValueClosed = options.bytes === String ? $util.base64.encode(message.startValueClosed, 0, message.startValueClosed.length) : options.bytes === Array ? Array.prototype.slice.call(message.startValueClosed) : message.startValueClosed;
                            if (options.oneofs)
                                object.startValue = "startValueClosed";
                        }
                        if (message.startValueOpen != null && message.hasOwnProperty("startValueOpen")) {
                            object.startValueOpen = options.bytes === String ? $util.base64.encode(message.startValueOpen, 0, message.startValueOpen.length) : options.bytes === Array ? Array.prototype.slice.call(message.startValueOpen) : message.startValueOpen;
                            if (options.oneofs)
                                object.startValue = "startValueOpen";
                        }
                        if (message.endValueClosed != null && message.hasOwnProperty("endValueClosed")) {
                            object.endValueClosed = options.bytes === String ? $util.base64.encode(message.endValueClosed, 0, message.endValueClosed.length) : options.bytes === Array ? Array.prototype.slice.call(message.endValueClosed) : message.endValueClosed;
                            if (options.oneofs)
                                object.endValue = "endValueClosed";
                        }
                        if (message.endValueOpen != null && message.hasOwnProperty("endValueOpen")) {
                            object.endValueOpen = options.bytes === String ? $util.base64.encode(message.endValueOpen, 0, message.endValueOpen.length) : options.bytes === Array ? Array.prototype.slice.call(message.endValueOpen) : message.endValueOpen;
                            if (options.oneofs)
                                object.endValue = "endValueOpen";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ValueRange to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.ValueRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ValueRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ValueRange;
                })();
    
                v2.RowFilter = (function() {
    
                    /**
                     * Properties of a RowFilter.
                     * @memberof google.bigtable.v2
                     * @interface IRowFilter
                     * @property {google.bigtable.v2.RowFilter.IChain|null} [chain] RowFilter chain
                     * @property {google.bigtable.v2.RowFilter.IInterleave|null} [interleave] RowFilter interleave
                     * @property {google.bigtable.v2.RowFilter.ICondition|null} [condition] RowFilter condition
                     * @property {boolean|null} [sink] RowFilter sink
                     * @property {boolean|null} [passAllFilter] RowFilter passAllFilter
                     * @property {boolean|null} [blockAllFilter] RowFilter blockAllFilter
                     * @property {Uint8Array|null} [rowKeyRegexFilter] RowFilter rowKeyRegexFilter
                     * @property {number|null} [rowSampleFilter] RowFilter rowSampleFilter
                     * @property {string|null} [familyNameRegexFilter] RowFilter familyNameRegexFilter
                     * @property {Uint8Array|null} [columnQualifierRegexFilter] RowFilter columnQualifierRegexFilter
                     * @property {google.bigtable.v2.IColumnRange|null} [columnRangeFilter] RowFilter columnRangeFilter
                     * @property {google.bigtable.v2.ITimestampRange|null} [timestampRangeFilter] RowFilter timestampRangeFilter
                     * @property {Uint8Array|null} [valueRegexFilter] RowFilter valueRegexFilter
                     * @property {google.bigtable.v2.IValueRange|null} [valueRangeFilter] RowFilter valueRangeFilter
                     * @property {number|null} [cellsPerRowOffsetFilter] RowFilter cellsPerRowOffsetFilter
                     * @property {number|null} [cellsPerRowLimitFilter] RowFilter cellsPerRowLimitFilter
                     * @property {number|null} [cellsPerColumnLimitFilter] RowFilter cellsPerColumnLimitFilter
                     * @property {boolean|null} [stripValueTransformer] RowFilter stripValueTransformer
                     * @property {string|null} [applyLabelTransformer] RowFilter applyLabelTransformer
                     */
    
                    /**
                     * Constructs a new RowFilter.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a RowFilter.
                     * @implements IRowFilter
                     * @constructor
                     * @param {google.bigtable.v2.IRowFilter=} [properties] Properties to set
                     */
                    function RowFilter(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RowFilter chain.
                     * @member {google.bigtable.v2.RowFilter.IChain|null|undefined} chain
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.chain = null;
    
                    /**
                     * RowFilter interleave.
                     * @member {google.bigtable.v2.RowFilter.IInterleave|null|undefined} interleave
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.interleave = null;
    
                    /**
                     * RowFilter condition.
                     * @member {google.bigtable.v2.RowFilter.ICondition|null|undefined} condition
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.condition = null;
    
                    /**
                     * RowFilter sink.
                     * @member {boolean} sink
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.sink = false;
    
                    /**
                     * RowFilter passAllFilter.
                     * @member {boolean} passAllFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.passAllFilter = false;
    
                    /**
                     * RowFilter blockAllFilter.
                     * @member {boolean} blockAllFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.blockAllFilter = false;
    
                    /**
                     * RowFilter rowKeyRegexFilter.
                     * @member {Uint8Array} rowKeyRegexFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.rowKeyRegexFilter = $util.newBuffer([]);
    
                    /**
                     * RowFilter rowSampleFilter.
                     * @member {number} rowSampleFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.rowSampleFilter = 0;
    
                    /**
                     * RowFilter familyNameRegexFilter.
                     * @member {string} familyNameRegexFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.familyNameRegexFilter = "";
    
                    /**
                     * RowFilter columnQualifierRegexFilter.
                     * @member {Uint8Array} columnQualifierRegexFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.columnQualifierRegexFilter = $util.newBuffer([]);
    
                    /**
                     * RowFilter columnRangeFilter.
                     * @member {google.bigtable.v2.IColumnRange|null|undefined} columnRangeFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.columnRangeFilter = null;
    
                    /**
                     * RowFilter timestampRangeFilter.
                     * @member {google.bigtable.v2.ITimestampRange|null|undefined} timestampRangeFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.timestampRangeFilter = null;
    
                    /**
                     * RowFilter valueRegexFilter.
                     * @member {Uint8Array} valueRegexFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.valueRegexFilter = $util.newBuffer([]);
    
                    /**
                     * RowFilter valueRangeFilter.
                     * @member {google.bigtable.v2.IValueRange|null|undefined} valueRangeFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.valueRangeFilter = null;
    
                    /**
                     * RowFilter cellsPerRowOffsetFilter.
                     * @member {number} cellsPerRowOffsetFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.cellsPerRowOffsetFilter = 0;
    
                    /**
                     * RowFilter cellsPerRowLimitFilter.
                     * @member {number} cellsPerRowLimitFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.cellsPerRowLimitFilter = 0;
    
                    /**
                     * RowFilter cellsPerColumnLimitFilter.
                     * @member {number} cellsPerColumnLimitFilter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.cellsPerColumnLimitFilter = 0;
    
                    /**
                     * RowFilter stripValueTransformer.
                     * @member {boolean} stripValueTransformer
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.stripValueTransformer = false;
    
                    /**
                     * RowFilter applyLabelTransformer.
                     * @member {string} applyLabelTransformer
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    RowFilter.prototype.applyLabelTransformer = "";
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * RowFilter filter.
                     * @member {"chain"|"interleave"|"condition"|"sink"|"passAllFilter"|"blockAllFilter"|"rowKeyRegexFilter"|"rowSampleFilter"|"familyNameRegexFilter"|"columnQualifierRegexFilter"|"columnRangeFilter"|"timestampRangeFilter"|"valueRegexFilter"|"valueRangeFilter"|"cellsPerRowOffsetFilter"|"cellsPerRowLimitFilter"|"cellsPerColumnLimitFilter"|"stripValueTransformer"|"applyLabelTransformer"|undefined} filter
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     */
                    Object.defineProperty(RowFilter.prototype, "filter", {
                        get: $util.oneOfGetter($oneOfFields = ["chain", "interleave", "condition", "sink", "passAllFilter", "blockAllFilter", "rowKeyRegexFilter", "rowSampleFilter", "familyNameRegexFilter", "columnQualifierRegexFilter", "columnRangeFilter", "timestampRangeFilter", "valueRegexFilter", "valueRangeFilter", "cellsPerRowOffsetFilter", "cellsPerRowLimitFilter", "cellsPerColumnLimitFilter", "stripValueTransformer", "applyLabelTransformer"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new RowFilter instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.RowFilter
                     * @static
                     * @param {google.bigtable.v2.IRowFilter=} [properties] Properties to set
                     * @returns {google.bigtable.v2.RowFilter} RowFilter instance
                     */
                    RowFilter.create = function create(properties) {
                        return new RowFilter(properties);
                    };
    
                    /**
                     * Encodes the specified RowFilter message. Does not implicitly {@link google.bigtable.v2.RowFilter.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.RowFilter
                     * @static
                     * @param {google.bigtable.v2.IRowFilter} message RowFilter message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RowFilter.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.chain != null && message.hasOwnProperty("chain"))
                            $root.google.bigtable.v2.RowFilter.Chain.encode(message.chain, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.interleave != null && message.hasOwnProperty("interleave"))
                            $root.google.bigtable.v2.RowFilter.Interleave.encode(message.interleave, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            $root.google.bigtable.v2.RowFilter.Condition.encode(message.condition, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.rowKeyRegexFilter != null && message.hasOwnProperty("rowKeyRegexFilter"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.rowKeyRegexFilter);
                        if (message.familyNameRegexFilter != null && message.hasOwnProperty("familyNameRegexFilter"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.familyNameRegexFilter);
                        if (message.columnQualifierRegexFilter != null && message.hasOwnProperty("columnQualifierRegexFilter"))
                            writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.columnQualifierRegexFilter);
                        if (message.columnRangeFilter != null && message.hasOwnProperty("columnRangeFilter"))
                            $root.google.bigtable.v2.ColumnRange.encode(message.columnRangeFilter, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.timestampRangeFilter != null && message.hasOwnProperty("timestampRangeFilter"))
                            $root.google.bigtable.v2.TimestampRange.encode(message.timestampRangeFilter, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.valueRegexFilter != null && message.hasOwnProperty("valueRegexFilter"))
                            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.valueRegexFilter);
                        if (message.cellsPerRowOffsetFilter != null && message.hasOwnProperty("cellsPerRowOffsetFilter"))
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.cellsPerRowOffsetFilter);
                        if (message.cellsPerRowLimitFilter != null && message.hasOwnProperty("cellsPerRowLimitFilter"))
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.cellsPerRowLimitFilter);
                        if (message.cellsPerColumnLimitFilter != null && message.hasOwnProperty("cellsPerColumnLimitFilter"))
                            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.cellsPerColumnLimitFilter);
                        if (message.stripValueTransformer != null && message.hasOwnProperty("stripValueTransformer"))
                            writer.uint32(/* id 13, wireType 0 =*/104).bool(message.stripValueTransformer);
                        if (message.rowSampleFilter != null && message.hasOwnProperty("rowSampleFilter"))
                            writer.uint32(/* id 14, wireType 1 =*/113).double(message.rowSampleFilter);
                        if (message.valueRangeFilter != null && message.hasOwnProperty("valueRangeFilter"))
                            $root.google.bigtable.v2.ValueRange.encode(message.valueRangeFilter, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                        if (message.sink != null && message.hasOwnProperty("sink"))
                            writer.uint32(/* id 16, wireType 0 =*/128).bool(message.sink);
                        if (message.passAllFilter != null && message.hasOwnProperty("passAllFilter"))
                            writer.uint32(/* id 17, wireType 0 =*/136).bool(message.passAllFilter);
                        if (message.blockAllFilter != null && message.hasOwnProperty("blockAllFilter"))
                            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.blockAllFilter);
                        if (message.applyLabelTransformer != null && message.hasOwnProperty("applyLabelTransformer"))
                            writer.uint32(/* id 19, wireType 2 =*/154).string(message.applyLabelTransformer);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RowFilter message, length delimited. Does not implicitly {@link google.bigtable.v2.RowFilter.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.RowFilter
                     * @static
                     * @param {google.bigtable.v2.IRowFilter} message RowFilter message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RowFilter.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RowFilter message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.RowFilter
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.RowFilter} RowFilter
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RowFilter.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.RowFilter();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.chain = $root.google.bigtable.v2.RowFilter.Chain.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.interleave = $root.google.bigtable.v2.RowFilter.Interleave.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.condition = $root.google.bigtable.v2.RowFilter.Condition.decode(reader, reader.uint32());
                                break;
                            case 16:
                                message.sink = reader.bool();
                                break;
                            case 17:
                                message.passAllFilter = reader.bool();
                                break;
                            case 18:
                                message.blockAllFilter = reader.bool();
                                break;
                            case 4:
                                message.rowKeyRegexFilter = reader.bytes();
                                break;
                            case 14:
                                message.rowSampleFilter = reader.double();
                                break;
                            case 5:
                                message.familyNameRegexFilter = reader.string();
                                break;
                            case 6:
                                message.columnQualifierRegexFilter = reader.bytes();
                                break;
                            case 7:
                                message.columnRangeFilter = $root.google.bigtable.v2.ColumnRange.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.timestampRangeFilter = $root.google.bigtable.v2.TimestampRange.decode(reader, reader.uint32());
                                break;
                            case 9:
                                message.valueRegexFilter = reader.bytes();
                                break;
                            case 15:
                                message.valueRangeFilter = $root.google.bigtable.v2.ValueRange.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.cellsPerRowOffsetFilter = reader.int32();
                                break;
                            case 11:
                                message.cellsPerRowLimitFilter = reader.int32();
                                break;
                            case 12:
                                message.cellsPerColumnLimitFilter = reader.int32();
                                break;
                            case 13:
                                message.stripValueTransformer = reader.bool();
                                break;
                            case 19:
                                message.applyLabelTransformer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RowFilter message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.RowFilter
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.RowFilter} RowFilter
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RowFilter.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RowFilter message.
                     * @function verify
                     * @memberof google.bigtable.v2.RowFilter
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RowFilter.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.chain != null && message.hasOwnProperty("chain")) {
                            properties.filter = 1;
                            {
                                var error = $root.google.bigtable.v2.RowFilter.Chain.verify(message.chain);
                                if (error)
                                    return "chain." + error;
                            }
                        }
                        if (message.interleave != null && message.hasOwnProperty("interleave")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            {
                                var error = $root.google.bigtable.v2.RowFilter.Interleave.verify(message.interleave);
                                if (error)
                                    return "interleave." + error;
                            }
                        }
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            {
                                var error = $root.google.bigtable.v2.RowFilter.Condition.verify(message.condition);
                                if (error)
                                    return "condition." + error;
                            }
                        }
                        if (message.sink != null && message.hasOwnProperty("sink")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (typeof message.sink !== "boolean")
                                return "sink: boolean expected";
                        }
                        if (message.passAllFilter != null && message.hasOwnProperty("passAllFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (typeof message.passAllFilter !== "boolean")
                                return "passAllFilter: boolean expected";
                        }
                        if (message.blockAllFilter != null && message.hasOwnProperty("blockAllFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (typeof message.blockAllFilter !== "boolean")
                                return "blockAllFilter: boolean expected";
                        }
                        if (message.rowKeyRegexFilter != null && message.hasOwnProperty("rowKeyRegexFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (!(message.rowKeyRegexFilter && typeof message.rowKeyRegexFilter.length === "number" || $util.isString(message.rowKeyRegexFilter)))
                                return "rowKeyRegexFilter: buffer expected";
                        }
                        if (message.rowSampleFilter != null && message.hasOwnProperty("rowSampleFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (typeof message.rowSampleFilter !== "number")
                                return "rowSampleFilter: number expected";
                        }
                        if (message.familyNameRegexFilter != null && message.hasOwnProperty("familyNameRegexFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (!$util.isString(message.familyNameRegexFilter))
                                return "familyNameRegexFilter: string expected";
                        }
                        if (message.columnQualifierRegexFilter != null && message.hasOwnProperty("columnQualifierRegexFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (!(message.columnQualifierRegexFilter && typeof message.columnQualifierRegexFilter.length === "number" || $util.isString(message.columnQualifierRegexFilter)))
                                return "columnQualifierRegexFilter: buffer expected";
                        }
                        if (message.columnRangeFilter != null && message.hasOwnProperty("columnRangeFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            {
                                var error = $root.google.bigtable.v2.ColumnRange.verify(message.columnRangeFilter);
                                if (error)
                                    return "columnRangeFilter." + error;
                            }
                        }
                        if (message.timestampRangeFilter != null && message.hasOwnProperty("timestampRangeFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            {
                                var error = $root.google.bigtable.v2.TimestampRange.verify(message.timestampRangeFilter);
                                if (error)
                                    return "timestampRangeFilter." + error;
                            }
                        }
                        if (message.valueRegexFilter != null && message.hasOwnProperty("valueRegexFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (!(message.valueRegexFilter && typeof message.valueRegexFilter.length === "number" || $util.isString(message.valueRegexFilter)))
                                return "valueRegexFilter: buffer expected";
                        }
                        if (message.valueRangeFilter != null && message.hasOwnProperty("valueRangeFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            {
                                var error = $root.google.bigtable.v2.ValueRange.verify(message.valueRangeFilter);
                                if (error)
                                    return "valueRangeFilter." + error;
                            }
                        }
                        if (message.cellsPerRowOffsetFilter != null && message.hasOwnProperty("cellsPerRowOffsetFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (!$util.isInteger(message.cellsPerRowOffsetFilter))
                                return "cellsPerRowOffsetFilter: integer expected";
                        }
                        if (message.cellsPerRowLimitFilter != null && message.hasOwnProperty("cellsPerRowLimitFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (!$util.isInteger(message.cellsPerRowLimitFilter))
                                return "cellsPerRowLimitFilter: integer expected";
                        }
                        if (message.cellsPerColumnLimitFilter != null && message.hasOwnProperty("cellsPerColumnLimitFilter")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (!$util.isInteger(message.cellsPerColumnLimitFilter))
                                return "cellsPerColumnLimitFilter: integer expected";
                        }
                        if (message.stripValueTransformer != null && message.hasOwnProperty("stripValueTransformer")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (typeof message.stripValueTransformer !== "boolean")
                                return "stripValueTransformer: boolean expected";
                        }
                        if (message.applyLabelTransformer != null && message.hasOwnProperty("applyLabelTransformer")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            if (!$util.isString(message.applyLabelTransformer))
                                return "applyLabelTransformer: string expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a RowFilter message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.RowFilter
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.RowFilter} RowFilter
                     */
                    RowFilter.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.RowFilter)
                            return object;
                        var message = new $root.google.bigtable.v2.RowFilter();
                        if (object.chain != null) {
                            if (typeof object.chain !== "object")
                                throw TypeError(".google.bigtable.v2.RowFilter.chain: object expected");
                            message.chain = $root.google.bigtable.v2.RowFilter.Chain.fromObject(object.chain);
                        }
                        if (object.interleave != null) {
                            if (typeof object.interleave !== "object")
                                throw TypeError(".google.bigtable.v2.RowFilter.interleave: object expected");
                            message.interleave = $root.google.bigtable.v2.RowFilter.Interleave.fromObject(object.interleave);
                        }
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.bigtable.v2.RowFilter.condition: object expected");
                            message.condition = $root.google.bigtable.v2.RowFilter.Condition.fromObject(object.condition);
                        }
                        if (object.sink != null)
                            message.sink = Boolean(object.sink);
                        if (object.passAllFilter != null)
                            message.passAllFilter = Boolean(object.passAllFilter);
                        if (object.blockAllFilter != null)
                            message.blockAllFilter = Boolean(object.blockAllFilter);
                        if (object.rowKeyRegexFilter != null)
                            if (typeof object.rowKeyRegexFilter === "string")
                                $util.base64.decode(object.rowKeyRegexFilter, message.rowKeyRegexFilter = $util.newBuffer($util.base64.length(object.rowKeyRegexFilter)), 0);
                            else if (object.rowKeyRegexFilter.length)
                                message.rowKeyRegexFilter = object.rowKeyRegexFilter;
                        if (object.rowSampleFilter != null)
                            message.rowSampleFilter = Number(object.rowSampleFilter);
                        if (object.familyNameRegexFilter != null)
                            message.familyNameRegexFilter = String(object.familyNameRegexFilter);
                        if (object.columnQualifierRegexFilter != null)
                            if (typeof object.columnQualifierRegexFilter === "string")
                                $util.base64.decode(object.columnQualifierRegexFilter, message.columnQualifierRegexFilter = $util.newBuffer($util.base64.length(object.columnQualifierRegexFilter)), 0);
                            else if (object.columnQualifierRegexFilter.length)
                                message.columnQualifierRegexFilter = object.columnQualifierRegexFilter;
                        if (object.columnRangeFilter != null) {
                            if (typeof object.columnRangeFilter !== "object")
                                throw TypeError(".google.bigtable.v2.RowFilter.columnRangeFilter: object expected");
                            message.columnRangeFilter = $root.google.bigtable.v2.ColumnRange.fromObject(object.columnRangeFilter);
                        }
                        if (object.timestampRangeFilter != null) {
                            if (typeof object.timestampRangeFilter !== "object")
                                throw TypeError(".google.bigtable.v2.RowFilter.timestampRangeFilter: object expected");
                            message.timestampRangeFilter = $root.google.bigtable.v2.TimestampRange.fromObject(object.timestampRangeFilter);
                        }
                        if (object.valueRegexFilter != null)
                            if (typeof object.valueRegexFilter === "string")
                                $util.base64.decode(object.valueRegexFilter, message.valueRegexFilter = $util.newBuffer($util.base64.length(object.valueRegexFilter)), 0);
                            else if (object.valueRegexFilter.length)
                                message.valueRegexFilter = object.valueRegexFilter;
                        if (object.valueRangeFilter != null) {
                            if (typeof object.valueRangeFilter !== "object")
                                throw TypeError(".google.bigtable.v2.RowFilter.valueRangeFilter: object expected");
                            message.valueRangeFilter = $root.google.bigtable.v2.ValueRange.fromObject(object.valueRangeFilter);
                        }
                        if (object.cellsPerRowOffsetFilter != null)
                            message.cellsPerRowOffsetFilter = object.cellsPerRowOffsetFilter | 0;
                        if (object.cellsPerRowLimitFilter != null)
                            message.cellsPerRowLimitFilter = object.cellsPerRowLimitFilter | 0;
                        if (object.cellsPerColumnLimitFilter != null)
                            message.cellsPerColumnLimitFilter = object.cellsPerColumnLimitFilter | 0;
                        if (object.stripValueTransformer != null)
                            message.stripValueTransformer = Boolean(object.stripValueTransformer);
                        if (object.applyLabelTransformer != null)
                            message.applyLabelTransformer = String(object.applyLabelTransformer);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RowFilter message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.RowFilter
                     * @static
                     * @param {google.bigtable.v2.RowFilter} message RowFilter
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RowFilter.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.chain != null && message.hasOwnProperty("chain")) {
                            object.chain = $root.google.bigtable.v2.RowFilter.Chain.toObject(message.chain, options);
                            if (options.oneofs)
                                object.filter = "chain";
                        }
                        if (message.interleave != null && message.hasOwnProperty("interleave")) {
                            object.interleave = $root.google.bigtable.v2.RowFilter.Interleave.toObject(message.interleave, options);
                            if (options.oneofs)
                                object.filter = "interleave";
                        }
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            object.condition = $root.google.bigtable.v2.RowFilter.Condition.toObject(message.condition, options);
                            if (options.oneofs)
                                object.filter = "condition";
                        }
                        if (message.rowKeyRegexFilter != null && message.hasOwnProperty("rowKeyRegexFilter")) {
                            object.rowKeyRegexFilter = options.bytes === String ? $util.base64.encode(message.rowKeyRegexFilter, 0, message.rowKeyRegexFilter.length) : options.bytes === Array ? Array.prototype.slice.call(message.rowKeyRegexFilter) : message.rowKeyRegexFilter;
                            if (options.oneofs)
                                object.filter = "rowKeyRegexFilter";
                        }
                        if (message.familyNameRegexFilter != null && message.hasOwnProperty("familyNameRegexFilter")) {
                            object.familyNameRegexFilter = message.familyNameRegexFilter;
                            if (options.oneofs)
                                object.filter = "familyNameRegexFilter";
                        }
                        if (message.columnQualifierRegexFilter != null && message.hasOwnProperty("columnQualifierRegexFilter")) {
                            object.columnQualifierRegexFilter = options.bytes === String ? $util.base64.encode(message.columnQualifierRegexFilter, 0, message.columnQualifierRegexFilter.length) : options.bytes === Array ? Array.prototype.slice.call(message.columnQualifierRegexFilter) : message.columnQualifierRegexFilter;
                            if (options.oneofs)
                                object.filter = "columnQualifierRegexFilter";
                        }
                        if (message.columnRangeFilter != null && message.hasOwnProperty("columnRangeFilter")) {
                            object.columnRangeFilter = $root.google.bigtable.v2.ColumnRange.toObject(message.columnRangeFilter, options);
                            if (options.oneofs)
                                object.filter = "columnRangeFilter";
                        }
                        if (message.timestampRangeFilter != null && message.hasOwnProperty("timestampRangeFilter")) {
                            object.timestampRangeFilter = $root.google.bigtable.v2.TimestampRange.toObject(message.timestampRangeFilter, options);
                            if (options.oneofs)
                                object.filter = "timestampRangeFilter";
                        }
                        if (message.valueRegexFilter != null && message.hasOwnProperty("valueRegexFilter")) {
                            object.valueRegexFilter = options.bytes === String ? $util.base64.encode(message.valueRegexFilter, 0, message.valueRegexFilter.length) : options.bytes === Array ? Array.prototype.slice.call(message.valueRegexFilter) : message.valueRegexFilter;
                            if (options.oneofs)
                                object.filter = "valueRegexFilter";
                        }
                        if (message.cellsPerRowOffsetFilter != null && message.hasOwnProperty("cellsPerRowOffsetFilter")) {
                            object.cellsPerRowOffsetFilter = message.cellsPerRowOffsetFilter;
                            if (options.oneofs)
                                object.filter = "cellsPerRowOffsetFilter";
                        }
                        if (message.cellsPerRowLimitFilter != null && message.hasOwnProperty("cellsPerRowLimitFilter")) {
                            object.cellsPerRowLimitFilter = message.cellsPerRowLimitFilter;
                            if (options.oneofs)
                                object.filter = "cellsPerRowLimitFilter";
                        }
                        if (message.cellsPerColumnLimitFilter != null && message.hasOwnProperty("cellsPerColumnLimitFilter")) {
                            object.cellsPerColumnLimitFilter = message.cellsPerColumnLimitFilter;
                            if (options.oneofs)
                                object.filter = "cellsPerColumnLimitFilter";
                        }
                        if (message.stripValueTransformer != null && message.hasOwnProperty("stripValueTransformer")) {
                            object.stripValueTransformer = message.stripValueTransformer;
                            if (options.oneofs)
                                object.filter = "stripValueTransformer";
                        }
                        if (message.rowSampleFilter != null && message.hasOwnProperty("rowSampleFilter")) {
                            object.rowSampleFilter = options.json && !isFinite(message.rowSampleFilter) ? String(message.rowSampleFilter) : message.rowSampleFilter;
                            if (options.oneofs)
                                object.filter = "rowSampleFilter";
                        }
                        if (message.valueRangeFilter != null && message.hasOwnProperty("valueRangeFilter")) {
                            object.valueRangeFilter = $root.google.bigtable.v2.ValueRange.toObject(message.valueRangeFilter, options);
                            if (options.oneofs)
                                object.filter = "valueRangeFilter";
                        }
                        if (message.sink != null && message.hasOwnProperty("sink")) {
                            object.sink = message.sink;
                            if (options.oneofs)
                                object.filter = "sink";
                        }
                        if (message.passAllFilter != null && message.hasOwnProperty("passAllFilter")) {
                            object.passAllFilter = message.passAllFilter;
                            if (options.oneofs)
                                object.filter = "passAllFilter";
                        }
                        if (message.blockAllFilter != null && message.hasOwnProperty("blockAllFilter")) {
                            object.blockAllFilter = message.blockAllFilter;
                            if (options.oneofs)
                                object.filter = "blockAllFilter";
                        }
                        if (message.applyLabelTransformer != null && message.hasOwnProperty("applyLabelTransformer")) {
                            object.applyLabelTransformer = message.applyLabelTransformer;
                            if (options.oneofs)
                                object.filter = "applyLabelTransformer";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this RowFilter to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.RowFilter
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RowFilter.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    RowFilter.Chain = (function() {
    
                        /**
                         * Properties of a Chain.
                         * @memberof google.bigtable.v2.RowFilter
                         * @interface IChain
                         * @property {Array.<google.bigtable.v2.IRowFilter>|null} [filters] Chain filters
                         */
    
                        /**
                         * Constructs a new Chain.
                         * @memberof google.bigtable.v2.RowFilter
                         * @classdesc Represents a Chain.
                         * @implements IChain
                         * @constructor
                         * @param {google.bigtable.v2.RowFilter.IChain=} [properties] Properties to set
                         */
                        function Chain(properties) {
                            this.filters = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Chain filters.
                         * @member {Array.<google.bigtable.v2.IRowFilter>} filters
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @instance
                         */
                        Chain.prototype.filters = $util.emptyArray;
    
                        /**
                         * Creates a new Chain instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @static
                         * @param {google.bigtable.v2.RowFilter.IChain=} [properties] Properties to set
                         * @returns {google.bigtable.v2.RowFilter.Chain} Chain instance
                         */
                        Chain.create = function create(properties) {
                            return new Chain(properties);
                        };
    
                        /**
                         * Encodes the specified Chain message. Does not implicitly {@link google.bigtable.v2.RowFilter.Chain.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @static
                         * @param {google.bigtable.v2.RowFilter.IChain} message Chain message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Chain.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.filters != null && message.filters.length)
                                for (var i = 0; i < message.filters.length; ++i)
                                    $root.google.bigtable.v2.RowFilter.encode(message.filters[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Chain message, length delimited. Does not implicitly {@link google.bigtable.v2.RowFilter.Chain.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @static
                         * @param {google.bigtable.v2.RowFilter.IChain} message Chain message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Chain.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Chain message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.RowFilter.Chain} Chain
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Chain.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.RowFilter.Chain();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.filters && message.filters.length))
                                        message.filters = [];
                                    message.filters.push($root.google.bigtable.v2.RowFilter.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Chain message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.RowFilter.Chain} Chain
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Chain.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Chain message.
                         * @function verify
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Chain.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.filters != null && message.hasOwnProperty("filters")) {
                                if (!Array.isArray(message.filters))
                                    return "filters: array expected";
                                for (var i = 0; i < message.filters.length; ++i) {
                                    var error = $root.google.bigtable.v2.RowFilter.verify(message.filters[i]);
                                    if (error)
                                        return "filters." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Chain message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.RowFilter.Chain} Chain
                         */
                        Chain.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.RowFilter.Chain)
                                return object;
                            var message = new $root.google.bigtable.v2.RowFilter.Chain();
                            if (object.filters) {
                                if (!Array.isArray(object.filters))
                                    throw TypeError(".google.bigtable.v2.RowFilter.Chain.filters: array expected");
                                message.filters = [];
                                for (var i = 0; i < object.filters.length; ++i) {
                                    if (typeof object.filters[i] !== "object")
                                        throw TypeError(".google.bigtable.v2.RowFilter.Chain.filters: object expected");
                                    message.filters[i] = $root.google.bigtable.v2.RowFilter.fromObject(object.filters[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Chain message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @static
                         * @param {google.bigtable.v2.RowFilter.Chain} message Chain
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Chain.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.filters = [];
                            if (message.filters && message.filters.length) {
                                object.filters = [];
                                for (var j = 0; j < message.filters.length; ++j)
                                    object.filters[j] = $root.google.bigtable.v2.RowFilter.toObject(message.filters[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Chain to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.RowFilter.Chain
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Chain.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Chain;
                    })();
    
                    RowFilter.Interleave = (function() {
    
                        /**
                         * Properties of an Interleave.
                         * @memberof google.bigtable.v2.RowFilter
                         * @interface IInterleave
                         * @property {Array.<google.bigtable.v2.IRowFilter>|null} [filters] Interleave filters
                         */
    
                        /**
                         * Constructs a new Interleave.
                         * @memberof google.bigtable.v2.RowFilter
                         * @classdesc Represents an Interleave.
                         * @implements IInterleave
                         * @constructor
                         * @param {google.bigtable.v2.RowFilter.IInterleave=} [properties] Properties to set
                         */
                        function Interleave(properties) {
                            this.filters = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Interleave filters.
                         * @member {Array.<google.bigtable.v2.IRowFilter>} filters
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @instance
                         */
                        Interleave.prototype.filters = $util.emptyArray;
    
                        /**
                         * Creates a new Interleave instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @static
                         * @param {google.bigtable.v2.RowFilter.IInterleave=} [properties] Properties to set
                         * @returns {google.bigtable.v2.RowFilter.Interleave} Interleave instance
                         */
                        Interleave.create = function create(properties) {
                            return new Interleave(properties);
                        };
    
                        /**
                         * Encodes the specified Interleave message. Does not implicitly {@link google.bigtable.v2.RowFilter.Interleave.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @static
                         * @param {google.bigtable.v2.RowFilter.IInterleave} message Interleave message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Interleave.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.filters != null && message.filters.length)
                                for (var i = 0; i < message.filters.length; ++i)
                                    $root.google.bigtable.v2.RowFilter.encode(message.filters[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Interleave message, length delimited. Does not implicitly {@link google.bigtable.v2.RowFilter.Interleave.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @static
                         * @param {google.bigtable.v2.RowFilter.IInterleave} message Interleave message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Interleave.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Interleave message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.RowFilter.Interleave} Interleave
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Interleave.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.RowFilter.Interleave();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.filters && message.filters.length))
                                        message.filters = [];
                                    message.filters.push($root.google.bigtable.v2.RowFilter.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Interleave message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.RowFilter.Interleave} Interleave
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Interleave.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Interleave message.
                         * @function verify
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Interleave.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.filters != null && message.hasOwnProperty("filters")) {
                                if (!Array.isArray(message.filters))
                                    return "filters: array expected";
                                for (var i = 0; i < message.filters.length; ++i) {
                                    var error = $root.google.bigtable.v2.RowFilter.verify(message.filters[i]);
                                    if (error)
                                        return "filters." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Interleave message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.RowFilter.Interleave} Interleave
                         */
                        Interleave.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.RowFilter.Interleave)
                                return object;
                            var message = new $root.google.bigtable.v2.RowFilter.Interleave();
                            if (object.filters) {
                                if (!Array.isArray(object.filters))
                                    throw TypeError(".google.bigtable.v2.RowFilter.Interleave.filters: array expected");
                                message.filters = [];
                                for (var i = 0; i < object.filters.length; ++i) {
                                    if (typeof object.filters[i] !== "object")
                                        throw TypeError(".google.bigtable.v2.RowFilter.Interleave.filters: object expected");
                                    message.filters[i] = $root.google.bigtable.v2.RowFilter.fromObject(object.filters[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Interleave message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @static
                         * @param {google.bigtable.v2.RowFilter.Interleave} message Interleave
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Interleave.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.filters = [];
                            if (message.filters && message.filters.length) {
                                object.filters = [];
                                for (var j = 0; j < message.filters.length; ++j)
                                    object.filters[j] = $root.google.bigtable.v2.RowFilter.toObject(message.filters[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Interleave to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.RowFilter.Interleave
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Interleave.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Interleave;
                    })();
    
                    RowFilter.Condition = (function() {
    
                        /**
                         * Properties of a Condition.
                         * @memberof google.bigtable.v2.RowFilter
                         * @interface ICondition
                         * @property {google.bigtable.v2.IRowFilter|null} [predicateFilter] Condition predicateFilter
                         * @property {google.bigtable.v2.IRowFilter|null} [trueFilter] Condition trueFilter
                         * @property {google.bigtable.v2.IRowFilter|null} [falseFilter] Condition falseFilter
                         */
    
                        /**
                         * Constructs a new Condition.
                         * @memberof google.bigtable.v2.RowFilter
                         * @classdesc Represents a Condition.
                         * @implements ICondition
                         * @constructor
                         * @param {google.bigtable.v2.RowFilter.ICondition=} [properties] Properties to set
                         */
                        function Condition(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Condition predicateFilter.
                         * @member {google.bigtable.v2.IRowFilter|null|undefined} predicateFilter
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @instance
                         */
                        Condition.prototype.predicateFilter = null;
    
                        /**
                         * Condition trueFilter.
                         * @member {google.bigtable.v2.IRowFilter|null|undefined} trueFilter
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @instance
                         */
                        Condition.prototype.trueFilter = null;
    
                        /**
                         * Condition falseFilter.
                         * @member {google.bigtable.v2.IRowFilter|null|undefined} falseFilter
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @instance
                         */
                        Condition.prototype.falseFilter = null;
    
                        /**
                         * Creates a new Condition instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @static
                         * @param {google.bigtable.v2.RowFilter.ICondition=} [properties] Properties to set
                         * @returns {google.bigtable.v2.RowFilter.Condition} Condition instance
                         */
                        Condition.create = function create(properties) {
                            return new Condition(properties);
                        };
    
                        /**
                         * Encodes the specified Condition message. Does not implicitly {@link google.bigtable.v2.RowFilter.Condition.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @static
                         * @param {google.bigtable.v2.RowFilter.ICondition} message Condition message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Condition.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.predicateFilter != null && message.hasOwnProperty("predicateFilter"))
                                $root.google.bigtable.v2.RowFilter.encode(message.predicateFilter, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.trueFilter != null && message.hasOwnProperty("trueFilter"))
                                $root.google.bigtable.v2.RowFilter.encode(message.trueFilter, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.falseFilter != null && message.hasOwnProperty("falseFilter"))
                                $root.google.bigtable.v2.RowFilter.encode(message.falseFilter, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Condition message, length delimited. Does not implicitly {@link google.bigtable.v2.RowFilter.Condition.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @static
                         * @param {google.bigtable.v2.RowFilter.ICondition} message Condition message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Condition.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Condition message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.RowFilter.Condition} Condition
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Condition.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.RowFilter.Condition();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.predicateFilter = $root.google.bigtable.v2.RowFilter.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.trueFilter = $root.google.bigtable.v2.RowFilter.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.falseFilter = $root.google.bigtable.v2.RowFilter.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Condition message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.RowFilter.Condition} Condition
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Condition.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Condition message.
                         * @function verify
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Condition.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.predicateFilter != null && message.hasOwnProperty("predicateFilter")) {
                                var error = $root.google.bigtable.v2.RowFilter.verify(message.predicateFilter);
                                if (error)
                                    return "predicateFilter." + error;
                            }
                            if (message.trueFilter != null && message.hasOwnProperty("trueFilter")) {
                                var error = $root.google.bigtable.v2.RowFilter.verify(message.trueFilter);
                                if (error)
                                    return "trueFilter." + error;
                            }
                            if (message.falseFilter != null && message.hasOwnProperty("falseFilter")) {
                                var error = $root.google.bigtable.v2.RowFilter.verify(message.falseFilter);
                                if (error)
                                    return "falseFilter." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Condition message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.RowFilter.Condition} Condition
                         */
                        Condition.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.RowFilter.Condition)
                                return object;
                            var message = new $root.google.bigtable.v2.RowFilter.Condition();
                            if (object.predicateFilter != null) {
                                if (typeof object.predicateFilter !== "object")
                                    throw TypeError(".google.bigtable.v2.RowFilter.Condition.predicateFilter: object expected");
                                message.predicateFilter = $root.google.bigtable.v2.RowFilter.fromObject(object.predicateFilter);
                            }
                            if (object.trueFilter != null) {
                                if (typeof object.trueFilter !== "object")
                                    throw TypeError(".google.bigtable.v2.RowFilter.Condition.trueFilter: object expected");
                                message.trueFilter = $root.google.bigtable.v2.RowFilter.fromObject(object.trueFilter);
                            }
                            if (object.falseFilter != null) {
                                if (typeof object.falseFilter !== "object")
                                    throw TypeError(".google.bigtable.v2.RowFilter.Condition.falseFilter: object expected");
                                message.falseFilter = $root.google.bigtable.v2.RowFilter.fromObject(object.falseFilter);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Condition message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @static
                         * @param {google.bigtable.v2.RowFilter.Condition} message Condition
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Condition.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.predicateFilter = null;
                                object.trueFilter = null;
                                object.falseFilter = null;
                            }
                            if (message.predicateFilter != null && message.hasOwnProperty("predicateFilter"))
                                object.predicateFilter = $root.google.bigtable.v2.RowFilter.toObject(message.predicateFilter, options);
                            if (message.trueFilter != null && message.hasOwnProperty("trueFilter"))
                                object.trueFilter = $root.google.bigtable.v2.RowFilter.toObject(message.trueFilter, options);
                            if (message.falseFilter != null && message.hasOwnProperty("falseFilter"))
                                object.falseFilter = $root.google.bigtable.v2.RowFilter.toObject(message.falseFilter, options);
                            return object;
                        };
    
                        /**
                         * Converts this Condition to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.RowFilter.Condition
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Condition.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Condition;
                    })();
    
                    return RowFilter;
                })();
    
                v2.Mutation = (function() {
    
                    /**
                     * Properties of a Mutation.
                     * @memberof google.bigtable.v2
                     * @interface IMutation
                     * @property {google.bigtable.v2.Mutation.ISetCell|null} [setCell] Mutation setCell
                     * @property {google.bigtable.v2.Mutation.IDeleteFromColumn|null} [deleteFromColumn] Mutation deleteFromColumn
                     * @property {google.bigtable.v2.Mutation.IDeleteFromFamily|null} [deleteFromFamily] Mutation deleteFromFamily
                     * @property {google.bigtable.v2.Mutation.IDeleteFromRow|null} [deleteFromRow] Mutation deleteFromRow
                     */
    
                    /**
                     * Constructs a new Mutation.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a Mutation.
                     * @implements IMutation
                     * @constructor
                     * @param {google.bigtable.v2.IMutation=} [properties] Properties to set
                     */
                    function Mutation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Mutation setCell.
                     * @member {google.bigtable.v2.Mutation.ISetCell|null|undefined} setCell
                     * @memberof google.bigtable.v2.Mutation
                     * @instance
                     */
                    Mutation.prototype.setCell = null;
    
                    /**
                     * Mutation deleteFromColumn.
                     * @member {google.bigtable.v2.Mutation.IDeleteFromColumn|null|undefined} deleteFromColumn
                     * @memberof google.bigtable.v2.Mutation
                     * @instance
                     */
                    Mutation.prototype.deleteFromColumn = null;
    
                    /**
                     * Mutation deleteFromFamily.
                     * @member {google.bigtable.v2.Mutation.IDeleteFromFamily|null|undefined} deleteFromFamily
                     * @memberof google.bigtable.v2.Mutation
                     * @instance
                     */
                    Mutation.prototype.deleteFromFamily = null;
    
                    /**
                     * Mutation deleteFromRow.
                     * @member {google.bigtable.v2.Mutation.IDeleteFromRow|null|undefined} deleteFromRow
                     * @memberof google.bigtable.v2.Mutation
                     * @instance
                     */
                    Mutation.prototype.deleteFromRow = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Mutation mutation.
                     * @member {"setCell"|"deleteFromColumn"|"deleteFromFamily"|"deleteFromRow"|undefined} mutation
                     * @memberof google.bigtable.v2.Mutation
                     * @instance
                     */
                    Object.defineProperty(Mutation.prototype, "mutation", {
                        get: $util.oneOfGetter($oneOfFields = ["setCell", "deleteFromColumn", "deleteFromFamily", "deleteFromRow"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Mutation instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.Mutation
                     * @static
                     * @param {google.bigtable.v2.IMutation=} [properties] Properties to set
                     * @returns {google.bigtable.v2.Mutation} Mutation instance
                     */
                    Mutation.create = function create(properties) {
                        return new Mutation(properties);
                    };
    
                    /**
                     * Encodes the specified Mutation message. Does not implicitly {@link google.bigtable.v2.Mutation.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.Mutation
                     * @static
                     * @param {google.bigtable.v2.IMutation} message Mutation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Mutation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.setCell != null && message.hasOwnProperty("setCell"))
                            $root.google.bigtable.v2.Mutation.SetCell.encode(message.setCell, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.deleteFromColumn != null && message.hasOwnProperty("deleteFromColumn"))
                            $root.google.bigtable.v2.Mutation.DeleteFromColumn.encode(message.deleteFromColumn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.deleteFromFamily != null && message.hasOwnProperty("deleteFromFamily"))
                            $root.google.bigtable.v2.Mutation.DeleteFromFamily.encode(message.deleteFromFamily, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.deleteFromRow != null && message.hasOwnProperty("deleteFromRow"))
                            $root.google.bigtable.v2.Mutation.DeleteFromRow.encode(message.deleteFromRow, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Mutation message, length delimited. Does not implicitly {@link google.bigtable.v2.Mutation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.Mutation
                     * @static
                     * @param {google.bigtable.v2.IMutation} message Mutation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Mutation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Mutation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.Mutation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.Mutation} Mutation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Mutation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Mutation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.setCell = $root.google.bigtable.v2.Mutation.SetCell.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.deleteFromColumn = $root.google.bigtable.v2.Mutation.DeleteFromColumn.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.deleteFromFamily = $root.google.bigtable.v2.Mutation.DeleteFromFamily.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.deleteFromRow = $root.google.bigtable.v2.Mutation.DeleteFromRow.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Mutation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.Mutation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.Mutation} Mutation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Mutation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Mutation message.
                     * @function verify
                     * @memberof google.bigtable.v2.Mutation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Mutation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.setCell != null && message.hasOwnProperty("setCell")) {
                            properties.mutation = 1;
                            {
                                var error = $root.google.bigtable.v2.Mutation.SetCell.verify(message.setCell);
                                if (error)
                                    return "setCell." + error;
                            }
                        }
                        if (message.deleteFromColumn != null && message.hasOwnProperty("deleteFromColumn")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            {
                                var error = $root.google.bigtable.v2.Mutation.DeleteFromColumn.verify(message.deleteFromColumn);
                                if (error)
                                    return "deleteFromColumn." + error;
                            }
                        }
                        if (message.deleteFromFamily != null && message.hasOwnProperty("deleteFromFamily")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            {
                                var error = $root.google.bigtable.v2.Mutation.DeleteFromFamily.verify(message.deleteFromFamily);
                                if (error)
                                    return "deleteFromFamily." + error;
                            }
                        }
                        if (message.deleteFromRow != null && message.hasOwnProperty("deleteFromRow")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            {
                                var error = $root.google.bigtable.v2.Mutation.DeleteFromRow.verify(message.deleteFromRow);
                                if (error)
                                    return "deleteFromRow." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Mutation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.Mutation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.Mutation} Mutation
                     */
                    Mutation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.Mutation)
                            return object;
                        var message = new $root.google.bigtable.v2.Mutation();
                        if (object.setCell != null) {
                            if (typeof object.setCell !== "object")
                                throw TypeError(".google.bigtable.v2.Mutation.setCell: object expected");
                            message.setCell = $root.google.bigtable.v2.Mutation.SetCell.fromObject(object.setCell);
                        }
                        if (object.deleteFromColumn != null) {
                            if (typeof object.deleteFromColumn !== "object")
                                throw TypeError(".google.bigtable.v2.Mutation.deleteFromColumn: object expected");
                            message.deleteFromColumn = $root.google.bigtable.v2.Mutation.DeleteFromColumn.fromObject(object.deleteFromColumn);
                        }
                        if (object.deleteFromFamily != null) {
                            if (typeof object.deleteFromFamily !== "object")
                                throw TypeError(".google.bigtable.v2.Mutation.deleteFromFamily: object expected");
                            message.deleteFromFamily = $root.google.bigtable.v2.Mutation.DeleteFromFamily.fromObject(object.deleteFromFamily);
                        }
                        if (object.deleteFromRow != null) {
                            if (typeof object.deleteFromRow !== "object")
                                throw TypeError(".google.bigtable.v2.Mutation.deleteFromRow: object expected");
                            message.deleteFromRow = $root.google.bigtable.v2.Mutation.DeleteFromRow.fromObject(object.deleteFromRow);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Mutation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.Mutation
                     * @static
                     * @param {google.bigtable.v2.Mutation} message Mutation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Mutation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.setCell != null && message.hasOwnProperty("setCell")) {
                            object.setCell = $root.google.bigtable.v2.Mutation.SetCell.toObject(message.setCell, options);
                            if (options.oneofs)
                                object.mutation = "setCell";
                        }
                        if (message.deleteFromColumn != null && message.hasOwnProperty("deleteFromColumn")) {
                            object.deleteFromColumn = $root.google.bigtable.v2.Mutation.DeleteFromColumn.toObject(message.deleteFromColumn, options);
                            if (options.oneofs)
                                object.mutation = "deleteFromColumn";
                        }
                        if (message.deleteFromFamily != null && message.hasOwnProperty("deleteFromFamily")) {
                            object.deleteFromFamily = $root.google.bigtable.v2.Mutation.DeleteFromFamily.toObject(message.deleteFromFamily, options);
                            if (options.oneofs)
                                object.mutation = "deleteFromFamily";
                        }
                        if (message.deleteFromRow != null && message.hasOwnProperty("deleteFromRow")) {
                            object.deleteFromRow = $root.google.bigtable.v2.Mutation.DeleteFromRow.toObject(message.deleteFromRow, options);
                            if (options.oneofs)
                                object.mutation = "deleteFromRow";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Mutation to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.Mutation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Mutation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    Mutation.SetCell = (function() {
    
                        /**
                         * Properties of a SetCell.
                         * @memberof google.bigtable.v2.Mutation
                         * @interface ISetCell
                         * @property {string|null} [familyName] SetCell familyName
                         * @property {Uint8Array|null} [columnQualifier] SetCell columnQualifier
                         * @property {number|Long|null} [timestampMicros] SetCell timestampMicros
                         * @property {Uint8Array|null} [value] SetCell value
                         */
    
                        /**
                         * Constructs a new SetCell.
                         * @memberof google.bigtable.v2.Mutation
                         * @classdesc Represents a SetCell.
                         * @implements ISetCell
                         * @constructor
                         * @param {google.bigtable.v2.Mutation.ISetCell=} [properties] Properties to set
                         */
                        function SetCell(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SetCell familyName.
                         * @member {string} familyName
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @instance
                         */
                        SetCell.prototype.familyName = "";
    
                        /**
                         * SetCell columnQualifier.
                         * @member {Uint8Array} columnQualifier
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @instance
                         */
                        SetCell.prototype.columnQualifier = $util.newBuffer([]);
    
                        /**
                         * SetCell timestampMicros.
                         * @member {number|Long} timestampMicros
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @instance
                         */
                        SetCell.prototype.timestampMicros = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * SetCell value.
                         * @member {Uint8Array} value
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @instance
                         */
                        SetCell.prototype.value = $util.newBuffer([]);
    
                        /**
                         * Creates a new SetCell instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @static
                         * @param {google.bigtable.v2.Mutation.ISetCell=} [properties] Properties to set
                         * @returns {google.bigtable.v2.Mutation.SetCell} SetCell instance
                         */
                        SetCell.create = function create(properties) {
                            return new SetCell(properties);
                        };
    
                        /**
                         * Encodes the specified SetCell message. Does not implicitly {@link google.bigtable.v2.Mutation.SetCell.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @static
                         * @param {google.bigtable.v2.Mutation.ISetCell} message SetCell message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SetCell.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.familyName);
                            if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.columnQualifier);
                            if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestampMicros);
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.value);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SetCell message, length delimited. Does not implicitly {@link google.bigtable.v2.Mutation.SetCell.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @static
                         * @param {google.bigtable.v2.Mutation.ISetCell} message SetCell message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SetCell.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SetCell message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.Mutation.SetCell} SetCell
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SetCell.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Mutation.SetCell();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.familyName = reader.string();
                                    break;
                                case 2:
                                    message.columnQualifier = reader.bytes();
                                    break;
                                case 3:
                                    message.timestampMicros = reader.int64();
                                    break;
                                case 4:
                                    message.value = reader.bytes();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SetCell message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.Mutation.SetCell} SetCell
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SetCell.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SetCell message.
                         * @function verify
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SetCell.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                if (!$util.isString(message.familyName))
                                    return "familyName: string expected";
                            if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                                if (!(message.columnQualifier && typeof message.columnQualifier.length === "number" || $util.isString(message.columnQualifier)))
                                    return "columnQualifier: buffer expected";
                            if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                                if (!$util.isInteger(message.timestampMicros) && !(message.timestampMicros && $util.isInteger(message.timestampMicros.low) && $util.isInteger(message.timestampMicros.high)))
                                    return "timestampMicros: integer|Long expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                                    return "value: buffer expected";
                            return null;
                        };
    
                        /**
                         * Creates a SetCell message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.Mutation.SetCell} SetCell
                         */
                        SetCell.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.Mutation.SetCell)
                                return object;
                            var message = new $root.google.bigtable.v2.Mutation.SetCell();
                            if (object.familyName != null)
                                message.familyName = String(object.familyName);
                            if (object.columnQualifier != null)
                                if (typeof object.columnQualifier === "string")
                                    $util.base64.decode(object.columnQualifier, message.columnQualifier = $util.newBuffer($util.base64.length(object.columnQualifier)), 0);
                                else if (object.columnQualifier.length)
                                    message.columnQualifier = object.columnQualifier;
                            if (object.timestampMicros != null)
                                if ($util.Long)
                                    (message.timestampMicros = $util.Long.fromValue(object.timestampMicros)).unsigned = false;
                                else if (typeof object.timestampMicros === "string")
                                    message.timestampMicros = parseInt(object.timestampMicros, 10);
                                else if (typeof object.timestampMicros === "number")
                                    message.timestampMicros = object.timestampMicros;
                                else if (typeof object.timestampMicros === "object")
                                    message.timestampMicros = new $util.LongBits(object.timestampMicros.low >>> 0, object.timestampMicros.high >>> 0).toNumber();
                            if (object.value != null)
                                if (typeof object.value === "string")
                                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                                else if (object.value.length)
                                    message.value = object.value;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SetCell message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @static
                         * @param {google.bigtable.v2.Mutation.SetCell} message SetCell
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SetCell.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.familyName = "";
                                if (options.bytes === String)
                                    object.columnQualifier = "";
                                else {
                                    object.columnQualifier = [];
                                    if (options.bytes !== Array)
                                        object.columnQualifier = $util.newBuffer(object.columnQualifier);
                                }
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.timestampMicros = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.timestampMicros = options.longs === String ? "0" : 0;
                                if (options.bytes === String)
                                    object.value = "";
                                else {
                                    object.value = [];
                                    if (options.bytes !== Array)
                                        object.value = $util.newBuffer(object.value);
                                }
                            }
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                object.familyName = message.familyName;
                            if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                                object.columnQualifier = options.bytes === String ? $util.base64.encode(message.columnQualifier, 0, message.columnQualifier.length) : options.bytes === Array ? Array.prototype.slice.call(message.columnQualifier) : message.columnQualifier;
                            if (message.timestampMicros != null && message.hasOwnProperty("timestampMicros"))
                                if (typeof message.timestampMicros === "number")
                                    object.timestampMicros = options.longs === String ? String(message.timestampMicros) : message.timestampMicros;
                                else
                                    object.timestampMicros = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMicros) : options.longs === Number ? new $util.LongBits(message.timestampMicros.low >>> 0, message.timestampMicros.high >>> 0).toNumber() : message.timestampMicros;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                            return object;
                        };
    
                        /**
                         * Converts this SetCell to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.Mutation.SetCell
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SetCell.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return SetCell;
                    })();
    
                    Mutation.DeleteFromColumn = (function() {
    
                        /**
                         * Properties of a DeleteFromColumn.
                         * @memberof google.bigtable.v2.Mutation
                         * @interface IDeleteFromColumn
                         * @property {string|null} [familyName] DeleteFromColumn familyName
                         * @property {Uint8Array|null} [columnQualifier] DeleteFromColumn columnQualifier
                         * @property {google.bigtable.v2.ITimestampRange|null} [timeRange] DeleteFromColumn timeRange
                         */
    
                        /**
                         * Constructs a new DeleteFromColumn.
                         * @memberof google.bigtable.v2.Mutation
                         * @classdesc Represents a DeleteFromColumn.
                         * @implements IDeleteFromColumn
                         * @constructor
                         * @param {google.bigtable.v2.Mutation.IDeleteFromColumn=} [properties] Properties to set
                         */
                        function DeleteFromColumn(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteFromColumn familyName.
                         * @member {string} familyName
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @instance
                         */
                        DeleteFromColumn.prototype.familyName = "";
    
                        /**
                         * DeleteFromColumn columnQualifier.
                         * @member {Uint8Array} columnQualifier
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @instance
                         */
                        DeleteFromColumn.prototype.columnQualifier = $util.newBuffer([]);
    
                        /**
                         * DeleteFromColumn timeRange.
                         * @member {google.bigtable.v2.ITimestampRange|null|undefined} timeRange
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @instance
                         */
                        DeleteFromColumn.prototype.timeRange = null;
    
                        /**
                         * Creates a new DeleteFromColumn instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromColumn=} [properties] Properties to set
                         * @returns {google.bigtable.v2.Mutation.DeleteFromColumn} DeleteFromColumn instance
                         */
                        DeleteFromColumn.create = function create(properties) {
                            return new DeleteFromColumn(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteFromColumn message. Does not implicitly {@link google.bigtable.v2.Mutation.DeleteFromColumn.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromColumn} message DeleteFromColumn message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteFromColumn.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.familyName);
                            if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.columnQualifier);
                            if (message.timeRange != null && message.hasOwnProperty("timeRange"))
                                $root.google.bigtable.v2.TimestampRange.encode(message.timeRange, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteFromColumn message, length delimited. Does not implicitly {@link google.bigtable.v2.Mutation.DeleteFromColumn.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromColumn} message DeleteFromColumn message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteFromColumn.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteFromColumn message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.Mutation.DeleteFromColumn} DeleteFromColumn
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteFromColumn.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Mutation.DeleteFromColumn();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.familyName = reader.string();
                                    break;
                                case 2:
                                    message.columnQualifier = reader.bytes();
                                    break;
                                case 3:
                                    message.timeRange = $root.google.bigtable.v2.TimestampRange.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteFromColumn message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.Mutation.DeleteFromColumn} DeleteFromColumn
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteFromColumn.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteFromColumn message.
                         * @function verify
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteFromColumn.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                if (!$util.isString(message.familyName))
                                    return "familyName: string expected";
                            if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                                if (!(message.columnQualifier && typeof message.columnQualifier.length === "number" || $util.isString(message.columnQualifier)))
                                    return "columnQualifier: buffer expected";
                            if (message.timeRange != null && message.hasOwnProperty("timeRange")) {
                                var error = $root.google.bigtable.v2.TimestampRange.verify(message.timeRange);
                                if (error)
                                    return "timeRange." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DeleteFromColumn message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.Mutation.DeleteFromColumn} DeleteFromColumn
                         */
                        DeleteFromColumn.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.Mutation.DeleteFromColumn)
                                return object;
                            var message = new $root.google.bigtable.v2.Mutation.DeleteFromColumn();
                            if (object.familyName != null)
                                message.familyName = String(object.familyName);
                            if (object.columnQualifier != null)
                                if (typeof object.columnQualifier === "string")
                                    $util.base64.decode(object.columnQualifier, message.columnQualifier = $util.newBuffer($util.base64.length(object.columnQualifier)), 0);
                                else if (object.columnQualifier.length)
                                    message.columnQualifier = object.columnQualifier;
                            if (object.timeRange != null) {
                                if (typeof object.timeRange !== "object")
                                    throw TypeError(".google.bigtable.v2.Mutation.DeleteFromColumn.timeRange: object expected");
                                message.timeRange = $root.google.bigtable.v2.TimestampRange.fromObject(object.timeRange);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteFromColumn message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @static
                         * @param {google.bigtable.v2.Mutation.DeleteFromColumn} message DeleteFromColumn
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteFromColumn.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.familyName = "";
                                if (options.bytes === String)
                                    object.columnQualifier = "";
                                else {
                                    object.columnQualifier = [];
                                    if (options.bytes !== Array)
                                        object.columnQualifier = $util.newBuffer(object.columnQualifier);
                                }
                                object.timeRange = null;
                            }
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                object.familyName = message.familyName;
                            if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                                object.columnQualifier = options.bytes === String ? $util.base64.encode(message.columnQualifier, 0, message.columnQualifier.length) : options.bytes === Array ? Array.prototype.slice.call(message.columnQualifier) : message.columnQualifier;
                            if (message.timeRange != null && message.hasOwnProperty("timeRange"))
                                object.timeRange = $root.google.bigtable.v2.TimestampRange.toObject(message.timeRange, options);
                            return object;
                        };
    
                        /**
                         * Converts this DeleteFromColumn to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.Mutation.DeleteFromColumn
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteFromColumn.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteFromColumn;
                    })();
    
                    Mutation.DeleteFromFamily = (function() {
    
                        /**
                         * Properties of a DeleteFromFamily.
                         * @memberof google.bigtable.v2.Mutation
                         * @interface IDeleteFromFamily
                         * @property {string|null} [familyName] DeleteFromFamily familyName
                         */
    
                        /**
                         * Constructs a new DeleteFromFamily.
                         * @memberof google.bigtable.v2.Mutation
                         * @classdesc Represents a DeleteFromFamily.
                         * @implements IDeleteFromFamily
                         * @constructor
                         * @param {google.bigtable.v2.Mutation.IDeleteFromFamily=} [properties] Properties to set
                         */
                        function DeleteFromFamily(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteFromFamily familyName.
                         * @member {string} familyName
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @instance
                         */
                        DeleteFromFamily.prototype.familyName = "";
    
                        /**
                         * Creates a new DeleteFromFamily instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromFamily=} [properties] Properties to set
                         * @returns {google.bigtable.v2.Mutation.DeleteFromFamily} DeleteFromFamily instance
                         */
                        DeleteFromFamily.create = function create(properties) {
                            return new DeleteFromFamily(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteFromFamily message. Does not implicitly {@link google.bigtable.v2.Mutation.DeleteFromFamily.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromFamily} message DeleteFromFamily message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteFromFamily.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.familyName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteFromFamily message, length delimited. Does not implicitly {@link google.bigtable.v2.Mutation.DeleteFromFamily.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromFamily} message DeleteFromFamily message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteFromFamily.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteFromFamily message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.Mutation.DeleteFromFamily} DeleteFromFamily
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteFromFamily.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Mutation.DeleteFromFamily();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.familyName = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteFromFamily message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.Mutation.DeleteFromFamily} DeleteFromFamily
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteFromFamily.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteFromFamily message.
                         * @function verify
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteFromFamily.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                if (!$util.isString(message.familyName))
                                    return "familyName: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteFromFamily message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.Mutation.DeleteFromFamily} DeleteFromFamily
                         */
                        DeleteFromFamily.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.Mutation.DeleteFromFamily)
                                return object;
                            var message = new $root.google.bigtable.v2.Mutation.DeleteFromFamily();
                            if (object.familyName != null)
                                message.familyName = String(object.familyName);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteFromFamily message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @static
                         * @param {google.bigtable.v2.Mutation.DeleteFromFamily} message DeleteFromFamily
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteFromFamily.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.familyName = "";
                            if (message.familyName != null && message.hasOwnProperty("familyName"))
                                object.familyName = message.familyName;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteFromFamily to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.Mutation.DeleteFromFamily
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteFromFamily.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteFromFamily;
                    })();
    
                    Mutation.DeleteFromRow = (function() {
    
                        /**
                         * Properties of a DeleteFromRow.
                         * @memberof google.bigtable.v2.Mutation
                         * @interface IDeleteFromRow
                         */
    
                        /**
                         * Constructs a new DeleteFromRow.
                         * @memberof google.bigtable.v2.Mutation
                         * @classdesc Represents a DeleteFromRow.
                         * @implements IDeleteFromRow
                         * @constructor
                         * @param {google.bigtable.v2.Mutation.IDeleteFromRow=} [properties] Properties to set
                         */
                        function DeleteFromRow(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new DeleteFromRow instance using the specified properties.
                         * @function create
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromRow=} [properties] Properties to set
                         * @returns {google.bigtable.v2.Mutation.DeleteFromRow} DeleteFromRow instance
                         */
                        DeleteFromRow.create = function create(properties) {
                            return new DeleteFromRow(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteFromRow message. Does not implicitly {@link google.bigtable.v2.Mutation.DeleteFromRow.verify|verify} messages.
                         * @function encode
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromRow} message DeleteFromRow message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteFromRow.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteFromRow message, length delimited. Does not implicitly {@link google.bigtable.v2.Mutation.DeleteFromRow.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @static
                         * @param {google.bigtable.v2.Mutation.IDeleteFromRow} message DeleteFromRow message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteFromRow.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteFromRow message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.bigtable.v2.Mutation.DeleteFromRow} DeleteFromRow
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteFromRow.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.Mutation.DeleteFromRow();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteFromRow message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.bigtable.v2.Mutation.DeleteFromRow} DeleteFromRow
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteFromRow.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteFromRow message.
                         * @function verify
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteFromRow.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteFromRow message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.bigtable.v2.Mutation.DeleteFromRow} DeleteFromRow
                         */
                        DeleteFromRow.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.bigtable.v2.Mutation.DeleteFromRow)
                                return object;
                            return new $root.google.bigtable.v2.Mutation.DeleteFromRow();
                        };
    
                        /**
                         * Creates a plain object from a DeleteFromRow message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @static
                         * @param {google.bigtable.v2.Mutation.DeleteFromRow} message DeleteFromRow
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteFromRow.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this DeleteFromRow to JSON.
                         * @function toJSON
                         * @memberof google.bigtable.v2.Mutation.DeleteFromRow
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteFromRow.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DeleteFromRow;
                    })();
    
                    return Mutation;
                })();
    
                v2.ReadModifyWriteRule = (function() {
    
                    /**
                     * Properties of a ReadModifyWriteRule.
                     * @memberof google.bigtable.v2
                     * @interface IReadModifyWriteRule
                     * @property {string|null} [familyName] ReadModifyWriteRule familyName
                     * @property {Uint8Array|null} [columnQualifier] ReadModifyWriteRule columnQualifier
                     * @property {Uint8Array|null} [appendValue] ReadModifyWriteRule appendValue
                     * @property {number|Long|null} [incrementAmount] ReadModifyWriteRule incrementAmount
                     */
    
                    /**
                     * Constructs a new ReadModifyWriteRule.
                     * @memberof google.bigtable.v2
                     * @classdesc Represents a ReadModifyWriteRule.
                     * @implements IReadModifyWriteRule
                     * @constructor
                     * @param {google.bigtable.v2.IReadModifyWriteRule=} [properties] Properties to set
                     */
                    function ReadModifyWriteRule(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReadModifyWriteRule familyName.
                     * @member {string} familyName
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @instance
                     */
                    ReadModifyWriteRule.prototype.familyName = "";
    
                    /**
                     * ReadModifyWriteRule columnQualifier.
                     * @member {Uint8Array} columnQualifier
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @instance
                     */
                    ReadModifyWriteRule.prototype.columnQualifier = $util.newBuffer([]);
    
                    /**
                     * ReadModifyWriteRule appendValue.
                     * @member {Uint8Array} appendValue
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @instance
                     */
                    ReadModifyWriteRule.prototype.appendValue = $util.newBuffer([]);
    
                    /**
                     * ReadModifyWriteRule incrementAmount.
                     * @member {number|Long} incrementAmount
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @instance
                     */
                    ReadModifyWriteRule.prototype.incrementAmount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * ReadModifyWriteRule rule.
                     * @member {"appendValue"|"incrementAmount"|undefined} rule
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @instance
                     */
                    Object.defineProperty(ReadModifyWriteRule.prototype, "rule", {
                        get: $util.oneOfGetter($oneOfFields = ["appendValue", "incrementAmount"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new ReadModifyWriteRule instance using the specified properties.
                     * @function create
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRule=} [properties] Properties to set
                     * @returns {google.bigtable.v2.ReadModifyWriteRule} ReadModifyWriteRule instance
                     */
                    ReadModifyWriteRule.create = function create(properties) {
                        return new ReadModifyWriteRule(properties);
                    };
    
                    /**
                     * Encodes the specified ReadModifyWriteRule message. Does not implicitly {@link google.bigtable.v2.ReadModifyWriteRule.verify|verify} messages.
                     * @function encode
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRule} message ReadModifyWriteRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadModifyWriteRule.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.familyName != null && message.hasOwnProperty("familyName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.familyName);
                        if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.columnQualifier);
                        if (message.appendValue != null && message.hasOwnProperty("appendValue"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.appendValue);
                        if (message.incrementAmount != null && message.hasOwnProperty("incrementAmount"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.incrementAmount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadModifyWriteRule message, length delimited. Does not implicitly {@link google.bigtable.v2.ReadModifyWriteRule.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @static
                     * @param {google.bigtable.v2.IReadModifyWriteRule} message ReadModifyWriteRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadModifyWriteRule.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadModifyWriteRule message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.bigtable.v2.ReadModifyWriteRule} ReadModifyWriteRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadModifyWriteRule.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.bigtable.v2.ReadModifyWriteRule();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.familyName = reader.string();
                                break;
                            case 2:
                                message.columnQualifier = reader.bytes();
                                break;
                            case 3:
                                message.appendValue = reader.bytes();
                                break;
                            case 4:
                                message.incrementAmount = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadModifyWriteRule message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.bigtable.v2.ReadModifyWriteRule} ReadModifyWriteRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadModifyWriteRule.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadModifyWriteRule message.
                     * @function verify
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadModifyWriteRule.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.familyName != null && message.hasOwnProperty("familyName"))
                            if (!$util.isString(message.familyName))
                                return "familyName: string expected";
                        if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                            if (!(message.columnQualifier && typeof message.columnQualifier.length === "number" || $util.isString(message.columnQualifier)))
                                return "columnQualifier: buffer expected";
                        if (message.appendValue != null && message.hasOwnProperty("appendValue")) {
                            properties.rule = 1;
                            if (!(message.appendValue && typeof message.appendValue.length === "number" || $util.isString(message.appendValue)))
                                return "appendValue: buffer expected";
                        }
                        if (message.incrementAmount != null && message.hasOwnProperty("incrementAmount")) {
                            if (properties.rule === 1)
                                return "rule: multiple values";
                            properties.rule = 1;
                            if (!$util.isInteger(message.incrementAmount) && !(message.incrementAmount && $util.isInteger(message.incrementAmount.low) && $util.isInteger(message.incrementAmount.high)))
                                return "incrementAmount: integer|Long expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ReadModifyWriteRule message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.bigtable.v2.ReadModifyWriteRule} ReadModifyWriteRule
                     */
                    ReadModifyWriteRule.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.bigtable.v2.ReadModifyWriteRule)
                            return object;
                        var message = new $root.google.bigtable.v2.ReadModifyWriteRule();
                        if (object.familyName != null)
                            message.familyName = String(object.familyName);
                        if (object.columnQualifier != null)
                            if (typeof object.columnQualifier === "string")
                                $util.base64.decode(object.columnQualifier, message.columnQualifier = $util.newBuffer($util.base64.length(object.columnQualifier)), 0);
                            else if (object.columnQualifier.length)
                                message.columnQualifier = object.columnQualifier;
                        if (object.appendValue != null)
                            if (typeof object.appendValue === "string")
                                $util.base64.decode(object.appendValue, message.appendValue = $util.newBuffer($util.base64.length(object.appendValue)), 0);
                            else if (object.appendValue.length)
                                message.appendValue = object.appendValue;
                        if (object.incrementAmount != null)
                            if ($util.Long)
                                (message.incrementAmount = $util.Long.fromValue(object.incrementAmount)).unsigned = false;
                            else if (typeof object.incrementAmount === "string")
                                message.incrementAmount = parseInt(object.incrementAmount, 10);
                            else if (typeof object.incrementAmount === "number")
                                message.incrementAmount = object.incrementAmount;
                            else if (typeof object.incrementAmount === "object")
                                message.incrementAmount = new $util.LongBits(object.incrementAmount.low >>> 0, object.incrementAmount.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReadModifyWriteRule message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @static
                     * @param {google.bigtable.v2.ReadModifyWriteRule} message ReadModifyWriteRule
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadModifyWriteRule.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.familyName = "";
                            if (options.bytes === String)
                                object.columnQualifier = "";
                            else {
                                object.columnQualifier = [];
                                if (options.bytes !== Array)
                                    object.columnQualifier = $util.newBuffer(object.columnQualifier);
                            }
                        }
                        if (message.familyName != null && message.hasOwnProperty("familyName"))
                            object.familyName = message.familyName;
                        if (message.columnQualifier != null && message.hasOwnProperty("columnQualifier"))
                            object.columnQualifier = options.bytes === String ? $util.base64.encode(message.columnQualifier, 0, message.columnQualifier.length) : options.bytes === Array ? Array.prototype.slice.call(message.columnQualifier) : message.columnQualifier;
                        if (message.appendValue != null && message.hasOwnProperty("appendValue")) {
                            object.appendValue = options.bytes === String ? $util.base64.encode(message.appendValue, 0, message.appendValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.appendValue) : message.appendValue;
                            if (options.oneofs)
                                object.rule = "appendValue";
                        }
                        if (message.incrementAmount != null && message.hasOwnProperty("incrementAmount")) {
                            if (typeof message.incrementAmount === "number")
                                object.incrementAmount = options.longs === String ? String(message.incrementAmount) : message.incrementAmount;
                            else
                                object.incrementAmount = options.longs === String ? $util.Long.prototype.toString.call(message.incrementAmount) : options.longs === Number ? new $util.LongBits(message.incrementAmount.low >>> 0, message.incrementAmount.high >>> 0).toNumber() : message.incrementAmount;
                            if (options.oneofs)
                                object.rule = "incrementAmount";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ReadModifyWriteRule to JSON.
                     * @function toJSON
                     * @memberof google.bigtable.v2.ReadModifyWriteRule
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadModifyWriteRule.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReadModifyWriteRule;
                })();
    
                return v2;
            })();
    
            return bigtable;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.rules && message.rules.length))
                                message.rules = [];
                            message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.fullyDecodeReservedExpansion = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = "";
    
                /**
                 * HttpRule put.
                 * @member {string} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = "";
    
                /**
                 * HttpRule post.
                 * @member {string} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = "";
    
                /**
                 * HttpRule delete.
                 * @member {string} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = "";
    
                /**
                 * HttpRule patch.
                 * @member {string} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = "";
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && message.hasOwnProperty("get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && message.hasOwnProperty("put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && message.hasOwnProperty("post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && message.hasOwnProperty("delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && message.hasOwnProperty("patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && message.hasOwnProperty("body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && message.hasOwnProperty("custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.selector = reader.string();
                            break;
                        case 2:
                            message.get = reader.string();
                            break;
                        case 3:
                            message.put = reader.string();
                            break;
                        case 4:
                            message.post = reader.string();
                            break;
                        case 5:
                            message["delete"] = reader.string();
                            break;
                        case 6:
                            message.patch = reader.string();
                            break;
                        case 8:
                            message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.body = reader.string();
                            break;
                        case 12:
                            message.responseBody = reader.string();
                            break;
                        case 11:
                            if (!(message.additionalBindings && message.additionalBindings.length))
                                message.additionalBindings = [];
                            message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && message.hasOwnProperty("path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.kind = reader.string();
                            break;
                        case 2:
                            message.path = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CustomHttpPattern;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {string}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && message.hasOwnProperty("history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            if (!(message.pattern && message.pattern.length))
                                message.pattern = [];
                            message.pattern.push(reader.string());
                            break;
                        case 3:
                            message.nameField = reader.string();
                            break;
                        case 4:
                            message.history = reader.int32();
                            break;
                        case 5:
                            message.plural = reader.string();
                            break;
                        case 6:
                            message.singular = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.pattern = [];
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {string}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            message.childType = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResourceReference;
            })();
    
            return api;
        })();
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.publicDependency && message.publicDependency.length))
                                message.publicDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.publicDependency.push(reader.int32());
                            } else
                                message.publicDependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weakDependency && message.weakDependency.length))
                                message.weakDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weakDependency.push(reader.int32());
                            } else
                                message.weakDependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.messageType && message.messageType.length))
                                message.messageType = [];
                            message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nestedType && message.nestedType.length))
                                message.nestedType = [];
                            message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extensionRange && message.extensionRange.length))
                                message.extensionRange = [];
                            message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneofDecl && message.oneofDecl.length))
                                message.oneofDecl = [];
                            message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && message.hasOwnProperty("options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            case 3:
                                message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && message.hasOwnProperty("label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.typeName = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.defaultValue = reader.string();
                            break;
                        case 9:
                            message.oneofIndex = reader.int32();
                            break;
                        case 10:
                            message.jsonName = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {string}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {string}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.inputType = reader.string();
                            break;
                        case 3:
                            message.outputType = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.clientStreaming = reader.bool();
                            break;
                        case 6:
                            message.serverStreaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = false;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.javaPackage = reader.string();
                            break;
                        case 8:
                            message.javaOuterClassname = reader.string();
                            break;
                        case 10:
                            message.javaMultipleFiles = reader.bool();
                            break;
                        case 20:
                            message.javaGenerateEqualsAndHash = reader.bool();
                            break;
                        case 27:
                            message.javaStringCheckUtf8 = reader.bool();
                            break;
                        case 9:
                            message.optimizeFor = reader.int32();
                            break;
                        case 11:
                            message.goPackage = reader.string();
                            break;
                        case 16:
                            message.ccGenericServices = reader.bool();
                            break;
                        case 17:
                            message.javaGenericServices = reader.bool();
                            break;
                        case 18:
                            message.pyGenericServices = reader.bool();
                            break;
                        case 42:
                            message.phpGenericServices = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.ccEnableArenas = reader.bool();
                            break;
                        case 36:
                            message.objcClassPrefix = reader.string();
                            break;
                        case 37:
                            message.csharpNamespace = reader.string();
                            break;
                        case 39:
                            message.swiftPrefix = reader.string();
                            break;
                        case 40:
                            message.phpClassPrefix = reader.string();
                            break;
                        case 41:
                            message.phpNamespace = reader.string();
                            break;
                        case 44:
                            message.phpMetadataNamespace = reader.string();
                            break;
                        case 45:
                            message.rubyPackage = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                message[".google.api.resourceDefinition"] = [];
                            message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = false;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {string}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageSetWireFormat = reader.bool();
                            break;
                        case 2:
                            message.noStandardDescriptorAccessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.mapEntry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1052:
                            if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                message[".google.api.fieldBehavior"] = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                            } else
                                message[".google.api.fieldBehavior"].push(reader.int32());
                            break;
                        case 1055:
                            message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {string}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {string}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allowAlias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1049:
                            message[".google.api.defaultHost"] = reader.string();
                            break;
                        case 1050:
                            message[".google.api.oauthScopes"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 * @property {google.longrunning.IOperationInfo|null} [".google.longrunning.operationInfo"] MethodOptions .google.longrunning.operationInfo
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * MethodOptions .google.longrunning.operationInfo.
                 * @member {google.longrunning.IOperationInfo|null|undefined} .google.longrunning.operationInfo
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                        $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(/* id 1049, wireType 2 =*/8394).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 34:
                            message.idempotencyLevel = reader.int32();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 72295728:
                            message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                            break;
                        case 1051:
                            if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                message[".google.api.methodSignature"] = [];
                            message[".google.api.methodSignature"].push(reader.string());
                            break;
                        case 1049:
                            message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                        var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                        if (error)
                            return ".google.longrunning.operationInfo." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    if (object[".google.longrunning.operationInfo"] != null) {
                        if (typeof object[".google.longrunning.operationInfo"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                        message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.longrunning.operationInfo"] = null;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                        object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {string}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifierValue = reader.string();
                            break;
                        case 4:
                            message.positiveIntValue = reader.uint64();
                            break;
                        case 5:
                            message.negativeIntValue = reader.int64();
                            break;
                        case 6:
                            message.doubleValue = reader.double();
                            break;
                        case 7:
                            message.stringValue = reader.bytes();
                            break;
                        case 8:
                            message.aggregateValue = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.namePart = reader.string();
                                break;
                            case 2:
                                message.isExtension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leadingComments = reader.string();
                                break;
                            case 4:
                                message.trailingComments = reader.string();
                                break;
                            case 6:
                                if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                    message.leadingDetachedComments = [];
                                message.leadingDetachedComments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.sourceFile = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type_url = reader.string();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Any;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Duration;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Empty;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.paths && message.paths.length))
                                message.paths = [];
                            message.paths.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FieldMask;
            })();
    
            protobuf.DoubleValue = (function() {
    
                /**
                 * Properties of a DoubleValue.
                 * @memberof google.protobuf
                 * @interface IDoubleValue
                 * @property {number|null} [value] DoubleValue value
                 */
    
                /**
                 * Constructs a new DoubleValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a DoubleValue.
                 * @implements IDoubleValue
                 * @constructor
                 * @param {google.protobuf.IDoubleValue=} [properties] Properties to set
                 */
                function DoubleValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DoubleValue value.
                 * @member {number} value
                 * @memberof google.protobuf.DoubleValue
                 * @instance
                 */
                DoubleValue.prototype.value = 0;
    
                /**
                 * Creates a new DoubleValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.IDoubleValue=} [properties] Properties to set
                 * @returns {google.protobuf.DoubleValue} DoubleValue instance
                 */
                DoubleValue.create = function create(properties) {
                    return new DoubleValue(properties);
                };
    
                /**
                 * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DoubleValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified DoubleValue message, length delimited. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DoubleValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DoubleValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DoubleValue} DoubleValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DoubleValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DoubleValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.double();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DoubleValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DoubleValue} DoubleValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DoubleValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DoubleValue message.
                 * @function verify
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DoubleValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value !== "number")
                            return "value: number expected";
                    return null;
                };
    
                /**
                 * Creates a DoubleValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DoubleValue} DoubleValue
                 */
                DoubleValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DoubleValue)
                        return object;
                    var message = new $root.google.protobuf.DoubleValue();
                    if (object.value != null)
                        message.value = Number(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DoubleValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.DoubleValue} message DoubleValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DoubleValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this DoubleValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DoubleValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DoubleValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DoubleValue;
            })();
    
            protobuf.FloatValue = (function() {
    
                /**
                 * Properties of a FloatValue.
                 * @memberof google.protobuf
                 * @interface IFloatValue
                 * @property {number|null} [value] FloatValue value
                 */
    
                /**
                 * Constructs a new FloatValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a FloatValue.
                 * @implements IFloatValue
                 * @constructor
                 * @param {google.protobuf.IFloatValue=} [properties] Properties to set
                 */
                function FloatValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FloatValue value.
                 * @member {number} value
                 * @memberof google.protobuf.FloatValue
                 * @instance
                 */
                FloatValue.prototype.value = 0;
    
                /**
                 * Creates a new FloatValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.IFloatValue=} [properties] Properties to set
                 * @returns {google.protobuf.FloatValue} FloatValue instance
                 */
                FloatValue.create = function create(properties) {
                    return new FloatValue(properties);
                };
    
                /**
                 * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FloatValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified FloatValue message, length delimited. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FloatValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FloatValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FloatValue} FloatValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FloatValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FloatValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FloatValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FloatValue} FloatValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FloatValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FloatValue message.
                 * @function verify
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FloatValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value !== "number")
                            return "value: number expected";
                    return null;
                };
    
                /**
                 * Creates a FloatValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FloatValue} FloatValue
                 */
                FloatValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FloatValue)
                        return object;
                    var message = new $root.google.protobuf.FloatValue();
                    if (object.value != null)
                        message.value = Number(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FloatValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.FloatValue} message FloatValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FloatValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this FloatValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FloatValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FloatValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FloatValue;
            })();
    
            protobuf.Int64Value = (function() {
    
                /**
                 * Properties of an Int64Value.
                 * @memberof google.protobuf
                 * @interface IInt64Value
                 * @property {number|Long|null} [value] Int64Value value
                 */
    
                /**
                 * Constructs a new Int64Value.
                 * @memberof google.protobuf
                 * @classdesc Represents an Int64Value.
                 * @implements IInt64Value
                 * @constructor
                 * @param {google.protobuf.IInt64Value=} [properties] Properties to set
                 */
                function Int64Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Int64Value value.
                 * @member {number|Long} value
                 * @memberof google.protobuf.Int64Value
                 * @instance
                 */
                Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Creates a new Int64Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.IInt64Value=} [properties] Properties to set
                 * @returns {google.protobuf.Int64Value} Int64Value instance
                 */
                Int64Value.create = function create(properties) {
                    return new Int64Value(properties);
                };
    
                /**
                 * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int64Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Int64Value message, length delimited. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int64Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Int64Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Int64Value} Int64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int64Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int64Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Int64Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Int64Value} Int64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int64Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Int64Value message.
                 * @function verify
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Int64Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                            return "value: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates an Int64Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Int64Value} Int64Value
                 */
                Int64Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Int64Value)
                        return object;
                    var message = new $root.google.protobuf.Int64Value();
                    if (object.value != null)
                        if ($util.Long)
                            (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                        else if (typeof object.value === "string")
                            message.value = parseInt(object.value, 10);
                        else if (typeof object.value === "number")
                            message.value = object.value;
                        else if (typeof object.value === "object")
                            message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from an Int64Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.Int64Value} message Int64Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Int64Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.value = options.longs === String ? "0" : 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value === "number")
                            object.value = options.longs === String ? String(message.value) : message.value;
                        else
                            object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                    return object;
                };
    
                /**
                 * Converts this Int64Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Int64Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Int64Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Int64Value;
            })();
    
            protobuf.UInt64Value = (function() {
    
                /**
                 * Properties of a UInt64Value.
                 * @memberof google.protobuf
                 * @interface IUInt64Value
                 * @property {number|Long|null} [value] UInt64Value value
                 */
    
                /**
                 * Constructs a new UInt64Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a UInt64Value.
                 * @implements IUInt64Value
                 * @constructor
                 * @param {google.protobuf.IUInt64Value=} [properties] Properties to set
                 */
                function UInt64Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UInt64Value value.
                 * @member {number|Long} value
                 * @memberof google.protobuf.UInt64Value
                 * @instance
                 */
                UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Creates a new UInt64Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.IUInt64Value=} [properties] Properties to set
                 * @returns {google.protobuf.UInt64Value} UInt64Value instance
                 */
                UInt64Value.create = function create(properties) {
                    return new UInt64Value(properties);
                };
    
                /**
                 * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt64Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UInt64Value message, length delimited. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt64Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a UInt64Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UInt64Value} UInt64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt64Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt64Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a UInt64Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UInt64Value} UInt64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt64Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a UInt64Value message.
                 * @function verify
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UInt64Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                            return "value: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a UInt64Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UInt64Value} UInt64Value
                 */
                UInt64Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UInt64Value)
                        return object;
                    var message = new $root.google.protobuf.UInt64Value();
                    if (object.value != null)
                        if ($util.Long)
                            (message.value = $util.Long.fromValue(object.value)).unsigned = true;
                        else if (typeof object.value === "string")
                            message.value = parseInt(object.value, 10);
                        else if (typeof object.value === "number")
                            message.value = object.value;
                        else if (typeof object.value === "object")
                            message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a UInt64Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.UInt64Value} message UInt64Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UInt64Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.value = options.longs === String ? "0" : 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value === "number")
                            object.value = options.longs === String ? String(message.value) : message.value;
                        else
                            object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber(true) : message.value;
                    return object;
                };
    
                /**
                 * Converts this UInt64Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UInt64Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UInt64Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return UInt64Value;
            })();
    
            protobuf.Int32Value = (function() {
    
                /**
                 * Properties of an Int32Value.
                 * @memberof google.protobuf
                 * @interface IInt32Value
                 * @property {number|null} [value] Int32Value value
                 */
    
                /**
                 * Constructs a new Int32Value.
                 * @memberof google.protobuf
                 * @classdesc Represents an Int32Value.
                 * @implements IInt32Value
                 * @constructor
                 * @param {google.protobuf.IInt32Value=} [properties] Properties to set
                 */
                function Int32Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Int32Value value.
                 * @member {number} value
                 * @memberof google.protobuf.Int32Value
                 * @instance
                 */
                Int32Value.prototype.value = 0;
    
                /**
                 * Creates a new Int32Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.IInt32Value=} [properties] Properties to set
                 * @returns {google.protobuf.Int32Value} Int32Value instance
                 */
                Int32Value.create = function create(properties) {
                    return new Int32Value(properties);
                };
    
                /**
                 * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int32Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Int32Value message, length delimited. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int32Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Int32Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Int32Value} Int32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int32Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int32Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Int32Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Int32Value} Int32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int32Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Int32Value message.
                 * @function verify
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Int32Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value))
                            return "value: integer expected";
                    return null;
                };
    
                /**
                 * Creates an Int32Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Int32Value} Int32Value
                 */
                Int32Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Int32Value)
                        return object;
                    var message = new $root.google.protobuf.Int32Value();
                    if (object.value != null)
                        message.value = object.value | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Int32Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.Int32Value} message Int32Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Int32Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this Int32Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Int32Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Int32Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Int32Value;
            })();
    
            protobuf.UInt32Value = (function() {
    
                /**
                 * Properties of a UInt32Value.
                 * @memberof google.protobuf
                 * @interface IUInt32Value
                 * @property {number|null} [value] UInt32Value value
                 */
    
                /**
                 * Constructs a new UInt32Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a UInt32Value.
                 * @implements IUInt32Value
                 * @constructor
                 * @param {google.protobuf.IUInt32Value=} [properties] Properties to set
                 */
                function UInt32Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UInt32Value value.
                 * @member {number} value
                 * @memberof google.protobuf.UInt32Value
                 * @instance
                 */
                UInt32Value.prototype.value = 0;
    
                /**
                 * Creates a new UInt32Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.IUInt32Value=} [properties] Properties to set
                 * @returns {google.protobuf.UInt32Value} UInt32Value instance
                 */
                UInt32Value.create = function create(properties) {
                    return new UInt32Value(properties);
                };
    
                /**
                 * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt32Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UInt32Value message, length delimited. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt32Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a UInt32Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UInt32Value} UInt32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt32Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt32Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.uint32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a UInt32Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UInt32Value} UInt32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt32Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a UInt32Value message.
                 * @function verify
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UInt32Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value))
                            return "value: integer expected";
                    return null;
                };
    
                /**
                 * Creates a UInt32Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UInt32Value} UInt32Value
                 */
                UInt32Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UInt32Value)
                        return object;
                    var message = new $root.google.protobuf.UInt32Value();
                    if (object.value != null)
                        message.value = object.value >>> 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a UInt32Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.UInt32Value} message UInt32Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UInt32Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this UInt32Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UInt32Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UInt32Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return UInt32Value;
            })();
    
            protobuf.BoolValue = (function() {
    
                /**
                 * Properties of a BoolValue.
                 * @memberof google.protobuf
                 * @interface IBoolValue
                 * @property {boolean|null} [value] BoolValue value
                 */
    
                /**
                 * Constructs a new BoolValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a BoolValue.
                 * @implements IBoolValue
                 * @constructor
                 * @param {google.protobuf.IBoolValue=} [properties] Properties to set
                 */
                function BoolValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BoolValue value.
                 * @member {boolean} value
                 * @memberof google.protobuf.BoolValue
                 * @instance
                 */
                BoolValue.prototype.value = false;
    
                /**
                 * Creates a new BoolValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.IBoolValue=} [properties] Properties to set
                 * @returns {google.protobuf.BoolValue} BoolValue instance
                 */
                BoolValue.create = function create(properties) {
                    return new BoolValue(properties);
                };
    
                /**
                 * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BoolValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified BoolValue message, length delimited. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BoolValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BoolValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.BoolValue} BoolValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BoolValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BoolValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BoolValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.BoolValue} BoolValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BoolValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BoolValue message.
                 * @function verify
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BoolValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value !== "boolean")
                            return "value: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a BoolValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.BoolValue} BoolValue
                 */
                BoolValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.BoolValue)
                        return object;
                    var message = new $root.google.protobuf.BoolValue();
                    if (object.value != null)
                        message.value = Boolean(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a BoolValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.BoolValue} message BoolValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BoolValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = false;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this BoolValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.BoolValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BoolValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return BoolValue;
            })();
    
            protobuf.StringValue = (function() {
    
                /**
                 * Properties of a StringValue.
                 * @memberof google.protobuf
                 * @interface IStringValue
                 * @property {string|null} [value] StringValue value
                 */
    
                /**
                 * Constructs a new StringValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a StringValue.
                 * @implements IStringValue
                 * @constructor
                 * @param {google.protobuf.IStringValue=} [properties] Properties to set
                 */
                function StringValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * StringValue value.
                 * @member {string} value
                 * @memberof google.protobuf.StringValue
                 * @instance
                 */
                StringValue.prototype.value = "";
    
                /**
                 * Creates a new StringValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.IStringValue=} [properties] Properties to set
                 * @returns {google.protobuf.StringValue} StringValue instance
                 */
                StringValue.create = function create(properties) {
                    return new StringValue(properties);
                };
    
                /**
                 * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StringValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified StringValue message, length delimited. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StringValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a StringValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.StringValue} StringValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StringValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.StringValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a StringValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.StringValue} StringValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StringValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a StringValue message.
                 * @function verify
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StringValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    return null;
                };
    
                /**
                 * Creates a StringValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.StringValue} StringValue
                 */
                StringValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.StringValue)
                        return object;
                    var message = new $root.google.protobuf.StringValue();
                    if (object.value != null)
                        message.value = String(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a StringValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.StringValue} message StringValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StringValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = "";
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this StringValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.StringValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StringValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return StringValue;
            })();
    
            protobuf.BytesValue = (function() {
    
                /**
                 * Properties of a BytesValue.
                 * @memberof google.protobuf
                 * @interface IBytesValue
                 * @property {Uint8Array|null} [value] BytesValue value
                 */
    
                /**
                 * Constructs a new BytesValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a BytesValue.
                 * @implements IBytesValue
                 * @constructor
                 * @param {google.protobuf.IBytesValue=} [properties] Properties to set
                 */
                function BytesValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BytesValue value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.BytesValue
                 * @instance
                 */
                BytesValue.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new BytesValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.IBytesValue=} [properties] Properties to set
                 * @returns {google.protobuf.BytesValue} BytesValue instance
                 */
                BytesValue.create = function create(properties) {
                    return new BytesValue(properties);
                };
    
                /**
                 * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BytesValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified BytesValue message, length delimited. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BytesValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BytesValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.BytesValue} BytesValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BytesValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BytesValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BytesValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.BytesValue} BytesValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BytesValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BytesValue message.
                 * @function verify
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BytesValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a BytesValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.BytesValue} BytesValue
                 */
                BytesValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.BytesValue)
                        return object;
                    var message = new $root.google.protobuf.BytesValue();
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from a BytesValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.BytesValue} message BytesValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BytesValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this BytesValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.BytesValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BytesValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return BytesValue;
            })();
    
            return protobuf;
        })();
    
        google.iam = (function() {
    
            /**
             * Namespace iam.
             * @memberof google
             * @namespace
             */
            var iam = {};
    
            iam.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof google.iam
                 * @namespace
                 */
                var v1 = {};
    
                v1.IAMPolicy = (function() {
    
                    /**
                     * Constructs a new IAMPolicy service.
                     * @memberof google.iam.v1
                     * @classdesc Represents a IAMPolicy
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function IAMPolicy(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (IAMPolicy.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = IAMPolicy;
    
                    /**
                     * Creates new IAMPolicy service using the specified rpc implementation.
                     * @function create
                     * @memberof google.iam.v1.IAMPolicy
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {IAMPolicy} RPC service. Useful where requests and/or responses are streamed.
                     */
                    IAMPolicy.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy#setIamPolicy}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef SetIamPolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.Policy} [response] Policy
                     */
    
                    /**
                     * Calls SetIamPolicy.
                     * @function setIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.SetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                        return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                    }, "name", { value: "SetIamPolicy" });
    
                    /**
                     * Calls SetIamPolicy.
                     * @function setIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                     * @returns {Promise<google.iam.v1.Policy>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy#getIamPolicy}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef GetIamPolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.Policy} [response] Policy
                     */
    
                    /**
                     * Calls GetIamPolicy.
                     * @function getIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.GetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                        return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                    }, "name", { value: "GetIamPolicy" });
    
                    /**
                     * Calls GetIamPolicy.
                     * @function getIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                     * @returns {Promise<google.iam.v1.Policy>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy#testIamPermissions}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef TestIamPermissionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.TestIamPermissionsResponse} [response] TestIamPermissionsResponse
                     */
    
                    /**
                     * Calls TestIamPermissions.
                     * @function testIamPermissions
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.TestIamPermissionsCallback} callback Node-style callback called with the error, if any, and TestIamPermissionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                        return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
                    }, "name", { value: "TestIamPermissions" });
    
                    /**
                     * Calls TestIamPermissions.
                     * @function testIamPermissions
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                     * @returns {Promise<google.iam.v1.TestIamPermissionsResponse>} Promise
                     * @variation 2
                     */
    
                    return IAMPolicy;
                })();
    
                v1.SetIamPolicyRequest = (function() {
    
                    /**
                     * Properties of a SetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @interface ISetIamPolicyRequest
                     * @property {string|null} [resource] SetIamPolicyRequest resource
                     * @property {google.iam.v1.IPolicy|null} [policy] SetIamPolicyRequest policy
                     */
    
                    /**
                     * Constructs a new SetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a SetIamPolicyRequest.
                     * @implements ISetIamPolicyRequest
                     * @constructor
                     * @param {google.iam.v1.ISetIamPolicyRequest=} [properties] Properties to set
                     */
                    function SetIamPolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SetIamPolicyRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     */
                    SetIamPolicyRequest.prototype.resource = "";
    
                    /**
                     * SetIamPolicyRequest policy.
                     * @member {google.iam.v1.IPolicy|null|undefined} policy
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     */
                    SetIamPolicyRequest.prototype.policy = null;
    
                    /**
                     * Creates a new SetIamPolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest instance
                     */
                    SetIamPolicyRequest.create = function create(properties) {
                        return new SetIamPolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified SetIamPolicyRequest message. Does not implicitly {@link google.iam.v1.SetIamPolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest} message SetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetIamPolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.policy != null && message.hasOwnProperty("policy"))
                            $root.google.iam.v1.Policy.encode(message.policy, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SetIamPolicyRequest message, length delimited. Does not implicitly {@link google.iam.v1.SetIamPolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest} message SetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SetIamPolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetIamPolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.SetIamPolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.resource = reader.string();
                                break;
                            case 2:
                                message.policy = $root.google.iam.v1.Policy.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SetIamPolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SetIamPolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SetIamPolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.policy != null && message.hasOwnProperty("policy")) {
                            var error = $root.google.iam.v1.Policy.verify(message.policy);
                            if (error)
                                return "policy." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SetIamPolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     */
                    SetIamPolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.SetIamPolicyRequest)
                            return object;
                        var message = new $root.google.iam.v1.SetIamPolicyRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.policy != null) {
                            if (typeof object.policy !== "object")
                                throw TypeError(".google.iam.v1.SetIamPolicyRequest.policy: object expected");
                            message.policy = $root.google.iam.v1.Policy.fromObject(object.policy);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SetIamPolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.SetIamPolicyRequest} message SetIamPolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SetIamPolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resource = "";
                            object.policy = null;
                        }
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.policy != null && message.hasOwnProperty("policy"))
                            object.policy = $root.google.iam.v1.Policy.toObject(message.policy, options);
                        return object;
                    };
    
                    /**
                     * Converts this SetIamPolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SetIamPolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SetIamPolicyRequest;
                })();
    
                v1.GetIamPolicyRequest = (function() {
    
                    /**
                     * Properties of a GetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @interface IGetIamPolicyRequest
                     * @property {string|null} [resource] GetIamPolicyRequest resource
                     * @property {google.iam.v1.IGetPolicyOptions|null} [options] GetIamPolicyRequest options
                     */
    
                    /**
                     * Constructs a new GetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a GetIamPolicyRequest.
                     * @implements IGetIamPolicyRequest
                     * @constructor
                     * @param {google.iam.v1.IGetIamPolicyRequest=} [properties] Properties to set
                     */
                    function GetIamPolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetIamPolicyRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     */
                    GetIamPolicyRequest.prototype.resource = "";
    
                    /**
                     * GetIamPolicyRequest options.
                     * @member {google.iam.v1.IGetPolicyOptions|null|undefined} options
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     */
                    GetIamPolicyRequest.prototype.options = null;
    
                    /**
                     * Creates a new GetIamPolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest instance
                     */
                    GetIamPolicyRequest.create = function create(properties) {
                        return new GetIamPolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetIamPolicyRequest message. Does not implicitly {@link google.iam.v1.GetIamPolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest} message GetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetIamPolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.options != null && message.hasOwnProperty("options"))
                            $root.google.iam.v1.GetPolicyOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetIamPolicyRequest message, length delimited. Does not implicitly {@link google.iam.v1.GetIamPolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest} message GetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetIamPolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetIamPolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.GetIamPolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.resource = reader.string();
                                break;
                            case 2:
                                message.options = $root.google.iam.v1.GetPolicyOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetIamPolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetIamPolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetIamPolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.iam.v1.GetPolicyOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GetIamPolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     */
                    GetIamPolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.GetIamPolicyRequest)
                            return object;
                        var message = new $root.google.iam.v1.GetIamPolicyRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.iam.v1.GetIamPolicyRequest.options: object expected");
                            message.options = $root.google.iam.v1.GetPolicyOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetIamPolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.GetIamPolicyRequest} message GetIamPolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetIamPolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resource = "";
                            object.options = null;
                        }
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.iam.v1.GetPolicyOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this GetIamPolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetIamPolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetIamPolicyRequest;
                })();
    
                v1.TestIamPermissionsRequest = (function() {
    
                    /**
                     * Properties of a TestIamPermissionsRequest.
                     * @memberof google.iam.v1
                     * @interface ITestIamPermissionsRequest
                     * @property {string|null} [resource] TestIamPermissionsRequest resource
                     * @property {Array.<string>|null} [permissions] TestIamPermissionsRequest permissions
                     */
    
                    /**
                     * Constructs a new TestIamPermissionsRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a TestIamPermissionsRequest.
                     * @implements ITestIamPermissionsRequest
                     * @constructor
                     * @param {google.iam.v1.ITestIamPermissionsRequest=} [properties] Properties to set
                     */
                    function TestIamPermissionsRequest(properties) {
                        this.permissions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestIamPermissionsRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     */
                    TestIamPermissionsRequest.prototype.resource = "";
    
                    /**
                     * TestIamPermissionsRequest permissions.
                     * @member {Array.<string>} permissions
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     */
                    TestIamPermissionsRequest.prototype.permissions = $util.emptyArray;
    
                    /**
                     * Creates a new TestIamPermissionsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest instance
                     */
                    TestIamPermissionsRequest.create = function create(properties) {
                        return new TestIamPermissionsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsRequest message. Does not implicitly {@link google.iam.v1.TestIamPermissionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest} message TestIamPermissionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.permissions != null && message.permissions.length)
                            for (var i = 0; i < message.permissions.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.permissions[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsRequest message, length delimited. Does not implicitly {@link google.iam.v1.TestIamPermissionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest} message TestIamPermissionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestIamPermissionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.TestIamPermissionsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.resource = reader.string();
                                break;
                            case 2:
                                if (!(message.permissions && message.permissions.length))
                                    message.permissions = [];
                                message.permissions.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestIamPermissionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestIamPermissionsRequest message.
                     * @function verify
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestIamPermissionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.permissions != null && message.hasOwnProperty("permissions")) {
                            if (!Array.isArray(message.permissions))
                                return "permissions: array expected";
                            for (var i = 0; i < message.permissions.length; ++i)
                                if (!$util.isString(message.permissions[i]))
                                    return "permissions: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TestIamPermissionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     */
                    TestIamPermissionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.TestIamPermissionsRequest)
                            return object;
                        var message = new $root.google.iam.v1.TestIamPermissionsRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.permissions) {
                            if (!Array.isArray(object.permissions))
                                throw TypeError(".google.iam.v1.TestIamPermissionsRequest.permissions: array expected");
                            message.permissions = [];
                            for (var i = 0; i < object.permissions.length; ++i)
                                message.permissions[i] = String(object.permissions[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestIamPermissionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.TestIamPermissionsRequest} message TestIamPermissionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestIamPermissionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.permissions = [];
                        if (options.defaults)
                            object.resource = "";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.permissions && message.permissions.length) {
                            object.permissions = [];
                            for (var j = 0; j < message.permissions.length; ++j)
                                object.permissions[j] = message.permissions[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TestIamPermissionsRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestIamPermissionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TestIamPermissionsRequest;
                })();
    
                v1.TestIamPermissionsResponse = (function() {
    
                    /**
                     * Properties of a TestIamPermissionsResponse.
                     * @memberof google.iam.v1
                     * @interface ITestIamPermissionsResponse
                     * @property {Array.<string>|null} [permissions] TestIamPermissionsResponse permissions
                     */
    
                    /**
                     * Constructs a new TestIamPermissionsResponse.
                     * @memberof google.iam.v1
                     * @classdesc Represents a TestIamPermissionsResponse.
                     * @implements ITestIamPermissionsResponse
                     * @constructor
                     * @param {google.iam.v1.ITestIamPermissionsResponse=} [properties] Properties to set
                     */
                    function TestIamPermissionsResponse(properties) {
                        this.permissions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestIamPermissionsResponse permissions.
                     * @member {Array.<string>} permissions
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @instance
                     */
                    TestIamPermissionsResponse.prototype.permissions = $util.emptyArray;
    
                    /**
                     * Creates a new TestIamPermissionsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse=} [properties] Properties to set
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse instance
                     */
                    TestIamPermissionsResponse.create = function create(properties) {
                        return new TestIamPermissionsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsResponse message. Does not implicitly {@link google.iam.v1.TestIamPermissionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse} message TestIamPermissionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.permissions != null && message.permissions.length)
                            for (var i = 0; i < message.permissions.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.permissions[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsResponse message, length delimited. Does not implicitly {@link google.iam.v1.TestIamPermissionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse} message TestIamPermissionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestIamPermissionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.TestIamPermissionsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.permissions && message.permissions.length))
                                    message.permissions = [];
                                message.permissions.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestIamPermissionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestIamPermissionsResponse message.
                     * @function verify
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestIamPermissionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.permissions != null && message.hasOwnProperty("permissions")) {
                            if (!Array.isArray(message.permissions))
                                return "permissions: array expected";
                            for (var i = 0; i < message.permissions.length; ++i)
                                if (!$util.isString(message.permissions[i]))
                                    return "permissions: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TestIamPermissionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     */
                    TestIamPermissionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.TestIamPermissionsResponse)
                            return object;
                        var message = new $root.google.iam.v1.TestIamPermissionsResponse();
                        if (object.permissions) {
                            if (!Array.isArray(object.permissions))
                                throw TypeError(".google.iam.v1.TestIamPermissionsResponse.permissions: array expected");
                            message.permissions = [];
                            for (var i = 0; i < object.permissions.length; ++i)
                                message.permissions[i] = String(object.permissions[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestIamPermissionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.TestIamPermissionsResponse} message TestIamPermissionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestIamPermissionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.permissions = [];
                        if (message.permissions && message.permissions.length) {
                            object.permissions = [];
                            for (var j = 0; j < message.permissions.length; ++j)
                                object.permissions[j] = message.permissions[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TestIamPermissionsResponse to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestIamPermissionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TestIamPermissionsResponse;
                })();
    
                v1.GetPolicyOptions = (function() {
    
                    /**
                     * Properties of a GetPolicyOptions.
                     * @memberof google.iam.v1
                     * @interface IGetPolicyOptions
                     * @property {number|null} [requestedPolicyVersion] GetPolicyOptions requestedPolicyVersion
                     */
    
                    /**
                     * Constructs a new GetPolicyOptions.
                     * @memberof google.iam.v1
                     * @classdesc Represents a GetPolicyOptions.
                     * @implements IGetPolicyOptions
                     * @constructor
                     * @param {google.iam.v1.IGetPolicyOptions=} [properties] Properties to set
                     */
                    function GetPolicyOptions(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetPolicyOptions requestedPolicyVersion.
                     * @member {number} requestedPolicyVersion
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @instance
                     */
                    GetPolicyOptions.prototype.requestedPolicyVersion = 0;
    
                    /**
                     * Creates a new GetPolicyOptions instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions=} [properties] Properties to set
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions instance
                     */
                    GetPolicyOptions.create = function create(properties) {
                        return new GetPolicyOptions(properties);
                    };
    
                    /**
                     * Encodes the specified GetPolicyOptions message. Does not implicitly {@link google.iam.v1.GetPolicyOptions.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions} message GetPolicyOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetPolicyOptions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.requestedPolicyVersion);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetPolicyOptions message, length delimited. Does not implicitly {@link google.iam.v1.GetPolicyOptions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions} message GetPolicyOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetPolicyOptions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetPolicyOptions message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetPolicyOptions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.GetPolicyOptions();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.requestedPolicyVersion = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetPolicyOptions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetPolicyOptions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetPolicyOptions message.
                     * @function verify
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetPolicyOptions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion"))
                            if (!$util.isInteger(message.requestedPolicyVersion))
                                return "requestedPolicyVersion: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetPolicyOptions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     */
                    GetPolicyOptions.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.GetPolicyOptions)
                            return object;
                        var message = new $root.google.iam.v1.GetPolicyOptions();
                        if (object.requestedPolicyVersion != null)
                            message.requestedPolicyVersion = object.requestedPolicyVersion | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetPolicyOptions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.GetPolicyOptions} message GetPolicyOptions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetPolicyOptions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.requestedPolicyVersion = 0;
                        if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion"))
                            object.requestedPolicyVersion = message.requestedPolicyVersion;
                        return object;
                    };
    
                    /**
                     * Converts this GetPolicyOptions to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetPolicyOptions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetPolicyOptions;
                })();
    
                v1.Policy = (function() {
    
                    /**
                     * Properties of a Policy.
                     * @memberof google.iam.v1
                     * @interface IPolicy
                     * @property {number|null} [version] Policy version
                     * @property {Array.<google.iam.v1.IBinding>|null} [bindings] Policy bindings
                     * @property {Uint8Array|null} [etag] Policy etag
                     */
    
                    /**
                     * Constructs a new Policy.
                     * @memberof google.iam.v1
                     * @classdesc Represents a Policy.
                     * @implements IPolicy
                     * @constructor
                     * @param {google.iam.v1.IPolicy=} [properties] Properties to set
                     */
                    function Policy(properties) {
                        this.bindings = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Policy version.
                     * @member {number} version
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.version = 0;
    
                    /**
                     * Policy bindings.
                     * @member {Array.<google.iam.v1.IBinding>} bindings
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.bindings = $util.emptyArray;
    
                    /**
                     * Policy etag.
                     * @member {Uint8Array} etag
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.etag = $util.newBuffer([]);
    
                    /**
                     * Creates a new Policy instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy=} [properties] Properties to set
                     * @returns {google.iam.v1.Policy} Policy instance
                     */
                    Policy.create = function create(properties) {
                        return new Policy(properties);
                    };
    
                    /**
                     * Encodes the specified Policy message. Does not implicitly {@link google.iam.v1.Policy.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.version != null && message.hasOwnProperty("version"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.version);
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.etag);
                        if (message.bindings != null && message.bindings.length)
                            for (var i = 0; i < message.bindings.length; ++i)
                                $root.google.iam.v1.Binding.encode(message.bindings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Policy message, length delimited. Does not implicitly {@link google.iam.v1.Policy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Policy();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.version = reader.int32();
                                break;
                            case 4:
                                if (!(message.bindings && message.bindings.length))
                                    message.bindings = [];
                                message.bindings.push($root.google.iam.v1.Binding.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.etag = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Policy message.
                     * @function verify
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Policy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        if (message.bindings != null && message.hasOwnProperty("bindings")) {
                            if (!Array.isArray(message.bindings))
                                return "bindings: array expected";
                            for (var i = 0; i < message.bindings.length; ++i) {
                                var error = $root.google.iam.v1.Binding.verify(message.bindings[i]);
                                if (error)
                                    return "bindings." + error;
                            }
                        }
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            if (!(message.etag && typeof message.etag.length === "number" || $util.isString(message.etag)))
                                return "etag: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Policy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.Policy} Policy
                     */
                    Policy.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.Policy)
                            return object;
                        var message = new $root.google.iam.v1.Policy();
                        if (object.version != null)
                            message.version = object.version | 0;
                        if (object.bindings) {
                            if (!Array.isArray(object.bindings))
                                throw TypeError(".google.iam.v1.Policy.bindings: array expected");
                            message.bindings = [];
                            for (var i = 0; i < object.bindings.length; ++i) {
                                if (typeof object.bindings[i] !== "object")
                                    throw TypeError(".google.iam.v1.Policy.bindings: object expected");
                                message.bindings[i] = $root.google.iam.v1.Binding.fromObject(object.bindings[i]);
                            }
                        }
                        if (object.etag != null)
                            if (typeof object.etag === "string")
                                $util.base64.decode(object.etag, message.etag = $util.newBuffer($util.base64.length(object.etag)), 0);
                            else if (object.etag.length)
                                message.etag = object.etag;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Policy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.Policy} message Policy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Policy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.bindings = [];
                        if (options.defaults) {
                            object.version = 0;
                            if (options.bytes === String)
                                object.etag = "";
                            else {
                                object.etag = [];
                                if (options.bytes !== Array)
                                    object.etag = $util.newBuffer(object.etag);
                            }
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            object.etag = options.bytes === String ? $util.base64.encode(message.etag, 0, message.etag.length) : options.bytes === Array ? Array.prototype.slice.call(message.etag) : message.etag;
                        if (message.bindings && message.bindings.length) {
                            object.bindings = [];
                            for (var j = 0; j < message.bindings.length; ++j)
                                object.bindings[j] = $root.google.iam.v1.Binding.toObject(message.bindings[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Policy to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.Policy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Policy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Policy;
                })();
    
                v1.Binding = (function() {
    
                    /**
                     * Properties of a Binding.
                     * @memberof google.iam.v1
                     * @interface IBinding
                     * @property {string|null} [role] Binding role
                     * @property {Array.<string>|null} [members] Binding members
                     * @property {google.type.IExpr|null} [condition] Binding condition
                     */
    
                    /**
                     * Constructs a new Binding.
                     * @memberof google.iam.v1
                     * @classdesc Represents a Binding.
                     * @implements IBinding
                     * @constructor
                     * @param {google.iam.v1.IBinding=} [properties] Properties to set
                     */
                    function Binding(properties) {
                        this.members = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Binding role.
                     * @member {string} role
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.role = "";
    
                    /**
                     * Binding members.
                     * @member {Array.<string>} members
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.members = $util.emptyArray;
    
                    /**
                     * Binding condition.
                     * @member {google.type.IExpr|null|undefined} condition
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.condition = null;
    
                    /**
                     * Creates a new Binding instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding=} [properties] Properties to set
                     * @returns {google.iam.v1.Binding} Binding instance
                     */
                    Binding.create = function create(properties) {
                        return new Binding(properties);
                    };
    
                    /**
                     * Encodes the specified Binding message. Does not implicitly {@link google.iam.v1.Binding.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding} message Binding message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Binding.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.role != null && message.hasOwnProperty("role"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.role);
                        if (message.members != null && message.members.length)
                            for (var i = 0; i < message.members.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.members[i]);
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Binding message, length delimited. Does not implicitly {@link google.iam.v1.Binding.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding} message Binding message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Binding.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Binding message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.Binding} Binding
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Binding.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Binding();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.role = reader.string();
                                break;
                            case 2:
                                if (!(message.members && message.members.length))
                                    message.members = [];
                                message.members.push(reader.string());
                                break;
                            case 3:
                                message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Binding message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.Binding} Binding
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Binding.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Binding message.
                     * @function verify
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Binding.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.role != null && message.hasOwnProperty("role"))
                            if (!$util.isString(message.role))
                                return "role: string expected";
                        if (message.members != null && message.hasOwnProperty("members")) {
                            if (!Array.isArray(message.members))
                                return "members: array expected";
                            for (var i = 0; i < message.members.length; ++i)
                                if (!$util.isString(message.members[i]))
                                    return "members: string[] expected";
                        }
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            var error = $root.google.type.Expr.verify(message.condition);
                            if (error)
                                return "condition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Binding message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.Binding} Binding
                     */
                    Binding.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.Binding)
                            return object;
                        var message = new $root.google.iam.v1.Binding();
                        if (object.role != null)
                            message.role = String(object.role);
                        if (object.members) {
                            if (!Array.isArray(object.members))
                                throw TypeError(".google.iam.v1.Binding.members: array expected");
                            message.members = [];
                            for (var i = 0; i < object.members.length; ++i)
                                message.members[i] = String(object.members[i]);
                        }
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.iam.v1.Binding.condition: object expected");
                            message.condition = $root.google.type.Expr.fromObject(object.condition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Binding message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.Binding} message Binding
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Binding.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.members = [];
                        if (options.defaults) {
                            object.role = "";
                            object.condition = null;
                        }
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = message.role;
                        if (message.members && message.members.length) {
                            object.members = [];
                            for (var j = 0; j < message.members.length; ++j)
                                object.members[j] = message.members[j];
                        }
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            object.condition = $root.google.type.Expr.toObject(message.condition, options);
                        return object;
                    };
    
                    /**
                     * Converts this Binding to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.Binding
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Binding.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Binding;
                })();
    
                v1.PolicyDelta = (function() {
    
                    /**
                     * Properties of a PolicyDelta.
                     * @memberof google.iam.v1
                     * @interface IPolicyDelta
                     * @property {Array.<google.iam.v1.IBindingDelta>|null} [bindingDeltas] PolicyDelta bindingDeltas
                     * @property {Array.<google.iam.v1.IAuditConfigDelta>|null} [auditConfigDeltas] PolicyDelta auditConfigDeltas
                     */
    
                    /**
                     * Constructs a new PolicyDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents a PolicyDelta.
                     * @implements IPolicyDelta
                     * @constructor
                     * @param {google.iam.v1.IPolicyDelta=} [properties] Properties to set
                     */
                    function PolicyDelta(properties) {
                        this.bindingDeltas = [];
                        this.auditConfigDeltas = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PolicyDelta bindingDeltas.
                     * @member {Array.<google.iam.v1.IBindingDelta>} bindingDeltas
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     */
                    PolicyDelta.prototype.bindingDeltas = $util.emptyArray;
    
                    /**
                     * PolicyDelta auditConfigDeltas.
                     * @member {Array.<google.iam.v1.IAuditConfigDelta>} auditConfigDeltas
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     */
                    PolicyDelta.prototype.auditConfigDeltas = $util.emptyArray;
    
                    /**
                     * Creates a new PolicyDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta instance
                     */
                    PolicyDelta.create = function create(properties) {
                        return new PolicyDelta(properties);
                    };
    
                    /**
                     * Encodes the specified PolicyDelta message. Does not implicitly {@link google.iam.v1.PolicyDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta} message PolicyDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.bindingDeltas != null && message.bindingDeltas.length)
                            for (var i = 0; i < message.bindingDeltas.length; ++i)
                                $root.google.iam.v1.BindingDelta.encode(message.bindingDeltas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.auditConfigDeltas != null && message.auditConfigDeltas.length)
                            for (var i = 0; i < message.auditConfigDeltas.length; ++i)
                                $root.google.iam.v1.AuditConfigDelta.encode(message.auditConfigDeltas[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PolicyDelta message, length delimited. Does not implicitly {@link google.iam.v1.PolicyDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta} message PolicyDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PolicyDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.PolicyDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.bindingDeltas && message.bindingDeltas.length))
                                    message.bindingDeltas = [];
                                message.bindingDeltas.push($root.google.iam.v1.BindingDelta.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.auditConfigDeltas && message.auditConfigDeltas.length))
                                    message.auditConfigDeltas = [];
                                message.auditConfigDeltas.push($root.google.iam.v1.AuditConfigDelta.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PolicyDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PolicyDelta message.
                     * @function verify
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PolicyDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.bindingDeltas != null && message.hasOwnProperty("bindingDeltas")) {
                            if (!Array.isArray(message.bindingDeltas))
                                return "bindingDeltas: array expected";
                            for (var i = 0; i < message.bindingDeltas.length; ++i) {
                                var error = $root.google.iam.v1.BindingDelta.verify(message.bindingDeltas[i]);
                                if (error)
                                    return "bindingDeltas." + error;
                            }
                        }
                        if (message.auditConfigDeltas != null && message.hasOwnProperty("auditConfigDeltas")) {
                            if (!Array.isArray(message.auditConfigDeltas))
                                return "auditConfigDeltas: array expected";
                            for (var i = 0; i < message.auditConfigDeltas.length; ++i) {
                                var error = $root.google.iam.v1.AuditConfigDelta.verify(message.auditConfigDeltas[i]);
                                if (error)
                                    return "auditConfigDeltas." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PolicyDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     */
                    PolicyDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.PolicyDelta)
                            return object;
                        var message = new $root.google.iam.v1.PolicyDelta();
                        if (object.bindingDeltas) {
                            if (!Array.isArray(object.bindingDeltas))
                                throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: array expected");
                            message.bindingDeltas = [];
                            for (var i = 0; i < object.bindingDeltas.length; ++i) {
                                if (typeof object.bindingDeltas[i] !== "object")
                                    throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: object expected");
                                message.bindingDeltas[i] = $root.google.iam.v1.BindingDelta.fromObject(object.bindingDeltas[i]);
                            }
                        }
                        if (object.auditConfigDeltas) {
                            if (!Array.isArray(object.auditConfigDeltas))
                                throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected");
                            message.auditConfigDeltas = [];
                            for (var i = 0; i < object.auditConfigDeltas.length; ++i) {
                                if (typeof object.auditConfigDeltas[i] !== "object")
                                    throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected");
                                message.auditConfigDeltas[i] = $root.google.iam.v1.AuditConfigDelta.fromObject(object.auditConfigDeltas[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PolicyDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.PolicyDelta} message PolicyDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PolicyDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.bindingDeltas = [];
                            object.auditConfigDeltas = [];
                        }
                        if (message.bindingDeltas && message.bindingDeltas.length) {
                            object.bindingDeltas = [];
                            for (var j = 0; j < message.bindingDeltas.length; ++j)
                                object.bindingDeltas[j] = $root.google.iam.v1.BindingDelta.toObject(message.bindingDeltas[j], options);
                        }
                        if (message.auditConfigDeltas && message.auditConfigDeltas.length) {
                            object.auditConfigDeltas = [];
                            for (var j = 0; j < message.auditConfigDeltas.length; ++j)
                                object.auditConfigDeltas[j] = $root.google.iam.v1.AuditConfigDelta.toObject(message.auditConfigDeltas[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PolicyDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PolicyDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PolicyDelta;
                })();
    
                v1.BindingDelta = (function() {
    
                    /**
                     * Properties of a BindingDelta.
                     * @memberof google.iam.v1
                     * @interface IBindingDelta
                     * @property {google.iam.v1.BindingDelta.Action|null} [action] BindingDelta action
                     * @property {string|null} [role] BindingDelta role
                     * @property {string|null} [member] BindingDelta member
                     * @property {google.type.IExpr|null} [condition] BindingDelta condition
                     */
    
                    /**
                     * Constructs a new BindingDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents a BindingDelta.
                     * @implements IBindingDelta
                     * @constructor
                     * @param {google.iam.v1.IBindingDelta=} [properties] Properties to set
                     */
                    function BindingDelta(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BindingDelta action.
                     * @member {google.iam.v1.BindingDelta.Action} action
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.action = 0;
    
                    /**
                     * BindingDelta role.
                     * @member {string} role
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.role = "";
    
                    /**
                     * BindingDelta member.
                     * @member {string} member
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.member = "";
    
                    /**
                     * BindingDelta condition.
                     * @member {google.type.IExpr|null|undefined} condition
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.condition = null;
    
                    /**
                     * Creates a new BindingDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.BindingDelta} BindingDelta instance
                     */
                    BindingDelta.create = function create(properties) {
                        return new BindingDelta(properties);
                    };
    
                    /**
                     * Encodes the specified BindingDelta message. Does not implicitly {@link google.iam.v1.BindingDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta} message BindingDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BindingDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.action != null && message.hasOwnProperty("action"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                        if (message.role != null && message.hasOwnProperty("role"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.role);
                        if (message.member != null && message.hasOwnProperty("member"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.member);
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BindingDelta message, length delimited. Does not implicitly {@link google.iam.v1.BindingDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta} message BindingDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BindingDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BindingDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BindingDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.BindingDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.action = reader.int32();
                                break;
                            case 2:
                                message.role = reader.string();
                                break;
                            case 3:
                                message.member = reader.string();
                                break;
                            case 4:
                                message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BindingDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BindingDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BindingDelta message.
                     * @function verify
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BindingDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.role != null && message.hasOwnProperty("role"))
                            if (!$util.isString(message.role))
                                return "role: string expected";
                        if (message.member != null && message.hasOwnProperty("member"))
                            if (!$util.isString(message.member))
                                return "member: string expected";
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            var error = $root.google.type.Expr.verify(message.condition);
                            if (error)
                                return "condition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a BindingDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     */
                    BindingDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.BindingDelta)
                            return object;
                        var message = new $root.google.iam.v1.BindingDelta();
                        switch (object.action) {
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.action = 1;
                            break;
                        case "REMOVE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.role != null)
                            message.role = String(object.role);
                        if (object.member != null)
                            message.member = String(object.member);
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.iam.v1.BindingDelta.condition: object expected");
                            message.condition = $root.google.type.Expr.fromObject(object.condition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BindingDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.BindingDelta} message BindingDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BindingDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                            object.role = "";
                            object.member = "";
                            object.condition = null;
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.iam.v1.BindingDelta.Action[message.action] : message.action;
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = message.role;
                        if (message.member != null && message.hasOwnProperty("member"))
                            object.member = message.member;
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            object.condition = $root.google.type.Expr.toObject(message.condition, options);
                        return object;
                    };
    
                    /**
                     * Converts this BindingDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BindingDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Action enum.
                     * @name google.iam.v1.BindingDelta.Action
                     * @enum {string}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} REMOVE=2 REMOVE value
                     */
                    BindingDelta.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "REMOVE"] = 2;
                        return values;
                    })();
    
                    return BindingDelta;
                })();
    
                v1.AuditConfigDelta = (function() {
    
                    /**
                     * Properties of an AuditConfigDelta.
                     * @memberof google.iam.v1
                     * @interface IAuditConfigDelta
                     * @property {google.iam.v1.AuditConfigDelta.Action|null} [action] AuditConfigDelta action
                     * @property {string|null} [service] AuditConfigDelta service
                     * @property {string|null} [exemptedMember] AuditConfigDelta exemptedMember
                     * @property {string|null} [logType] AuditConfigDelta logType
                     */
    
                    /**
                     * Constructs a new AuditConfigDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents an AuditConfigDelta.
                     * @implements IAuditConfigDelta
                     * @constructor
                     * @param {google.iam.v1.IAuditConfigDelta=} [properties] Properties to set
                     */
                    function AuditConfigDelta(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuditConfigDelta action.
                     * @member {google.iam.v1.AuditConfigDelta.Action} action
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.action = 0;
    
                    /**
                     * AuditConfigDelta service.
                     * @member {string} service
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.service = "";
    
                    /**
                     * AuditConfigDelta exemptedMember.
                     * @member {string} exemptedMember
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.exemptedMember = "";
    
                    /**
                     * AuditConfigDelta logType.
                     * @member {string} logType
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.logType = "";
    
                    /**
                     * Creates a new AuditConfigDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta instance
                     */
                    AuditConfigDelta.create = function create(properties) {
                        return new AuditConfigDelta(properties);
                    };
    
                    /**
                     * Encodes the specified AuditConfigDelta message. Does not implicitly {@link google.iam.v1.AuditConfigDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta} message AuditConfigDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfigDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.action != null && message.hasOwnProperty("action"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                        if (message.service != null && message.hasOwnProperty("service"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.service);
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.exemptedMember);
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.logType);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuditConfigDelta message, length delimited. Does not implicitly {@link google.iam.v1.AuditConfigDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta} message AuditConfigDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfigDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuditConfigDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfigDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditConfigDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.action = reader.int32();
                                break;
                            case 2:
                                message.service = reader.string();
                                break;
                            case 3:
                                message.exemptedMember = reader.string();
                                break;
                            case 4:
                                message.logType = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuditConfigDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfigDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuditConfigDelta message.
                     * @function verify
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuditConfigDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.service != null && message.hasOwnProperty("service"))
                            if (!$util.isString(message.service))
                                return "service: string expected";
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            if (!$util.isString(message.exemptedMember))
                                return "exemptedMember: string expected";
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            if (!$util.isString(message.logType))
                                return "logType: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an AuditConfigDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     */
                    AuditConfigDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.AuditConfigDelta)
                            return object;
                        var message = new $root.google.iam.v1.AuditConfigDelta();
                        switch (object.action) {
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.action = 1;
                            break;
                        case "REMOVE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.service != null)
                            message.service = String(object.service);
                        if (object.exemptedMember != null)
                            message.exemptedMember = String(object.exemptedMember);
                        if (object.logType != null)
                            message.logType = String(object.logType);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuditConfigDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.AuditConfigDelta} message AuditConfigDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuditConfigDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                            object.service = "";
                            object.exemptedMember = "";
                            object.logType = "";
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.iam.v1.AuditConfigDelta.Action[message.action] : message.action;
                        if (message.service != null && message.hasOwnProperty("service"))
                            object.service = message.service;
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            object.exemptedMember = message.exemptedMember;
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            object.logType = message.logType;
                        return object;
                    };
    
                    /**
                     * Converts this AuditConfigDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuditConfigDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Action enum.
                     * @name google.iam.v1.AuditConfigDelta.Action
                     * @enum {string}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} REMOVE=2 REMOVE value
                     */
                    AuditConfigDelta.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "REMOVE"] = 2;
                        return values;
                    })();
    
                    return AuditConfigDelta;
                })();
    
                return v1;
            })();
    
            return iam;
        })();
    
        google.type = (function() {
    
            /**
             * Namespace type.
             * @memberof google
             * @namespace
             */
            var type = {};
    
            type.Expr = (function() {
    
                /**
                 * Properties of an Expr.
                 * @memberof google.type
                 * @interface IExpr
                 * @property {string|null} [expression] Expr expression
                 * @property {string|null} [title] Expr title
                 * @property {string|null} [description] Expr description
                 * @property {string|null} [location] Expr location
                 */
    
                /**
                 * Constructs a new Expr.
                 * @memberof google.type
                 * @classdesc Represents an Expr.
                 * @implements IExpr
                 * @constructor
                 * @param {google.type.IExpr=} [properties] Properties to set
                 */
                function Expr(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Expr expression.
                 * @member {string} expression
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.expression = "";
    
                /**
                 * Expr title.
                 * @member {string} title
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.title = "";
    
                /**
                 * Expr description.
                 * @member {string} description
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.description = "";
    
                /**
                 * Expr location.
                 * @member {string} location
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.location = "";
    
                /**
                 * Creates a new Expr instance using the specified properties.
                 * @function create
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr=} [properties] Properties to set
                 * @returns {google.type.Expr} Expr instance
                 */
                Expr.create = function create(properties) {
                    return new Expr(properties);
                };
    
                /**
                 * Encodes the specified Expr message. Does not implicitly {@link google.type.Expr.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr} message Expr message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Expr.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.expression);
                    if (message.title != null && message.hasOwnProperty("title"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                    if (message.description != null && message.hasOwnProperty("description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.location != null && message.hasOwnProperty("location"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.location);
                    return writer;
                };
    
                /**
                 * Encodes the specified Expr message, length delimited. Does not implicitly {@link google.type.Expr.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr} message Expr message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Expr.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Expr message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.Expr
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.Expr} Expr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Expr.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.Expr();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.expression = reader.string();
                            break;
                        case 2:
                            message.title = reader.string();
                            break;
                        case 3:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.location = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Expr message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.Expr
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.Expr} Expr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Expr.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Expr message.
                 * @function verify
                 * @memberof google.type.Expr
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Expr.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        if (!$util.isString(message.expression))
                            return "expression: string expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.location != null && message.hasOwnProperty("location"))
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    return null;
                };
    
                /**
                 * Creates an Expr message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.Expr
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.Expr} Expr
                 */
                Expr.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.Expr)
                        return object;
                    var message = new $root.google.type.Expr();
                    if (object.expression != null)
                        message.expression = String(object.expression);
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };
    
                /**
                 * Creates a plain object from an Expr message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.Expr} message Expr
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Expr.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.expression = "";
                        object.title = "";
                        object.description = "";
                        object.location = "";
                    }
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        object.expression = message.expression;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = message.location;
                    return object;
                };
    
                /**
                 * Converts this Expr to JSON.
                 * @function toJSON
                 * @memberof google.type.Expr
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Expr.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Expr;
            })();
    
            return type;
        })();
    
        google.longrunning = (function() {
    
            /**
             * Namespace longrunning.
             * @memberof google
             * @namespace
             */
            var longrunning = {};
    
            longrunning.Operations = (function() {
    
                /**
                 * Constructs a new Operations service.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operations
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Operations(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
    
                /**
                 * Creates new Operations service using the specified rpc implementation.
                 * @function create
                 * @memberof google.longrunning.Operations
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Operations} RPC service. Useful where requests and/or responses are streamed.
                 */
                Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#listOperations}.
                 * @memberof google.longrunning.Operations
                 * @typedef ListOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.ListOperationsResponse} [response] ListOperationsResponse
                 */
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @param {google.longrunning.Operations.ListOperationsCallback} callback Node-style callback called with the error, if any, and ListOperationsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
                    return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
                }, "name", { value: "ListOperations" });
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @returns {Promise<google.longrunning.ListOperationsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#getOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef GetOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @param {google.longrunning.Operations.GetOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
                    return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "GetOperation" });
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#deleteOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef DeleteOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @param {google.longrunning.Operations.DeleteOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
                    return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteOperation" });
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#cancelOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef CancelOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @param {google.longrunning.Operations.CancelOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
                    return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "CancelOperation" });
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#waitOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef WaitOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @param {google.longrunning.Operations.WaitOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
                    return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "WaitOperation" });
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                return Operations;
            })();
    
            longrunning.Operation = (function() {
    
                /**
                 * Properties of an Operation.
                 * @memberof google.longrunning
                 * @interface IOperation
                 * @property {string|null} [name] Operation name
                 * @property {google.protobuf.IAny|null} [metadata] Operation metadata
                 * @property {boolean|null} [done] Operation done
                 * @property {google.rpc.IStatus|null} [error] Operation error
                 * @property {google.protobuf.IAny|null} [response] Operation response
                 */
    
                /**
                 * Constructs a new Operation.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operation.
                 * @implements IOperation
                 * @constructor
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 */
                function Operation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Operation name.
                 * @member {string} name
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.name = "";
    
                /**
                 * Operation metadata.
                 * @member {google.protobuf.IAny|null|undefined} metadata
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.metadata = null;
    
                /**
                 * Operation done.
                 * @member {boolean} done
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.done = false;
    
                /**
                 * Operation error.
                 * @member {google.rpc.IStatus|null|undefined} error
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.error = null;
    
                /**
                 * Operation response.
                 * @member {google.protobuf.IAny|null|undefined} response
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.response = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Operation result.
                 * @member {"error"|"response"|undefined} result
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Object.defineProperty(Operation.prototype, "result", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Operation instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 * @returns {google.longrunning.Operation} Operation instance
                 */
                Operation.create = function create(properties) {
                    return new Operation(properties);
                };
    
                /**
                 * Encodes the specified Operation message. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.google.protobuf.Any.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.done != null && message.hasOwnProperty("done"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.done);
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.google.protobuf.Any.encode(message.response, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Operation message, length delimited. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.done = reader.bool();
                            break;
                        case 4:
                            message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Operation message.
                 * @function verify
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Operation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.google.protobuf.Any.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.done != null && message.hasOwnProperty("done"))
                        if (typeof message.done !== "boolean")
                            return "done: boolean expected";
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.result = 1;
                        {
                            var error = $root.google.rpc.Status.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        if (properties.result === 1)
                            return "result: multiple values";
                        properties.result = 1;
                        {
                            var error = $root.google.protobuf.Any.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Operation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.Operation} Operation
                 */
                Operation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.Operation)
                        return object;
                    var message = new $root.google.longrunning.Operation();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".google.longrunning.Operation.metadata: object expected");
                        message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
                    }
                    if (object.done != null)
                        message.done = Boolean(object.done);
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".google.longrunning.Operation.error: object expected");
                        message.error = $root.google.rpc.Status.fromObject(object.error);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".google.longrunning.Operation.response: object expected");
                        message.response = $root.google.protobuf.Any.fromObject(object.response);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Operation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.Operation} message Operation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Operation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.metadata = null;
                        object.done = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
                    if (message.done != null && message.hasOwnProperty("done"))
                        object.done = message.done;
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.google.rpc.Status.toObject(message.error, options);
                        if (options.oneofs)
                            object.result = "error";
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        object.response = $root.google.protobuf.Any.toObject(message.response, options);
                        if (options.oneofs)
                            object.result = "response";
                    }
                    return object;
                };
    
                /**
                 * Converts this Operation to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.Operation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Operation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Operation;
            })();
    
            longrunning.GetOperationRequest = (function() {
    
                /**
                 * Properties of a GetOperationRequest.
                 * @memberof google.longrunning
                 * @interface IGetOperationRequest
                 * @property {string|null} [name] GetOperationRequest name
                 */
    
                /**
                 * Constructs a new GetOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a GetOperationRequest.
                 * @implements IGetOperationRequest
                 * @constructor
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 */
                function GetOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 */
                GetOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest instance
                 */
                GetOperationRequest.create = function create(properties) {
                    return new GetOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOperationRequest message. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 */
                GetOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.GetOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.GetOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.GetOperationRequest} message GetOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GetOperationRequest;
            })();
    
            longrunning.ListOperationsRequest = (function() {
    
                /**
                 * Properties of a ListOperationsRequest.
                 * @memberof google.longrunning
                 * @interface IListOperationsRequest
                 * @property {string|null} [name] ListOperationsRequest name
                 * @property {string|null} [filter] ListOperationsRequest filter
                 * @property {number|null} [pageSize] ListOperationsRequest pageSize
                 * @property {string|null} [pageToken] ListOperationsRequest pageToken
                 */
    
                /**
                 * Constructs a new ListOperationsRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsRequest.
                 * @implements IListOperationsRequest
                 * @constructor
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 */
                function ListOperationsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.name = "";
    
                /**
                 * ListOperationsRequest filter.
                 * @member {string} filter
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.filter = "";
    
                /**
                 * ListOperationsRequest pageSize.
                 * @member {number} pageSize
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageSize = 0;
    
                /**
                 * ListOperationsRequest pageToken.
                 * @member {string} pageToken
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListOperationsRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest instance
                 */
                ListOperationsRequest.create = function create(properties) {
                    return new ListOperationsRequest(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.filter);
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 4:
                            message.name = reader.string();
                            break;
                        case 1:
                            message.filter = reader.string();
                            break;
                        case 2:
                            message.pageSize = reader.int32();
                            break;
                        case 3:
                            message.pageToken = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsRequest message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 */
                ListOperationsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsRequest)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.ListOperationsRequest} message ListOperationsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                        object.name = "";
                    }
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListOperationsRequest;
            })();
    
            longrunning.ListOperationsResponse = (function() {
    
                /**
                 * Properties of a ListOperationsResponse.
                 * @memberof google.longrunning
                 * @interface IListOperationsResponse
                 * @property {Array.<google.longrunning.IOperation>|null} [operations] ListOperationsResponse operations
                 * @property {string|null} [nextPageToken] ListOperationsResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListOperationsResponse.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsResponse.
                 * @implements IListOperationsResponse
                 * @constructor
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 */
                function ListOperationsResponse(properties) {
                    this.operations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsResponse operations.
                 * @member {Array.<google.longrunning.IOperation>} operations
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.operations = $util.emptyArray;
    
                /**
                 * ListOperationsResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListOperationsResponse instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse instance
                 */
                ListOperationsResponse.create = function create(properties) {
                    return new ListOperationsResponse(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operations != null && message.operations.length)
                        for (var i = 0; i < message.operations.length; ++i)
                            $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.operations && message.operations.length))
                                message.operations = [];
                            message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.nextPageToken = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsResponse message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operations != null && message.hasOwnProperty("operations")) {
                        if (!Array.isArray(message.operations))
                            return "operations: array expected";
                        for (var i = 0; i < message.operations.length; ++i) {
                            var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                            if (error)
                                return "operations." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 */
                ListOperationsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsResponse)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsResponse();
                    if (object.operations) {
                        if (!Array.isArray(object.operations))
                            throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                        message.operations = [];
                        for (var i = 0; i < object.operations.length; ++i) {
                            if (typeof object.operations[i] !== "object")
                                throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                            message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.ListOperationsResponse} message ListOperationsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.operations = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.operations && message.operations.length) {
                        object.operations = [];
                        for (var j = 0; j < message.operations.length; ++j)
                            object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsResponse to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListOperationsResponse;
            })();
    
            longrunning.CancelOperationRequest = (function() {
    
                /**
                 * Properties of a CancelOperationRequest.
                 * @memberof google.longrunning
                 * @interface ICancelOperationRequest
                 * @property {string|null} [name] CancelOperationRequest name
                 */
    
                /**
                 * Constructs a new CancelOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a CancelOperationRequest.
                 * @implements ICancelOperationRequest
                 * @constructor
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 */
                function CancelOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CancelOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 */
                CancelOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new CancelOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest instance
                 */
                CancelOperationRequest.create = function create(properties) {
                    return new CancelOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CancelOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a CancelOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 */
                CancelOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.CancelOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.CancelOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CancelOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.CancelOperationRequest} message CancelOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this CancelOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CancelOperationRequest;
            })();
    
            longrunning.DeleteOperationRequest = (function() {
    
                /**
                 * Properties of a DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @interface IDeleteOperationRequest
                 * @property {string|null} [name] DeleteOperationRequest name
                 */
    
                /**
                 * Constructs a new DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a DeleteOperationRequest.
                 * @implements IDeleteOperationRequest
                 * @constructor
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 */
                function DeleteOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 */
                DeleteOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest instance
                 */
                DeleteOperationRequest.create = function create(properties) {
                    return new DeleteOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 */
                DeleteOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.DeleteOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.DeleteOperationRequest} message DeleteOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DeleteOperationRequest;
            })();
    
            longrunning.WaitOperationRequest = (function() {
    
                /**
                 * Properties of a WaitOperationRequest.
                 * @memberof google.longrunning
                 * @interface IWaitOperationRequest
                 * @property {string|null} [name] WaitOperationRequest name
                 * @property {google.protobuf.IDuration|null} [timeout] WaitOperationRequest timeout
                 */
    
                /**
                 * Constructs a new WaitOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a WaitOperationRequest.
                 * @implements IWaitOperationRequest
                 * @constructor
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 */
                function WaitOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * WaitOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.name = "";
    
                /**
                 * WaitOperationRequest timeout.
                 * @member {google.protobuf.IDuration|null|undefined} timeout
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.timeout = null;
    
                /**
                 * Creates a new WaitOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest instance
                 */
                WaitOperationRequest.create = function create(properties) {
                    return new WaitOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a WaitOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WaitOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.timeout != null && message.hasOwnProperty("timeout")) {
                        var error = $root.google.protobuf.Duration.verify(message.timeout);
                        if (error)
                            return "timeout." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a WaitOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 */
                WaitOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.WaitOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.WaitOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.timeout != null) {
                        if (typeof object.timeout !== "object")
                            throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                        message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a WaitOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.WaitOperationRequest} message WaitOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WaitOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.timeout = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
                    return object;
                };
    
                /**
                 * Converts this WaitOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WaitOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return WaitOperationRequest;
            })();
    
            longrunning.OperationInfo = (function() {
    
                /**
                 * Properties of an OperationInfo.
                 * @memberof google.longrunning
                 * @interface IOperationInfo
                 * @property {string|null} [responseType] OperationInfo responseType
                 * @property {string|null} [metadataType] OperationInfo metadataType
                 */
    
                /**
                 * Constructs a new OperationInfo.
                 * @memberof google.longrunning
                 * @classdesc Represents an OperationInfo.
                 * @implements IOperationInfo
                 * @constructor
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 */
                function OperationInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OperationInfo responseType.
                 * @member {string} responseType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.responseType = "";
    
                /**
                 * OperationInfo metadataType.
                 * @member {string} metadataType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.metadataType = "";
    
                /**
                 * Creates a new OperationInfo instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 * @returns {google.longrunning.OperationInfo} OperationInfo instance
                 */
                OperationInfo.create = function create(properties) {
                    return new OperationInfo(properties);
                };
    
                /**
                 * Encodes the specified OperationInfo message. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseType);
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.metadataType);
                    return writer;
                };
    
                /**
                 * Encodes the specified OperationInfo message, length delimited. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.responseType = reader.string();
                            break;
                        case 2:
                            message.metadataType = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OperationInfo message.
                 * @function verify
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OperationInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        if (!$util.isString(message.responseType))
                            return "responseType: string expected";
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        if (!$util.isString(message.metadataType))
                            return "metadataType: string expected";
                    return null;
                };
    
                /**
                 * Creates an OperationInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 */
                OperationInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.OperationInfo)
                        return object;
                    var message = new $root.google.longrunning.OperationInfo();
                    if (object.responseType != null)
                        message.responseType = String(object.responseType);
                    if (object.metadataType != null)
                        message.metadataType = String(object.metadataType);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OperationInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.OperationInfo} message OperationInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OperationInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.responseType = "";
                        object.metadataType = "";
                    }
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        object.responseType = message.responseType;
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        object.metadataType = message.metadataType;
                    return object;
                };
    
                /**
                 * Converts this OperationInfo to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OperationInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OperationInfo;
            })();
    
            return longrunning;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && message.hasOwnProperty("code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && message.hasOwnProperty("message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.int32();
                            break;
                        case 2:
                            message.message = reader.string();
                            break;
                        case 3:
                            if (!(message.details && message.details.length))
                                message.details = [];
                            message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        return google;
    })();

    return $root;
});
